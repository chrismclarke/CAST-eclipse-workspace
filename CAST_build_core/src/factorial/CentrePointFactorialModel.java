package factorial;import dataView.*;import models.*;public class CentrePointFactorialModel extends MultiFactorModel {	private double centreY[];		private boolean useCentrePoints = true;		public CentrePointFactorialModel(String name, DataSet data, String[][] termKey,																								int[][] startModel, double[] centreY) {		super(name, data, termKey, startModel);		this.centreY = centreY;	}		public void setUseCentrePoints(boolean useCentrePoints) {		this.useCentrePoints = useCentrePoints;	}		public SSComponent[] getBestSsqComponents(String yKey) {		SSComponent[] factorialSsq = super.getBestSsqComponents(yKey);				SSComponent[] ssq = new SSComponent[factorialSsq.length + 1];		System.arraycopy(factorialSsq, 0, ssq, 0, factorialSsq.length);				if (useCentrePoints) {			NumVariable yVar =  (NumVariable)data.getVariable(yKey);			double syFact = 0.0;//			double syyFact = 0.0;			int nFact = 0;			ValueEnumeration ye = yVar.values();			while (ye.hasMoreValues()) {				double y = ye.nextDouble();				syFact += y;//				syyFact += y * y;				nFact ++;			}						double syCent = 0.0;			double syyCent = 0.0;			int nCent = centreY.length;			for (int i=0 ; i<nCent ; i++) {				syCent += centreY[i];				syyCent += centreY[i] * centreY[i];			}						double factMean = syFact / nFact;			double centreMean = syCent / nCent;						double centreSsq = syyCent - syCent * centreMean;			ssq[0].ssq += centreSsq;			ssq[0].df += (nCent - 1);						double nonLinSsq = (centreMean - factMean) * (centreMean - factMean) / (1.0 / nCent + 1.0 / nFact);			ssq[ssq.length - 1] = new SSComponent(nonLinSsq, 1);						double sy = syFact + syCent;			int n = nFact + nCent;			double ssqMean = sy * sy / n;						ssq[1].ssq = ssqMean;		}		else			ssq[ssq.length - 1] = new SSComponent(0.0, 0);				return ssq;	}		public SSComponent getResidSsqComponent(String yKey, double[] fixedB) {		return getBestSsqComponents(yKey)[0];	}	}