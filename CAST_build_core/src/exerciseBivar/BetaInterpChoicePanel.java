package exerciseBivar;import java.awt.*;import dataView.*;import exercise2.*;public class BetaInterpChoicePanel extends MultichoicePanel {	static final private int kOptions = 4;		private NumValue slope, intercept;	private String xVarName, yVarName;	private int correctParam;	private String questionText[];	//================================================		private class BetaInterpOptionInfo extends OptionInformation {		private int qnIndex;		private NumValue param;				BetaInterpOptionInfo(int qnIndex, int correctParam) {			super(qnIndex % 2 == 0 && qnIndex / 2 == correctParam);			this.qnIndex = qnIndex;			param = (correctParam == 0) ? slope : intercept;		}				public boolean equals(OptionInformation a) {			BetaInterpOptionInfo oa = (BetaInterpOptionInfo)a;			return (qnIndex == oa.qnIndex);		}				public boolean lessThan(OptionInformation a) {			return true;		}				public String getOptionString() {			String s = questionText[qnIndex];			int startParam = s.indexOf("%%");			return s.substring(0, startParam) + param + s.substring(startParam + 2);		}				public String getMessageString() {			if (qnIndex / 2 != correctParam) {				if (correctParam == 0)		//	correct is slope, option is intercept					return "The value " + param + " is the slope of the line, but the selected option describes an intercept.";				else		//	correct is intercept, option is slope					return "The value " + param + " is the intercept of the line, but the selected option describes a slope.";			}			else				switch (qnIndex) {					case 0:						return "This option correctly interprets the slope of the line. When " + xVarName + " increases by one, " + yVarName + " is expected to increase by " + param + ".";					case 1:						return "From the equation, when " + xVarName + " increases by one, " + yVarName + " is expected to increase by " + param + ". This option states the opposite.";					case 2:						return "This option correctly interprets the intercept of the line. When " + xVarName + " is zero, " + yVarName + " is expected to be " + param + ".";					case 3:						return "From the equation, when " + xVarName + " is zero, " + yVarName + " is expected to be " + param + ". This option states the opposite.";				}			return "";		}	}	//================================================		public BetaInterpChoicePanel(ExerciseApplet exerciseApplet, String xVarName,											String yVarName, NumValue slope, NumValue intercept, int correctParam,											String[] questionText) {		super(exerciseApplet, kOptions);		optionInfo = new BetaInterpOptionInfo[kOptions];		doParamSetup(xVarName, yVarName, slope, intercept, correctParam, questionText);		setupPanel();	}		private void doParamSetup(String xVarName, String yVarName, NumValue slope, NumValue intercept,																						int correctParam, String[] questionText) {		this.xVarName = xVarName;		this.yVarName = yVarName;		this.slope = slope;		this.intercept = intercept;		this.correctParam = correctParam;		this.questionText = questionText;				setupChoices();	}		public void setupChoices() {		for (int i=0 ; i<kOptions ; i++)			optionInfo[i] = new BetaInterpOptionInfo(i, correctParam);				randomiseOptions();		findCorrectOption();	}		protected Component createOptionPanel(int optionIndex, ExerciseApplet exerciseApplet) {		return new OptionLongTextPanel(optionInfo, optionIndex, exerciseApplet);	}		public void changeOptions(String xVarName, String yVarName, NumValue slope, NumValue intercept,																									int correctParam, String[] questionText) {		doParamSetup(xVarName, yVarName, slope, intercept, correctParam, questionText);				for (int i=0 ; i<option.length ; i++)			((OptionLongTextPanel)option[i]).changeContent();	}}