package randomisation;import dataView.*;public class PivotedVariable extends NumFunctionVariable {	private NumVariable baseVariable;	private CatVariable catVariable;	private String yKey, catKey;	private double pivot;		static final public double getMedian(DataSet data, String yKey) {		NumVariable yVar = (NumVariable)data.getVariable(yKey);		NumValue[] sortedVals = yVar.getSortedData();		int nVals = yVar.noOfValues();		if (nVals % 2 == 0)			return (sortedVals[nVals / 2 - 1].toDouble() + sortedVals[nVals / 2].toDouble()) / 2;		else			return sortedVals[nVals / 2].toDouble();	}		public PivotedVariable(String theName, DataSet data, String yKey, String catKey, double pivot) {		super(theName);		baseVariable = (NumVariable)data.getVariable(yKey);		catVariable = (CatVariable)data.getVariable(catKey);		this.yKey = yKey;		this.catKey = catKey;				this.pivot = pivot;	}//--------------------------------------------------------		public boolean noteVariableChange(String key) {		return yKey.equals(key) || catKey.equals(key);	}		public int getMaxDecimals() {		return baseVariable.getMaxDecimals();	}		public int noOfValues() {		return baseVariable.noOfValues();	}		public Value valueAt(int index) {		NumValue baseVal = (NumValue)baseVariable.valueAt(index);				boolean finalBelowPivot = catVariable.getItemCategory(index) == 0;		boolean rawBelowPivot = baseVal.toDouble() < pivot;				if (rawBelowPivot == finalBelowPivot)			return baseVal;		else			return new NumValue(2 * pivot - baseVal.toDouble(), baseVal.decimals);	}}