package randomisation;import java.util.*;import dataView.*;public class RandomLeagueVariable extends NumVariable implements SampleInterface {		private Random generator = new Random();	private long currentSeed, nextSeed;		private double drawProb, winProb;	private int noOfTeams;		private int wins[];	private int draws[];	//	private boolean initialised = false;		public RandomLeagueVariable(String theName, int noOfTeams, double drawProb) {		super(theName);				this.drawProb = drawProb;		winProb = 0.5 * (1.0 - drawProb);				this.noOfTeams = noOfTeams;		wins = new int[noOfTeams];		draws = new int[noOfTeams];				nextSeed = generator.nextLong();	}		public void setResults(int wins[], int draws[]) {		this.wins = wins;		this.draws = draws;				double points[] = new double[noOfTeams];		for (int i=0 ; i<noOfTeams ; i++)			points[i] = wins[i] * 3 + draws[i];				if (getNoOfGroups() == points.length) {			for (int i=0 ; i<points.length ; i++) {				NumValue val = (NumValue)valueAt(i);				val.setValue(points[i]);			}			clearSortedValues();		}		else {			super.setValues(points);			setDecimals(0);		}	}		public void setSampleSize(int n) {		//		makes no sense for league table	}		public long generateNextSample() {		currentSeed = nextSeed;		generator.setSeed(nextSeed);				generateResults();		//		initialised = true;		nextSeed = generator.nextLong();		return currentSeed;	}		public boolean setSampleFromSeed(long newSeed) {		if (currentSeed == newSeed)			return false;		currentSeed = newSeed;		generator.setSeed(newSeed);				generateResults();				return true;	}		public void setNextSeed(long nextSeed) {		//	only used when setting up exercise with fixed seed		this.nextSeed = nextSeed;	}		private void generateResults() {		for (int i=0 ; i<noOfTeams ; i++)			wins[i] = draws[i] = 0;				for (int i=0 ; i<noOfTeams ; i++)			for (int j=i+1 ; j<noOfTeams ; j++)				for (int k=0 ; k<2 ; k++) {		//	home and away					double p = generator.nextDouble();					if (p < drawProb) {						draws[i] ++;						draws[j] ++;					}					else if (p < drawProb + winProb)						wins[i] ++;					else						wins[j] ++;				}		setResults(wins, draws);	}		public void clearSample() {		setValues(new double[0]);	}		public int[] getWins() {		return wins;	}		public int[] getDraws() {		return draws;	}}