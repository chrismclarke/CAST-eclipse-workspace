package statistic2;import dataView.*;import coreGraphics.*;public class SpreadCalculator extends StatCalculator {	static public final int RANGE = 0;	static public final int IQR = 1;	static public final int STDEV = 2;		private double sdMultiplier = 0.5;		public SpreadCalculator(int spreadStatistic) {		super(spreadStatistic);	}		public double evaluateStat(NumVariable variable, BoxInfo theBoxInfo) {		int n = variable.noOfValues();		switch (getStat()) {			case RANGE:				NumValue sortedData[] = variable.getSortedData();				return sortedData[sortedData.length - 1].toDouble() - sortedData[0].toDouble();			case IQR:				return theBoxInfo.boxVal[BoxInfo.HIGH_QUART]																- theBoxInfo.boxVal[BoxInfo.LOW_QUART];			case STDEV:				double sum = 0.0;				double sum2 = 0.0;				ValueEnumeration e = variable.values();				while (e.hasMoreValues()) {					double val = e.nextDouble();					sum += val;					sum2 += val * val;				}				return Math.sqrt((sum2 - sum * sum / n) / (n-1));			default:				return 0.0;		}	}		protected SpreadLimits findSpreadLimits(NumVariable variable, BoxInfo theBoxInfo) {		switch (getStat()) {			case RANGE:				NumValue sortedData[] = variable.getSortedData();				return new SpreadLimits(sortedData[0].toDouble(), sortedData[sortedData.length - 1].toDouble());			case IQR:				return new SpreadLimits(theBoxInfo.boxVal[BoxInfo.LOW_QUART],																	theBoxInfo.boxVal[BoxInfo.HIGH_QUART]);			case STDEV:				int n = variable.noOfValues();				double sum = 0.0;				double sum2 = 0.0;				ValueEnumeration e = variable.values();				while (e.hasMoreValues()) {					double val = e.nextDouble();					sum += val;					sum2 += val * val;				}				double mean = sum / n;				double halfSD = Math.sqrt((sum2 - sum * mean) / (n-1)) * sdMultiplier;				return new SpreadLimits(mean - halfSD, mean + halfSD);			default:				return null;		}	}		public String getName(XApplet applet) {		return getName(getStat());	}		static public String getName(int i) {		switch (i) {			case RANGE:				return "Range";			case IQR:				return "IQR";			case STDEV:				return "St devn";			default:				return "";		}	}		public void setSDMultiplier(double sdMultiplier) {		this.sdMultiplier = sdMultiplier;	}		public double getSDMultiplier() {		return sdMultiplier;	}}