package statistic2;import java.awt.*;public class StatLayout implements LayoutManager {	private Component centerLabel, spreadLabel, centerChoice, spreadChoice;	private CatLabelsView catLabels, centerStats, spreadStats;	private boolean initialised = false;	private int col1Width, col2Width, col3Width, row1Ht, row2Ht, row3Ht;		public StatLayout(Component centerLabel, Component spreadLabel, Component centerChoice,									Component spreadChoice, CatLabelsView catLabels,									CatLabelsView centerStats, CatLabelsView spreadStats) {		this.centerLabel = centerLabel;		this.spreadLabel = spreadLabel;		this.centerChoice = centerChoice;		this.spreadChoice = spreadChoice;		this.catLabels = catLabels;		this.centerStats = centerStats;		this.spreadStats = spreadStats;	}		public void addLayoutComponent(String name, Component comp) {	}		public void removeLayoutComponent(Component comp) {	}		private void findTableDimensions() {		if (initialised)			return;				Dimension centerLabelDim = centerLabel.getMinimumSize();		Dimension spreadLabelDim = spreadLabel.getMinimumSize();		Dimension centerChoiceDim = centerChoice.getMinimumSize();		Dimension spreadChoiceDim = spreadChoice.getMinimumSize();		Dimension catLabelsDim = catLabels.maximumSize();		Dimension centerStatsDim = centerStats.maximumSize();		Dimension spreadStatsDim = spreadStats.maximumSize();				col1Width = catLabelsDim.width;		col2Width = Math.max(Math.max(centerLabelDim.width,																centerChoiceDim.width), centerStatsDim.width);		col3Width = Math.max(Math.max(spreadLabelDim.width,																spreadChoiceDim.width), spreadStatsDim.width);		row1Ht = Math.max(centerLabelDim.height, spreadLabelDim.height);		row2Ht = Math.max(centerChoiceDim.height, spreadChoiceDim.height);		row3Ht = catLabelsDim.height;		initialised = true;	}		public Dimension preferredLayoutSize(Container parent) {		return minimumLayoutSize(parent);	}		public Dimension minimumLayoutSize(Container parent) {		findTableDimensions();		return new Dimension(col1Width + col2Width + col3Width, row1Ht + row2Ht + row3Ht);	}		private void centre(int left, int top, int width, int height, Component comp) {		Dimension dim = comp.getMinimumSize();		comp.setBounds(left + (width - dim.width) / 2, top + (height - dim.height) / 2, dim.width, dim.height);	}		private void centreHoriz(int left, int top, int width, int height, Component comp) {		Dimension dim = comp.getMinimumSize();		comp.setBounds(left + (width - dim.width) / 2, top, dim.width, height);	}		public void layoutContainer(Container parent) {		Insets insets = parent.getInsets();				findTableDimensions();		centre(insets.left + col1Width, insets.top, col2Width, row1Ht, centerLabel);		centre(insets.left + col1Width + col2Width, insets.top, col3Width, row1Ht,																											spreadLabel);		centre(insets.left + col1Width, insets.top + row1Ht, col2Width, row2Ht,																											centerChoice);		centre(insets.left + col1Width + col2Width, insets.top + row1Ht, col3Width, row2Ht,																											spreadChoice);		row3Ht = Math.min(row3Ht, parent.getSize().height - insets.top - insets.bottom);				centreHoriz(insets.left, insets.top + row1Ht + row2Ht, col1Width, row3Ht, catLabels);		centreHoriz(insets.left + col1Width, insets.top + row1Ht + row2Ht, col2Width, row3Ht,																											centerStats);		centreHoriz(insets.left + col1Width + col2Width, insets.top + row1Ht + row2Ht,																					col3Width, row3Ht, spreadStats);	}		public String toString() {		return getClass().getName();	}}