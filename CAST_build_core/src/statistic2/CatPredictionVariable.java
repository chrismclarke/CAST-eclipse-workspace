package statistic2;import dataView.*;import random.*;public class CatPredictionVariable extends CatFunctionVariable {	private DataSet data;	private String yKey;	private double correl;	private double cutoff[];		private double yStd[];	private double error[];		public CatPredictionVariable(String theName, DataSet data, String yKey, double correl,																																double cutoff[]) {		super(theName);		this.data = data;		this.yKey = yKey;		this.correl = correl;		this.cutoff = cutoff;		NumVariable yVar = (NumVariable)data.getVariable(yKey);		initialise(yVar);	}		private void initialise(NumVariable yVar) {		double sy = 0.0;		double syy = 0.0;		int n = 0;		ValueEnumeration ye = yVar.values();		while (ye.hasMoreValues()) {			double y = ye.nextDouble();			sy += y;			syy += y * y;			n ++;		}		double yMean = sy / n;		double ySd = Math.sqrt((syy - sy * yMean) / (n - 1));				yStd = new double[n];		ye = yVar.values();		for (int i=0 ; i<n ; i++)			yStd[i] = (ye.nextDouble() - yMean) / ySd;				RandomNormal generator = new RandomNormal(n, 0.0, 1.0, 2.5);		error = generator.generate();	}		public void setCorrel(double correl) {		this.correl = correl;	}//--------------------------------------------------------		public int noOfValues() {		return yStd.length;	}		public Value valueAt(int index) {		double prediction = correl * yStd[index] + (1 - correl) * error[index];				for (int i=0 ; i<cutoff.length ; i++)			if (prediction < cutoff[i])				return getLabel(i);		return getLabel(cutoff.length);	}		public boolean noteVariableChange(String key) {		if (yKey.equals(key)) {			NumVariable yVar = (NumVariable)data.getVariable(yKey);			initialise(yVar);			return true;		}		else			return false;	}}