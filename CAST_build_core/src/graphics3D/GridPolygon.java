package graphics3D;import java.awt.*;public class GridPolygon {		private int[] xCoord = new int[4];	private int[] yCoord = new int[4];	private int nPoints;		public GridPolygon() {	}	public void addPoint(int x, int y) {		if (nPoints == xCoord.length) {			int tmp[] = new int[nPoints * 2];			System.arraycopy(xCoord, 0, tmp, 0, nPoints);			xCoord = tmp;			tmp = new int[nPoints * 2];			System.arraycopy(yCoord, 0, tmp, 0, nPoints);			yCoord = tmp;		}		xCoord[nPoints] = x;		yCoord[nPoints] = y;		nPoints++;	}		public void clear() {		nPoints = 0;	}			private void removeDuplicates(boolean maxNotMin) {		int dest = 1;		for (int i=1 ; i<nPoints ; i++)			if (xCoord[i] == xCoord[dest - 1]) {				boolean abovePrevious = yCoord[i] > yCoord[dest - 1];				if (abovePrevious == maxNotMin)					yCoord[dest - 1] = yCoord[i];			}			else {				xCoord[dest] = xCoord[i];				yCoord[dest ++] = yCoord[i];			}		nPoints = dest;	}		public void combineMinMax(GridPolygon p, boolean maxNotMin) {																			//	assumes both polys start and end at same pt.		removeDuplicates(maxNotMin);		p.removeDuplicates(maxNotMin);				int xDest[] = xCoord;		int yDest[] = yCoord;		int maxPoints = nPoints + p.nPoints - 2;		//	since 2 points are duplicated		if (xCoord.length < maxPoints) {			xDest = new int[maxPoints];			yDest = new int[maxPoints];		}		System.arraycopy(xCoord, 0, xDest, p.nPoints - 2, nPoints);		System.arraycopy(yCoord, 0, yDest, p.nPoints - 2, nPoints);		xCoord = xDest;		yCoord = yDest;				int index = p.nPoints - 2;		int lastX = xCoord[index];		int lastY = yCoord[index ++];			//	last coords processed for this poly		xCoord[0] = lastX;		yCoord[0] = lastY;		int dest = 1;				int lastPX = lastX;		int lastPY = lastY;									//	last coords processed for other poly				for (int pIndex=1 ; pIndex<p.nPoints ; pIndex++) {			while (xCoord[index] < p.xCoord[pIndex]) {				lastX = xCoord[index];				lastY = yCoord[index ++];				boolean abovePLine = (lastY - lastPY) * (p.xCoord[pIndex] - lastPX)																> (lastX - lastPX) * (p.yCoord[pIndex] - lastPY);				if (abovePLine == maxNotMin) {					xCoord[dest] = lastX;					yCoord[dest ++] = lastY;				}			}						if (xCoord[index] == p.xCoord[pIndex]) {				lastX = lastPX = xCoord[index];				lastY = yCoord[index ++];				lastPY = p.yCoord[pIndex];				xCoord[dest] = lastX;				boolean aboveP = lastY > lastPY;				yCoord[dest ++] = (aboveP == maxNotMin) ? lastY : lastPY;			}			else {				lastPX = p.xCoord[pIndex];				lastPY = p.yCoord[pIndex];				boolean aboveLine = (lastPY - lastY) * (xCoord[index] - lastX)																	> (lastPX - lastX) * (yCoord[index] - lastY);				if (aboveLine == maxNotMin) {					xCoord[dest] = lastPX;					yCoord[dest ++] = lastPY;				}			}		}				nPoints = dest;	}		public void complete(GridPolygon p) {		int sumPoints = nPoints + p.nPoints - 1;		if (xCoord.length < sumPoints) {			int xDest[] = new int[sumPoints];			int yDest[] = new int[sumPoints];			System.arraycopy(xCoord, 0, xDest, 0, nPoints);			System.arraycopy(yCoord, 0, yDest, 0, nPoints);			xCoord = xDest;			yCoord = yDest;		}				for (int i=p.nPoints-2 ; i>=0 ; i--) {	//	last point should be same in both polys			xCoord[nPoints] = p.xCoord[i];			yCoord[nPoints ++] = p.yCoord[i];		}	}		public Polygon getPolygon() {		return new Polygon(xCoord, yCoord, nPoints);	}		public String toString() {		StringBuffer sb = new StringBuffer();		for (int i=0 ; i<nPoints ; i++) {			sb.append('(');			sb.append(xCoord[i]);			sb.append(',');			sb.append(yCoord[i]);			sb.append(") ");		}		return sb.toString();	}}	