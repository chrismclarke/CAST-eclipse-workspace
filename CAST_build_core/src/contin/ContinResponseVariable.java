package contin;import java.util.*;import dataView.*;public class ContinResponseVariable extends CatDistnVariable {	static final public boolean JOINT = true;	static final public boolean CONDITIONAL = false;		private CatVariableInterface explan;		private double conditProb[][];		public ContinResponseVariable(String theName, DataSet data, String catKey) {		super(theName);		explan = (CatVariableInterface)data.getVariable(catKey);	}		private void createProbArray() {		int nXCats = explan.noOfCategories();		int nYCats = noOfCategories();		conditProb = new double[nXCats][];		for (int i=0 ; i<nXCats ; i++)			conditProb[i] = new double[nYCats];	}		public void setProbs(String s, boolean jointNotContitional) {		createProbArray();				int nXCats = explan.noOfCategories();		int nYCats = noOfCategories();				StringTokenizer st = new StringTokenizer(s);		double xMargin[] = jointNotContitional ? new double[nXCats] : null;		double pTotal = 0.0;				for (int i=0 ; i<nXCats ; i++) {			double marginI = 0.0;			for (int j=0 ; j<nYCats ; j++) {				double pij = Double.parseDouble(st.nextToken());				marginI += pij;				conditProb[i][j] = pij;			}			if (marginI > 0.0)				for (int j=0 ; j<nYCats ; j++)					conditProb[i][j] /= marginI;			else				conditProb[i][0] = 1.0;						if (jointNotContitional) {				xMargin[i] = marginI;				pTotal += marginI;			}		}				if (jointNotContitional) {			for (int i=0 ; i<nXCats ; i++)				xMargin[i] /= pTotal;						((CatDistnVariable)explan).setProbs(xMargin);		}	}		public void setConditProbs(double[] condit) {		createProbArray();				int nXCats = explan.noOfCategories();		int nYCats = noOfCategories();				for (int i=0 ; i<nXCats ; i++)			for (int j=0 ; j<nYCats ; j++)				conditProb[i][j] = condit[i*nXCats + j];	}		public void setIndependenceProbs(String s) {		int nXCats = explan.noOfCategories();		int nYCats = noOfCategories();				StringTokenizer st = new StringTokenizer(s);		double yMargin[] = new double[nXCats];		double pTotal = 0.0;				for (int j=0 ; j<nYCats ; j++) {			double pj = Double.parseDouble(st.nextToken());			pTotal += pj;			yMargin[j] = pj;		}		if (pTotal > 0.0)			for (int j=0 ; j<nYCats ; j++)				yMargin[j] /= pTotal;		else			yMargin[0] = 1.0;				conditProb = new double[nXCats][];		for (int i=0 ; i<nXCats ; i++)			conditProb[i] = yMargin;	}		public double[][] getConditionalProbs() {		return conditProb;	}		public void setConditProbs(double conditProb[][]) {		this.conditProb = conditProb;	}		public double[] getYMarginProbs() {		int nXCats = explan.noOfCategories();		int nYCats = noOfCategories();		double[] xMargin = ((CatDistnVariable)explan).getProbs();				double[] yMargin = new double[nYCats];		for (int i=0 ; i<nXCats ; i++)			for (int j=0 ; j<nYCats ; j++)				yMargin[j] += conditProb[i][j] * xMargin[i];				return yMargin;	}}