package exerciseSD;import java.awt.*;import exercise2.*;import exerciseSDProg.*;public class DiffMeanSDChoicePanel extends MultichoicePanel{	static final private int kOptions = 3;		private boolean meanNotSD;	private String optionString[];	private String groupAString, groupBString;	//================================================		private class DirectionOptionInfo extends OptionInformation {		private int direction;				DirectionOptionInfo(int direction, int correctDirection) {			super(direction == correctDirection);			this.direction = direction;		}				public boolean equals(OptionInformation a) {			DirectionOptionInfo oa = (DirectionOptionInfo)a;			return (direction == oa.direction);		}				public boolean lessThan(OptionInformation a) {			return true;		}				public String getOptionString() {			return optionString[direction];		}				public String getMessageString() {			if (meanNotSD)				switch (direction) {					case CenterSpreadApplet.EQUAL_AB:						return "Both distributions are centred round similar values.";					case CenterSpreadApplet.A_SMALLER:						return "The values for " + groupAString + " tend to be lower than those for " + groupBString + ".";					case CenterSpreadApplet.B_SMALLER:						return "The values for " + groupAString + " tend to be higher than those for " + groupBString + ".";				}			else				switch (direction) {					case CenterSpreadApplet.EQUAL_AB:						return "Both groups have similar spreads of values.";					case CenterSpreadApplet.A_SMALLER:						return "The values in " + groupAString + " are less variable than those in " + groupBString + ".";					case CenterSpreadApplet.B_SMALLER:						return "The values in " + groupAString + " are more variable than those in " + groupBString + ".";				}			return null;		}	}	//================================================		public DiffMeanSDChoicePanel(ExerciseApplet exerciseApplet, boolean meanNotSD,												int correctDirection, String[] optionString,												String groupAString, String groupBString) {		super(exerciseApplet, kOptions);		optionInfo = new DirectionOptionInfo[kOptions];		this.meanNotSD = meanNotSD;		this.optionString = optionString;		this.groupAString = groupAString;		this.groupBString = groupBString;		setupChoices(correctDirection);		setupPanel();	}		public void setupChoices(int correctDirection) {		for (int i=0 ; i<3 ; i++)			optionInfo[i] = new DirectionOptionInfo(i, correctDirection);				randomiseOptions();		findCorrectOption();	}		protected Component createOptionPanel(int optionIndex, ExerciseApplet exerciseApplet) {		return new OptionLongTextPanel(optionInfo, optionIndex, exerciseApplet);	}		public void changeOptions(int correctDirection, String[] optionString,												String groupAString, String groupBString) {		this.optionString = optionString;		this.groupAString = groupAString;		this.groupBString = groupBString;				setupChoices(correctDirection);		for (int i=0 ; i<option.length ; i++)			((OptionLongTextPanel)option[i]).changeContent();	}	//	public String getBiggestMessage(String nullHypoth) {//		return "If " + nullHypoth + ", the probability of getting a p-value as low as 9.9999 is 9.9999. A p-value between 0.05 and 0.1 is fairly low, but not particularly unusual."; //	}}