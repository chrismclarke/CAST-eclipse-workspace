package bivarDistn;import java.util.*;import dataView.*;import models.*;public class BiNormalDistnVariable extends CoreVariable implements SurfaceInterface {		private String xName, yName;		public NumValue xMean = new NumValue(0,0);	public NumValue yMean = new NumValue(0,0);	public NumValue xSd= new NumValue(1,0);	public NumValue ySd = new NumValue(1,0);	public NumValue xyCorr = new NumValue(0,0);		public BiNormalDistnVariable(String xName, String yName) {		super("");		this.xName = xName;		this.yName = yName;	}		public String getXName() {		return xName;	}		public String getYName() {		return yName;	}		public void setParams(String s) {		try {			StringTokenizer params = new StringTokenizer(s);			xMean = new NumValue(params.nextToken());			xSd = new NumValue(params.nextToken());			yMean = new NumValue(params.nextToken());			ySd = new NumValue(params.nextToken());			xyCorr = new NumValue(params.nextToken());					if (xSd.toDouble() <= 0.0 || ySd.toDouble() <= 0.0														|| xyCorr.toDouble() < -1.0 || xyCorr.toDouble() > 1.0)				throw new Exception();		} catch (Exception e) {			System.err.println("Bad parameters for bivariate normal distn: " + s);		}	}		public void setCorr(NumValue corr) {		xyCorr = corr;	}		public void setXMean(NumValue xMean) {		this.xMean = xMean;	}		public void setXSd(NumValue xSd) {		this.xSd = xSd;	}		public void setYMean(NumValue yMean) {		this.yMean = yMean;	}		public void setYSd(NumValue ySd) {		this.ySd = ySd;	}		double getDensity(double y, double x) {		double sx = xSd.toDouble();		double z_x = (x - xMean.toDouble()) / sx;		double sy = ySd.toDouble();		double z_y = (y - yMean.toDouble()) / sy;		double r = xyCorr.toDouble();		double rTerm = 1 - r * r;				return 0.5 / (Math.PI * sx * sy * Math.sqrt(rTerm))												* Math.exp(-0.5 / rTerm * (z_x * z_x + z_y * z_y - 2 * r * z_x * z_y));	}			public double getHeight(double[] x) {		return getDensity(x[0], x[1]);	}}