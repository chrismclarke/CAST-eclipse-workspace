package exerciseNormal.JtableLookup;import java.awt.*;import dataView.*;import exercise2.*;public class TableVertHeading extends BufferedCanvas {	static final private int kLeftRightGap = 5;	static final private int kRows = 72;		static final private String wholeNumber[] = {"-3.", "-2.", "-1.", "-0.", "0.", "1.", "2.", "3."};	static final private String decimal[] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};	static final private String kBiggestLabel = "-3.5";//	static final private String headingVal[] = generateHeadings();		private TableView theTable;	private ExerciseApplet exerciseApplet;	//	static private String[] generateHeadings() {//		String[] s = new String[kRows];//		int wholeIndex = 0;//		int decimalIndex = 5;//		for (int i=0 ; i<kRows/2 ; i++) {//			s[i] = wholeNumber[wholeIndex] + decimal[decimalIndex];//			decimalIndex --;//			if (decimalIndex < 0) {//				wholeIndex ++;//				decimalIndex = 9;//			}//		}//		decimalIndex = 0;//		for (int i=kRows/2 ; i<kRows ; i++) {//			s[i] = wholeNumber[wholeIndex] + decimal[decimalIndex];//			decimalIndex ++;//			if (decimalIndex > 9) {//				wholeIndex ++;//				decimalIndex = 0;//			}//		}//		return s;cc//	}		public TableVertHeading(TableView theTable, ExerciseApplet exerciseApplet) {		super(exerciseApplet);		this.exerciseApplet = exerciseApplet;		this.theTable = theTable;	}		public void corePaint(Graphics g) {		theTable.initialise(g);//		int labelWidth = getGraphics().getFontMetrics().stringWidth(kBiggestLabel);				Point visRange = theTable.getVisibleRows();		int minRowVisible = visRange.x;		int maxRowVisible = visRange.y;				int wholeIndex = 0;		int decimalIndex = 5;		g.setColor(Color.blue);		for (int i=0 ; i<kRows/2 ; i++) {			if (i >= minRowVisible && i <= maxRowVisible)				g.drawString(wholeNumber[wholeIndex] + decimal[decimalIndex], kLeftRightGap,											theTable.topOrigin + TableView.kTopBottomGap											+ theTable.ascent + i * (theTable.ascent + TableView.kVertGap));			decimalIndex --;			if (decimalIndex < 0) {				wholeIndex ++;				decimalIndex = 9;			}		}				g.setColor(Color.black);		decimalIndex = 0;		for (int i=kRows/2 ; i<kRows ; i++) {			if (i >= minRowVisible && i <= maxRowVisible)				g.drawString(wholeNumber[wholeIndex] + decimal[decimalIndex], kLeftRightGap,											theTable.topOrigin + TableView.kTopBottomGap											+ theTable.ascent + i * (theTable.ascent + TableView.kVertGap));			decimalIndex ++;			if (decimalIndex > 9) {				wholeIndex ++;				decimalIndex = 0;			}		}				Point minSel = theTable.minSelectedRowCol();		Point maxSel = theTable.maxSelectedRowCol();		if (minSel != null) {			g.setColor(TableView.kMinColor);			int left = kLeftRightGap;			int top = theTable.topOrigin + TableView.kTopBottomGap														+ minSel.y * (theTable.ascent + TableView.kVertGap);			g.drawRect(left - 3, top - 3, getSize().width - 2 * kLeftRightGap + 5,																					theTable.ascent + 5);			if (maxSel != null && maxSel.y == minSel.y && maxSel.x != minSel.x)				g.setColor(TableView.kMaxColor);			g.drawRect(left - 2, top - 2, getSize().width - 2 * kLeftRightGap + 3,																					theTable.ascent + 3);		}				if (maxSel != null && (minSel == null || minSel.y != maxSel.y)) {			g.setColor(TableView.kMaxColor);			int left = kLeftRightGap;			int top = theTable.topOrigin + TableView.kTopBottomGap														+ maxSel.y * (theTable.ascent + TableView.kVertGap);			g.drawRect(left - 3, top - 3, getSize().width - 2 * kLeftRightGap + 5,																					theTable.ascent + 5);			g.drawRect(left - 2, top - 2, getSize().width - 2 * kLeftRightGap + 3,																					theTable.ascent + 3);				}				g.setColor(Color.gray);		g.drawRect(0, 0, getSize().width - 1, getSize().height - 1);	}		public Dimension getMinimumSize() {		theTable.initialise(theTable.getGraphics());		int labelWidth = getGraphics().getFontMetrics().stringWidth(kBiggestLabel);				return new Dimension(labelWidth + 2 * kLeftRightGap, theTable.idealHeight);	}		public Dimension getPreferredSize() {		return getMinimumSize();	}//-----------------------------------------------------------------------------------		protected boolean needsHitToDrag() {		return true;	}		protected boolean canDrag() {		return true;	}		protected PositionInfo getPosition(int x, int y) {		if (x < 0 || y < 0 || x >= getSize().width || y >= getSize().height)			return null;				Point currentRowCol = theTable.maxSelectedRowCol();		int col = currentRowCol.x;				int row = (y - TableView.kTopBottomGap - theTable.topOrigin) / (theTable.ascent + TableView.kVertGap);		if (row >= kRows)			row = kRows - 1;				double value = theTable.valueFromRowCol(row, col);		return new ValuePosInfo(value);	}		protected boolean startDrag(PositionInfo startInfo) {		doDrag(null, startInfo);		return true;	}		protected void doDrag(PositionInfo fromPos, PositionInfo toPos) {		if (toPos != null) {			theTable.selectValue((ValuePosInfo)toPos);			exerciseApplet.noteChangedWorking();		}	}		protected void endDrag(PositionInfo startPos, PositionInfo endPos) {		doDrag(null, endPos);	}}	