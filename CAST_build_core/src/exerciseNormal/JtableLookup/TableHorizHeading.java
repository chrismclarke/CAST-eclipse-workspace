package exerciseNormal.JtableLookup;import java.awt.*;import dataView.*;import exercise2.*;public class TableHorizHeading extends BufferedCanvas {	static final private int kTopBottomGap = 5;	static final private String headingVal[] = {".00", ".01", ".02", ".03", ".04", ".05", ".06", ".07", ".08", ".09"};		private TableView theTable;	private ExerciseApplet exerciseApplet;		public TableHorizHeading(TableView theTable, ExerciseApplet exerciseApplet) {		super(exerciseApplet);		this.exerciseApplet = exerciseApplet;		this.theTable = theTable;	}		public void corePaint(Graphics g) {		theTable.initialise(g);		int ascent = g.getFontMetrics().getAscent();				Point visHorizRange = theTable.getVisibleCols();		int minColVisible = visHorizRange.x;		int maxColVisible = visHorizRange.y;				int baseline = kTopBottomGap + ascent;		for (int i=minColVisible ; i<=maxColVisible ; i++)			g.drawString(headingVal[i], theTable.leftOrigin + TableView.kLeftRightGap												+ i * (theTable.valWidth + TableView.kHorizGap), baseline);				Point minSel = theTable.minSelectedRowCol();		Point maxSel = theTable.maxSelectedRowCol();				if (minSel != null) {			g.setColor(TableView.kMinColor);			int left = theTable.leftOrigin + TableView.kLeftRightGap + minSel.x * (theTable.valWidth																							+ TableView.kHorizGap);			int top = kTopBottomGap;			g.drawRect(left - 3, top - 3, theTable.valWidth + 5, ascent + 5);			if (maxSel != null && maxSel.x == minSel.x && maxSel.y != minSel.y)				g.setColor(TableView.kMaxColor);			g.drawRect(left - 2, top - 2, theTable.valWidth + 3, ascent + 3);		}				if (maxSel != null && (minSel == null || minSel.x != maxSel.x)) {			g.setColor(TableView.kMaxColor);			int left = theTable.leftOrigin + TableView.kLeftRightGap + maxSel.x * (theTable.valWidth																							+ TableView.kHorizGap);			int top = kTopBottomGap;			g.drawRect(left - 3, top - 3, theTable.valWidth + 5, ascent + 5);			g.drawRect(left - 2, top - 2, theTable.valWidth + 3, ascent + 3);		}				g.setColor(Color.gray);		g.drawRect(0, 0, getSize().width - 1, getSize().height - 1);	}		public Dimension getMinimumSize() {		theTable.initialise(theTable.getGraphics());		int ascent = getGraphics().getFontMetrics().getAscent();				return new Dimension(theTable.idealWidth, ascent + 2 * kTopBottomGap);	}		public Dimension getPreferredSize() {		return getMinimumSize();	}//-----------------------------------------------------------------------------------		protected boolean needsHitToDrag() {		return true;	}		protected boolean canDrag() {		return true;	}		protected PositionInfo getPosition(int x, int y) {		if (x < 0 || y < 0 || x >= getSize().width || y >= getSize().height)			return null;				Point currentRowCol = theTable.maxSelectedRowCol();		int row = currentRowCol.y;				int col = (x - TableView.kLeftRightGap - theTable.leftOrigin) / (theTable.valWidth + TableView.kHorizGap);		if (col >= TableView.kCols)			col = TableView.kCols - 1;				double value = theTable.valueFromRowCol(row, col);		return new ValuePosInfo(value);	}		protected boolean startDrag(PositionInfo startInfo) {		doDrag(null, startInfo);		return true;	}		protected void doDrag(PositionInfo fromPos, PositionInfo toPos) {		if (toPos != null) {			theTable.selectValue((ValuePosInfo)toPos);			exerciseApplet.noteChangedWorking();		}	}		protected void endDrag(PositionInfo startPos, PositionInfo endPos) {		doDrag(null, endPos);	}	}	