package ssq;import dataView.*;public class GroupMeansDataSet extends DataSet {	static final public int UNSORTED = 0;	static final public int SORT_LOW_FIRST = 1;	static final public int SORT_HIGH_FIRST = 2;		private double localMinSelection, localMaxSelection;		public GroupMeansDataSet(DataSet sourceData, String yKey, String groupKey,																		String shortGroupKey, int decimals, int sortType) {		NumVariable yVar = (NumVariable)sourceData.getVariable(yKey);		CatVariable groupVar = (CatVariable)sourceData.getVariable(groupKey);		CatVariable shortGroupVar = (shortGroupKey == null) ? null																	: (CatVariable)sourceData.getVariable(shortGroupKey);		int nGroups = groupVar.noOfCategories();				double mean[] = new double[nGroups];		int n[] = new int[nGroups];				ValueEnumeration ye = yVar.values();		ValueEnumeration ge = groupVar.values();		while (ye.hasMoreValues() && ge.hasMoreValues()) {			int group = groupVar.labelIndex(ge.nextValue());			mean[group] += ye.nextDouble();			n[group] ++;		}				for (int i=0 ; i<nGroups ; i++)			mean[i] /= n[i];				int mapping[] = new int[nGroups];		for (int i=0 ; i<nGroups ; i++)			mapping[i] = i;				if (sortType != UNSORTED) {			for (int i=0 ; i<nGroups-1 ; i++)				for (int j=i+1 ; j<nGroups ; j++)					if ((mean[mapping[j]] > mean[mapping[i]]) == (sortType == SORT_HIGH_FIRST)) {						int temp = mapping[i];						mapping[i] = mapping[j];						mapping[j] = temp;					}		}				NumVariable meanVar = new NumVariable("Mean");		for (int i=0 ; i<nGroups ; i++)			meanVar.addValue(new NumValue(mean[mapping[i]], decimals));		addVariable("mean", meanVar);				LabelVariable groupNameVar = new LabelVariable(groupVar.name);		for (int i=0 ; i<nGroups ; i++)			groupNameVar.addValue(groupVar.getLabel(mapping[i]));		addVariable("groupName", groupNameVar);				if (shortGroupVar != null) {			LabelVariable shortGroupNameVar = new LabelVariable(shortGroupVar.name);			for (int i=0 ; i<nGroups ; i++)				shortGroupNameVar.addValue(shortGroupVar.getLabel(mapping[i]));			addVariable("shortGroupName", shortGroupNameVar);		}	}		public synchronized boolean setSelection(String key, double min, double max) {		localMinSelection = min;		localMaxSelection = max;		return super.setSelection(key, min, max);	}		public double getMinSelection() {		return localMinSelection;	}		public double getMaxSelection() {		return localMaxSelection;	}}