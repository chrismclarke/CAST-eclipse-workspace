package dragStemLeaf;import java.awt.*;import java.lang.Math;import dataView.NumValue;import dataView.ParsedValue;public class StemLeafValue extends NumValue {	private static final int kSeparatorWidth = 4;		public StemLeafValue(double theValue) {		super(theValue);	}		public StemLeafValue(double theValue, int theDecimals) {		super(theValue, theDecimals);	}		public StemLeafValue(String valString) throws NullPointerException, NumberFormatException {		super(valString);	}		public static Point leafSeparators(Graphics g, int drawDecs, int stemPower) {		StringBuffer sb = new StringBuffer(20);				for (int i=0 ; i<drawDecs + stemPower - 1 ; i++)			sb.append('0');		if (drawDecs > 0 && stemPower > 0)			sb.append('.');				FontMetrics fm = g.getFontMetrics();		int line2Offset = fm.stringWidth(sb.toString()) + kSeparatorWidth - 1;		int line1Offset = line2Offset + fm.stringWidth("0") + kSeparatorWidth;		return new Point(line1Offset, line2Offset);	}		public void drawLeft(Graphics g, int drawDecs, int stemPower, int x, int y, boolean selected) {		stemPower = Math.max(stemPower, 1 - drawDecs);		//	at least one leaf digit				ParsedValue theParsedValue = parseValue(drawDecs);		boolean negative = theParsedValue.leftDigits.charAt(0) == '-';		if (negative)			theParsedValue.leftDigits = theParsedValue.leftDigits.substring(1);		if (theParsedValue.leftDigits.length() < stemPower + 1) {			int extraZeros = stemPower + 1 - theParsedValue.leftDigits.length();			StringBuffer posDigits = new StringBuffer(stemPower + 1);			for (int i=0 ; i<extraZeros ; i++)				posDigits.append('0');			posDigits.append(theParsedValue.leftDigits);			theParsedValue.leftDigits = posDigits.toString();		}				String stemPart;		String leafDigit;		String remainder;				if (stemPower > 0)			stemPart = theParsedValue.leftDigits.substring(0,															theParsedValue.leftDigits.length() - stemPower);		else			stemPart = theParsedValue.leftDigits + theParsedValue.rightDigits.substring(0,																		1 - stemPower);	//	one for point		if (negative)			stemPart = "-" + stemPart;				if (stemPower > 1) {			int leafIndex = theParsedValue.leftDigits.length() - stemPower;			leafDigit = theParsedValue.leftDigits.substring(leafIndex, leafIndex + 1);			remainder = theParsedValue.leftDigits.substring(leafIndex + 1)																				+ theParsedValue.rightDigits;		}		else if (stemPower == 1) {			leafDigit = theParsedValue.leftDigits.substring(theParsedValue.leftDigits.length() - 1);			remainder = theParsedValue.rightDigits;		}		else {			leafDigit = theParsedValue.rightDigits.substring(1 - stemPower, 2 - stemPower);			remainder = theParsedValue.rightDigits.substring(2 - stemPower);		}				FontMetrics fm = g.getFontMetrics();		int startPos = x;		if (remainder.length() > 0) {			startPos -= fm.stringWidth(remainder);			g.drawString(remainder, startPos, y);		}				startPos -= (kSeparatorWidth + fm.stringWidth(leafDigit));		if (!selected)							//	not while dragging leaf			g.drawString(leafDigit, startPos, y);				startPos -= kSeparatorWidth;		int stemWidth = fm.stringWidth(stemPart);		if (selected) {						//	only while dragging leaf			Color oldColor = g.getColor();			g.setColor(Color.red);			g.fillRect(startPos - stemWidth - 1, y - fm.getAscent() - fm.getLeading(),															stemWidth + 2, fm.getHeight() + fm.getLeading());			g.setColor(oldColor);		}		startPos -= stemWidth;		g.drawString(stemPart, startPos, y);	}		public int stringWidth(Graphics g, int drawDecs) {		return super.stringWidth(g, drawDecs) + 2 * kSeparatorWidth;	}		boolean hasZeroUnits() {		ParsedValue theParsedValue = parseValue(decimals);		return theParsedValue.leftDigits.charAt(theParsedValue.leftDigits.length() - 1) == '0';	}}