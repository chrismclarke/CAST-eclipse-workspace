package random;public class RandomHypergeometric extends RandomBinomial {	private int N, w;		public RandomHypergeometric(int count, int N, int w, int n) {		super(count, n, w / (double)N);		this.w = w;		this.N = N;	}		public void setN(int n) {		super.setN(n);	}		private int generateOne(int w, int n) {		if (n > N - n)			return w - generateOne(w, N - n);		else if (w > N - w)			return n - generateOne(N - w, n);		else if (w == 0)			return 0;		else if (n < 0.1 * N)			return super.generateOne();		else if (n * p > 40)			return (int)Math.round(n * p + Math.sqrt((N - n) * p / (N - 1) * (1.0 - p) * n) * nextGaussian());		else {			double randomVal = nextGaussian();			double term = 1.0;			long numInt = 1;			long denomInt = 1;			for (int i=N - n + 1 ; i<=N ; i++) {				if (denomInt > 2147483647 / i) {					term *= numInt / (double)denomInt;					numInt = 1;					denomInt = 1;				}				numInt *= (i - w);				denomInt *= i;			}			term *= numInt / (double)denomInt;			double cumProb = term;			int maxVal = Math.min(Math.min(n, w), 100);			for (int i=0 ; i<maxVal ; i++)				if (randomVal <= cumProb)					return i;				else {					term *= (w - i) * ((double)(n - i)) / (i + 1) / ((double)(N - w - n + i + 1));					cumProb += term;				}			return maxVal;		}	}		public int generateOne() {		return generateOne(w, n);	}}