package random;public class RandomSkewNormal extends RandomNormal {	private double minVal = 0.0;	private double maxVal = 1.0;	private double power = 1.0;		public RandomSkewNormal(String randomInfo) {		super(randomInfo);	}		public RandomSkewNormal(int count, double mean, double sd, double truncation) {		super(count, mean, sd, truncation);	}	//	public double generateOne() {//		double value = super.generateOne();//		if (power != 1.0) {//			double multConst = Math.pow(maxVal - minVal, 1 - power);//			value = minVal + Math.pow(value - minVal, power) * multConst;//		}//		return value;//	}		protected double getQuantile(double p) {		double val = super.getQuantile(p);		if (power != 1.0) {			double multConst = Math.pow(maxVal - minVal, 1 - power);			val = minVal + Math.pow(val - minVal, power) * multConst;		}		return val;	}	//	public double[] generate() {				//		redone for efficiency -- only find multConst once//		double vals[] = super.generate();//		if (power != 1.0) {//			double multConst = Math.pow(maxVal - minVal, 1 - power);//			for (int i=0 ; i<vals.length ; i++)//				vals[i] = minVal + Math.pow(vals[i] - minVal, power) * multConst;//		}//		return vals;//	}		public void setPower(double minVal, double maxVal, double fraction) {		this.minVal = minVal;		this.maxVal = maxVal;		power = Math.log(fraction) / Math.log(0.5) + 1;	}}