package random;import java.util.*;public class RandomCat extends RandomDiscrete {	private double cumProb[];		static final private int parseCount(String randomInfo) {		StringTokenizer st = new StringTokenizer(randomInfo);		String countString = st.nextToken();		return Integer.parseInt(countString);	}		static final private double[] parseProbs(String randomInfo) {		StringTokenizer st = new StringTokenizer(randomInfo);		@SuppressWarnings("unused")		String countString = st.nextToken();		int nCats = Integer.parseInt(st.nextToken());		double prob[] = new double[nCats];		double sumProb = 0.0;		for (int i=0 ; i<nCats ; i++) {			prob[i] = Double.parseDouble(st.nextToken());			sumProb += prob[i];		}		for (int i=0 ; i<nCats ; i++)			prob[i] /= sumProb;					return prob;	}		public RandomCat(String randomInfo) {		this(parseProbs(randomInfo), parseCount(randomInfo));	}		public RandomCat(double[] prob, int count) {		super(count);		cumProb = new double[prob.length];		cumProb[0] = prob[0];		for (int i=1 ; i<prob.length ; i++)			cumProb[i] = cumProb[i - 1] + prob[i];	}		public RandomCat(double[] prob, int count, long randomSeed) {		this(prob, count);		setSeed(randomSeed);	}		public int generateOne() {		double rand = nextDouble();				for (int i=0 ; i<cumProb.length ; i++)			if (rand <= cumProb[i])				return i;				return cumProb.length - 1;	}}