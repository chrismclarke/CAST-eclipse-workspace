package random;import java.util.*;public class RandomExponential extends RandomContinuous {	private double scale;	private double truncation = 10;		public RandomExponential(String randomInfo) {		StringTokenizer st = new StringTokenizer(randomInfo);		String countString = st.nextToken();		count = Integer.parseInt(countString);				String scaleString = st.nextToken();		scale = Double.parseDouble(scaleString);				if (st.hasMoreTokens()) {			String seedString = st.nextToken();			setSeed((Long.valueOf(seedString)).longValue());		}				if (st.hasMoreTokens()) {			String truncString = st.nextToken();			truncation = Double.parseDouble(truncString);		}		setTruncation();	}		public RandomExponential(int count, double scale) {		super(count);		this.scale = scale;		setTruncation();	}		private void setTruncation() {		double highP = 1.0 - Math.exp(-truncation);		setPTruncation(0, highP);	}		protected double getQuantile(double p) {		return -Math.log(p) * scale;	}	//	public double generateOne() {//		double nextVal = -Math.log(nextDouble());//		while (nextVal > truncation)//			nextVal = -Math.log(nextDouble());//		return nextVal * scale;//	}}