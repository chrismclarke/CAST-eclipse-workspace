package random;import java.util.*;public class RandomMultinomial extends RandomBinomial {	static int extractCount(String randomInfo) {		StringTokenizer st = new StringTokenizer(randomInfo);		return Integer.parseInt(st.nextToken());	}		static double[] extractProbs(String randomInfo) {		StringTokenizer st = new StringTokenizer(randomInfo);		int nProbs = st.countTokens() - 1;		double p[] = new double[nProbs];		st.nextToken();		//		pass over n		for (int i=0 ; i<nProbs ; i++)			p[i] = Double.parseDouble(st.nextToken());		return p;	}		private int n;	private double p[];		private RandomBinomial laterGenerator;		public RandomMultinomial(String randomInfo) {		this(extractCount(randomInfo), extractProbs(randomInfo));	}		public RandomMultinomial(int n, double[] p) {		super(1, n, p[0]);		this.n = n;		this.p = p;				if (p.length > 2)			laterGenerator = new RandomBinomial(1, n, p[0]);	}		public synchronized void setSeed(long seed) {		super.setSeed(seed);		if (laterGenerator != null)			laterGenerator.setSeed(Long.MAX_VALUE - seed);	}		public synchronized void setProbs(double[] p) {		super.setParameters(n, p[0]);		if (laterGenerator == null && p.length > 2)			laterGenerator = new RandomBinomial(1, n, p[0]);		this.p = p;	}		public int[] generate() {		int count[] = new int[p.length];		count[0] = generateOne();		int nLeft = n - count[0];		double pLeft = 1.0 - p[0];		for (int i=1 ; i<p.length-1 ; i++) {			if (pLeft <= 0.0)				break;			laterGenerator.setParameters(nLeft, p[i] / pLeft);			count[i] = laterGenerator.generateOne();			nLeft -= count[i];			pLeft -= p[i];		}		count[p.length - 1] = nLeft;		return count;	}			public void setSampleSize(int n) {		setN(n);		this.n = n;	}}