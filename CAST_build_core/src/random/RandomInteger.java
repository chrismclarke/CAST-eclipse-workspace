package random;public class RandomInteger extends RandomDiscrete {	private int min, max;		public RandomInteger(int min, int max, int count) {		super(count);		this.min = min;		this.max = max;	}		public RandomInteger(int min, int max, int count, long randomSeed) {		super(count);		setSeed(randomSeed);		this.min = min;		this.max = max;	}		public void setMinMax(int min, int max) {		this.min = min;		this.max = max;	}		public int getMax() {		return max;	}		public int generateOne() {		int diff = max - min;				int temp = diff;		int mask = 0;		int power = 1;		while (temp > 0) {			mask = mask + power;			power <<= 1;			temp >>= 1;		}				int nextRand = nextInt() & mask;		while (nextRand > diff)			nextRand = nextInt() & mask;		return min + nextRand;	}		public int[] generate() {			//		redone for efficiency -- only find mask once		int diff = max - min;				int temp = diff;		int mask = 0;		int power = 1;		while (temp > 0) {			mask = mask + power;			power <<= 1;			temp >>= 1;		}					int[] vals = new int[count];		for (int i=0 ; i<count ; i++) {			int nextRand = nextInt() & mask;			while (nextRand > diff)				nextRand = nextInt() & mask;			vals[i] = min + nextRand;		}		return vals;	}}