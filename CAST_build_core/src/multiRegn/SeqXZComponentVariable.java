package multiRegn;import java.awt.*;import dataView.*;import models.*;public class SeqXZComponentVariable extends CoreComponentVariable {	static final public int TOTAL = 0;	static final public int X_ONLY = 1;	static final public int Z_ONLY = 2;	static final public int Z_AFTER_X = 3;	static final public int X_AFTER_Z = 4;	static final public int RESIDUAL = 5;		static final public Color kTotalColor = new Color(0x9900FF);			//	purple	static final public Color kXOnlyColor = Color.red;	static final public Color kZAfterXColor = new Color(0x336600);	//	dark green	static final public Color kResidualColor = new Color(0x3333FF);		//	blue		static final public int kXZComponentType[] = {TOTAL, X_ONLY, Z_AFTER_X, RESIDUAL};	static final public int kZXComponentType[] = {TOTAL, Z_ONLY, X_AFTER_Z, RESIDUAL};	static final public String kXZComponentKey[] = {"total", "xOnly", "zAfterX", "residual"};	static final public String kZXComponentKey[] = {"total", "zOnly", "xAfterZ", "residual"};	static final public String kAllComponentKeys[] = {"total", "xOnly", "zAfterX", "zOnly", "xAfterZ", "residual"};	static final public Color kComponentColor[] = {kTotalColor, kXOnlyColor, kZAfterXColor,																																	kResidualColor};		static public void addComponentsToData(CoreModelDataSet data, String xKey, String zKey,												String yKey, String lsXKey, String lsZKey, String lsXZKey,												int componentDecimals) {		for (int i=0 ; i<kXZComponentKey.length ; i++) {			String key = kXZComponentKey[i];			int type = kXZComponentType[i];			SeqXZComponentVariable comp = new SeqXZComponentVariable(key, data, xKey, zKey, yKey,																					lsXKey, lsZKey, lsXZKey, type, componentDecimals);			data.addVariable(key, comp);		}		for (int i=1 ; i<kZXComponentKey.length-1 ; i++) {			String key = kZXComponentKey[i];			int type = kZXComponentType[i];			SeqXZComponentVariable comp = new SeqXZComponentVariable(key, data, xKey, zKey, yKey,																					lsXKey, lsZKey, lsXZKey, type, componentDecimals);			data.addVariable(key, comp);		}	}		private int componentType;	private String xKey, zKey, lsZKey, lsXZKey;		private Value tempX[] = new Value[2];		public SeqXZComponentVariable(String theName, DataSet data, String xKey, String zKey,														String yKey, String lsXKey, String lsZKey, String lsXZKey,														int componentType, int decimals) {		super(theName, data, yKey, lsXKey, decimals);		this.componentType = componentType;		this.xKey = xKey;		this.zKey = zKey;		this.lsZKey = lsZKey;		this.lsXZKey = lsXZKey;	}//--------------------------------------------------------		public int noOfValues() {		return Math.min(((Variable)data.getVariable(xKey)).noOfValues(),									super.noOfValues());	}		public boolean noteVariableChange(String key) {		return super.noteVariableChange(key) || xKey.equals(key) || zKey.equals(key);	}		public Value valueAt(int index) {		NumVariable yVar = (NumVariable)data.getVariable(yKey);		if (!foundYMean && (componentType == TOTAL || componentType == X_ONLY || componentType == Z_ONLY))			getYMean();		double y = yVar.doubleValueAt(index);		double component;		if (componentType == TOTAL)			component = y - yMean;		else {			Variable xVar = (Variable)data.getVariable(xKey);			Variable zVar = (Variable)data.getVariable(zKey);			tempX[0] = xVar.valueAt(index);			tempX[1] = zVar.valueAt(index);						MultipleRegnModel xAndZModel = (MultipleRegnModel)data.getVariable(lsXZKey);			double xzFit = xAndZModel.evaluateMean(tempX);						if (componentType == RESIDUAL)				component = y - xzFit;			else {				String simplerKey = (componentType == X_ONLY || componentType == Z_AFTER_X)																																				? modelKey : lsZKey;				MultipleRegnModel simplerModel = (MultipleRegnModel)data.getVariable(simplerKey);				double simplerFit = simplerModel.evaluateMean(tempX);								if (componentType == X_ONLY || componentType == Z_ONLY)					component = simplerFit - yMean;				else if (componentType == Z_AFTER_X || componentType == X_AFTER_Z)					component = xzFit - simplerFit;				else					component = y - xzFit;			}		}		return new NumValue(component, decimals);	}		private int countParams(String xKey) {		CoreVariable xVar = data.getVariable(xKey);		if (xVar instanceof NumVariable)			return 1;		else			return ((CatVariable)xVar).noOfCategories() - 1;	}		public int getDF() {		NumVariable yVar = (NumVariable)data.getVariable(yKey);		int n = yVar.noOfValues();		int nXParams = countParams(xKey);		int nZParams = countParams(zKey);				if (componentType == TOTAL)			return n - 1;		else if (componentType == X_ONLY || componentType == X_AFTER_Z)			return nXParams;		else if (componentType == Z_ONLY || componentType == Z_AFTER_X)			return nZParams;		else 			return n - nXParams - nZParams - 1;	}}