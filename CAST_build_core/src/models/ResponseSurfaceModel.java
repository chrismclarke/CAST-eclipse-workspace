package models;import dataView.*;public class ResponseSurfaceModel extends MultipleRegnModel implements SurfaceInterface {		public ResponseSurfaceModel(String name, DataSet data, String[] xKey, NumValue[] b,																																					NumValue s0) {		super(name, data, xKey, b, s0);	}		public ResponseSurfaceModel(String name, DataSet data, String[] xKey, NumValue[] b) {		super(name, data, xKey, b);	}		public ResponseSurfaceModel(String name, DataSet data, String[] xKey, String params) {		super(name, data, xKey, params);	}		public ResponseSurfaceModel(String name, DataSet data, String[] xKey) {																		//		only for situations where parameters																		//		are set by LS immediately after		super(name, data, xKey);	}		protected void countBParams(DataSet data, String[] xKey) {		if (xKey.length != 2)			throw new RuntimeException("ResponseSurfaceModel must have 2 x-variables.");		nBParam = null;		nBTotal = 6;	}		public void setLSParams(String yKey, int[] bDecs, int sdDecs) {		setLSParams(yKey, null, bDecs, sdDecs);	}		protected boolean fillXRow(double[] x, ValueEnumeration[] xe) {//		boolean rowOK = true;		x[0] = 1.0;		double xVal = xe[0].nextDouble();		double zVal = xe[1].nextDouble();				if (Double.isNaN(xVal) || Double.isNaN(zVal))			return false;				x[1] = xVal;		x[2] = zVal;		x[3] = xVal * xVal;		x[4] = zVal * zVal;		x[5] = xVal * zVal;				return true;	}		public double evaluateMean(double[] x) {		return b[0].toDouble() + b[1].toDouble() * x[0] + b[2].toDouble() * x[1] + b[3].toDouble() * x[0] * x[0]													+ b[4].toDouble() * x[1] * x[1] + b[5].toDouble() * x[0] * x[1];	}		public double evaluateMean(Value[] x) {		double xVal[] = new double[2];		xVal[0] = ((NumValue)x[0]).toDouble();		xVal[1] = ((NumValue)x[1]).toDouble();		return evaluateMean(xVal);	}		public double getHeight(double[] x) {		return evaluateMean(x);	}	//	public double getHeight(Value[] x) {//		return evaluateMean(x);//	}}