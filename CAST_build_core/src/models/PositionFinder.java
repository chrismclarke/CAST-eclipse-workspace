package models;import java.awt.*;import dataView.*;import axis.*;public class PositionFinder {	static final private double borderPropn = 0.05;		//		draw 5% extra round graph		private DataView view;	private NumCatAxis xAxis, yAxis;	double maxLinearError, maxXDifference;	public double xMin, xMax, yMin, yMax;		public PositionFinder(DataView view, NumCatAxis xAxis, NumCatAxis yAxis) {		this.view = view;		this.xAxis = xAxis;		this.yAxis = yAxis;		double ySlop = (yAxis.maxOnAxis - yAxis.minOnAxis) * borderPropn;		yMin = yAxis.minOnAxis - ySlop;		yMax = yAxis.maxOnAxis + ySlop;		double xSlop = (xAxis.maxOnAxis - xAxis.minOnAxis) * borderPropn;		xMin = xAxis.minOnAxis - xSlop;		xMax = xAxis.maxOnAxis + xSlop;		maxLinearError = (yAxis.transform(yAxis.maxOnAxis)														- yAxis.transform(yAxis.minOnAxis)) * 0.002;		maxXDifference = (xAxis.maxOnAxis - xAxis.minOnAxis) * 0.001;	}		public Point findPoint(double x, double y, Point thePoint) {		return view.translateToScreen(xAxis.numValToRawPosition(x),														yAxis.numValToRawPosition(y), thePoint);	}		public boolean nearlyLinear(double y0, double yMid, double y1) {		double yt0 = yAxis.transform(y0);		double yt1 = yAxis.transform(y1);		if (Double.isNaN(yt0) || Double.isInfinite(yt0)											|| Double.isNaN(yt1) || Double.isInfinite(yt1))			return false;				double ytMid = yAxis.transform(yMid);		double linearError = Math.abs(ytMid - (yt0 + yt1) * 0.5);		return linearError < maxLinearError;	}		public boolean sameX(double x0, double x1) {		return (x1 - x0) <= maxXDifference;	}		public boolean notFinite(double y) {		double yt = yAxis.transform(y);		return Double.isNaN(yt) || Double.isInfinite(yt);	}}