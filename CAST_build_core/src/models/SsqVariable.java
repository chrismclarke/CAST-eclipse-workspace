package models;import dataView.*;public class SsqVariable extends NumSummaryVariable {	static final public int SSQ = 0;	static final public int MEAN_SSQ = 1;	static final public int DF = 2;		private DataSet sourceData;	private String componentKey;	private int ssqType;	private int decimals;		public SsqVariable(String theName, DataSet sourceData, String componentKey,																															int decimals, int ssqType) {		super(theName);		this.sourceData = sourceData;		this.componentKey = componentKey;		this.decimals = decimals;		this.ssqType = ssqType;	}		protected NumValue evaluateSummary(DataSet sourceData) {		double result;		CoreComponentVariable comp = (CoreComponentVariable)sourceData.getVariable(componentKey);		if (ssqType == SSQ)			result = comp.getSsq();		else if (ssqType == MEAN_SSQ)			result = comp.getSsq() / comp.getDF();		else			result = comp.getDF();					return new NumValue(result, decimals);	}		public int getDF() {		CoreComponentVariable comp = (CoreComponentVariable)sourceData.getVariable(componentKey);		return comp.getDF();	}		public Double getSsqMean(String modelKey) {						//	does not take account of bias.						//	sub-class anovaData.OneXSsqVariable does bias		CoreModelVariable model = (CoreModelVariable)sourceData.getVariable("model");		if (model == null)			return null;		else {			double mean;			double errorSD = model.evaluateSD().toDouble();			int df = ((CoreComponentVariable)sourceData.getVariable(componentKey)).getDF();						if (ssqType == SSQ)				mean = errorSD * errorSD * df;			else if (ssqType == MEAN_SSQ)				mean = errorSD * errorSD;			else				mean = df;			return Double.valueOf(mean);		}	}		public void setDecimals(int decimals) {		this.decimals = decimals;	}}