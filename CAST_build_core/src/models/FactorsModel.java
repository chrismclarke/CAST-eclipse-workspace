package models;import java.util.*;import dataView.*;public class FactorsModel extends CoreModelVariable {	static final public int ZERO_FIRST_EFFECT = 1;	static final public int ZERO_MEAN_EFFECTS = 0;		private CoreVariable xVar[];		private double constant;	private double catMainEffect[][];	private double catToNum[][];	private double factorXMean[];	//	private int decimals;		private boolean[] fitFactor = null;	private boolean fitInteraction = false;		private double interaction[][] = null;	private int interact1 = 0;	private int interact2 = 1;		private int identConstraints = ZERO_FIRST_EFFECT;		public FactorsModel(String name, DataSet data, String[] xKey, double constant,																								double catMainEffect[][], int decimals) {		super(name, data, xKey);		xVar = new CoreVariable[xKey.length];		for (int i=0 ; i<xKey.length ; i++)			xVar[i] = data.getVariable(xKey[i]);		this.constant = constant;		this.catMainEffect = catMainEffect;		if (catMainEffect !=  null)			catToNum = new double[catMainEffect.length][];//		this.decimals = decimals;	}		public FactorsModel(String name, DataSet data, String[] xKey, int decimals) {																		//		only for situations where parameters																		//		are set by LS immediately after		super(name, data, xKey);//		this.decimals = decimals;	}		public void setParameters(String params) {		StringTokenizer st = new StringTokenizer(params);		int nFactors = 0;		st.nextToken();		//	constant		while (st.hasMoreTokens()) {			nFactors ++;			int nLevels = Integer.parseInt(st.nextToken());			for (int i=0 ; i<nLevels ; i++)				st.nextToken();		}		catMainEffect = new double[nFactors][];		st = new StringTokenizer(params);		constant = Double.parseDouble(st.nextToken());		for (int fact=0 ; fact<nFactors ; fact++) {			int nLevels = Integer.parseInt(st.nextToken());			for (int i=0 ; i<nLevels ; i++)				catMainEffect[fact][i] = Double.parseDouble(st.nextToken());		}	}		public void setMainEffect(int factorIndex, double[] catEffect) {		catMainEffect[factorIndex] = catEffect;	}		public double[] getMainEffects(int factorIndex) {		return catMainEffect[factorIndex];	}		public double getConstant() {		return constant;	}		public void setConstant(double constant) {		this.constant = constant;	}		public void setCatToNum(int factorIndex, int nFactors, double[] trans, double xMean) {		if (catToNum == null || catToNum.length != nFactors)			catToNum = new double[nFactors][];		if (trans == null)			catMainEffect[factorIndex] = new double[catToNum[factorIndex].length];		else			catMainEffect[factorIndex] = new double[1];				if (factorIndex == interact1 || factorIndex == interact2)			interaction = null;				catToNum[factorIndex] = trans;		if (factorXMean == null)			factorXMean = new double[nFactors];		factorXMean[factorIndex] = xMean;	}		public void setInteractionVariables(int interact1, int interact2) {		this.interact1 = interact1;		this.interact2 = interact2;	}		public void setIdentConstraints(int identConstraints) {		this.identConstraints = identConstraints;	}		public int noOfParameters() {		int nParam = 1;		int nLevels[] = new int[xKey.length];		for (int i=0 ; i<xKey.length ; i++) {			CatVariable xVar = (CatVariable)data.getVariable(xKey[i]);			nLevels[i] = (catToNum == null || catToNum[i] == null) ? xVar.noOfCategories() : 1;		}		for (int i=0 ; i<xKey.length ; i++)			if (fitFactor == null || fitFactor[i])				nParam += Math.max(nLevels[i] - 1, 1);				if (fitInteraction)			nParam += Math.max(nLevels[interact1] - 1, 1) * Math.max(nLevels[interact2] - 1, 1);		return nParam;	}		public void setLSParams(String yKey, boolean[] fitFactor, boolean fitInteraction) {		this.fitFactor = fitFactor;		this.fitInteraction = fitInteraction;		//	retain for noOfParameters();				CatVariable factor[] = new CatVariable[xKey.length];		int nLevels[] = new int[xKey.length];		int nParam = 1;		for (int i=0 ; i<xKey.length ; i++) {			factor[i] = (CatVariable)data.getVariable(xKey[i]);			nLevels[i] = (catToNum == null || catToNum[i] == null) ? factor[i].noOfCategories() : 1;		}		for (int i=0 ; i<xKey.length ; i++)			if (fitFactor == null || fitFactor[i])				nParam += Math.max(nLevels[i] - 1, 1);				if (fitInteraction)			nParam += Math.max(nLevels[interact1] - 1, 1) * Math.max(nLevels[interact2] - 1, 1);				double[] xy = new double[nParam + 1];		double[] r = initSsqMatrix(nParam + 1);				NumVariable yVar = (NumVariable)data.getVariable(yKey);				try {			for (int i=0 ; i<yVar.noOfValues() ; i++) {				xy[0] = 1.0;				int paramIndex = 1;				for (int factIndex=0 ; factIndex<factor.length ; factIndex++)					if (fitFactor == null || fitFactor[factIndex]) {						int factorCat = factor[factIndex].getItemCategory(i);						if (nLevels[factIndex] > 1) {							int nCats = nLevels[factIndex];							for (int k=1 ; k<nCats ; k++)								xy[paramIndex ++] = (k == factorCat) ? 1.0 : 0.0;						}						else							xy[paramIndex ++] = (catToNum[factIndex][factorCat] - factorXMean[factIndex]);					}								if (fitInteraction) {					int n1 = nLevels[interact1];					int n2 = nLevels[interact2];					int cat1 = factor[interact1].getItemCategory(i);					int cat2 = factor[interact2].getItemCategory(i);					if (n1 > 1) {						if (n2 > 1)							for (int k1=1 ; k1<n1 ; k1++)								for (int k2=1 ; k2<n2 ; k2++)									xy[paramIndex ++] = (k1 == cat1 && k2 == cat2) ? 1.0 : 0.0;						else							for (int k1=1 ; k1<n1 ; k1++)								xy[paramIndex ++] = (k1 == cat1)												? (catToNum[interact2][cat2] - factorXMean[interact2]) : 0.0;					}					else {						if (n2 > 1)							for (int k2=1 ; k2<n2 ; k2++)								xy[paramIndex ++] = (k2 == cat2)												? (catToNum[interact1][cat1] - factorXMean[interact1]) : 0.0;						else							xy[paramIndex ++] = (catToNum[interact1][cat1] - factorXMean[interact1])																		* (catToNum[interact2][cat2] - factorXMean[interact2]);					}				}								xy[paramIndex ++] = yVar.doubleValueAt(i);				givenC(r, xy, 1.0);			}						double[] bValue = bSub(r, nParam + 1, null);						constant = bValue[0];			if (catMainEffect == null || catMainEffect.length != xKey.length)				catMainEffect = new double[xKey.length][];			int paramIndex = 1;			for (int factIndex=0 ; factIndex<factor.length ; factIndex++)				if (fitFactor == null || fitFactor[factIndex]) {					int nCats = nLevels[factIndex];					if (catMainEffect[factIndex] == null || catMainEffect.length != nCats)						catMainEffect[factIndex] = new double[nCats];					if (nCats == 1)						catMainEffect[factIndex][0] = bValue[paramIndex ++];					else {						catMainEffect[factIndex][0] = 0.0;						for (int k=1 ; k<nCats ; k++)							catMainEffect[factIndex][k] = bValue[paramIndex ++];					}				}				else					catMainEffect[factIndex] = null;							if (fitInteraction) {				int n1 = nLevels[interact1];				int n2 = nLevels[interact2];				if (interaction == null)					interaction = new double[n1][];				for (int k1=0 ; k1<n1 ; k1++)					if (interaction[k1] == null)						interaction[k1] = new double[n2];								if (n1 > 1)					if (n2 > 1) {						for (int k2=0 ; k2<n2 ; k2++)							interaction[0][k2] = 0.0;						for (int k1=1 ; k1<n1 ; k1++) {							interaction[k1][0] = 0.0;							for (int k2=1 ; k2<n2 ; k2++)								interaction[k1][k2] = bValue[paramIndex ++];						}					}					else {						interaction[0][0] = 0.0;						for (int k1=1 ; k1<n1 ; k1++)							interaction[k1][0] = bValue[paramIndex ++];					}				else					if (n2 > 1) {						interaction[0][0] = 0.0;						for (int k2=1 ; k2<n2 ; k2++)							interaction[0][k2] = bValue[paramIndex ++];					}					else						interaction[0][0] = bValue[paramIndex ++];			}			else				interaction = null;						if (identConstraints == ZERO_MEAN_EFFECTS)				setZeroEffectMeans();					} catch (GivensException e) {			System.err.println(e);		}	}		public void setZeroEffectMeans() {		CatVariable factor[] = new CatVariable[xKey.length];		for (int i=0 ; i<xKey.length ; i++)			factor[i] = (CatVariable)data.getVariable(xKey[i]);				if (interaction != null) {			int n1 = catMainEffect[interact1].length;			int n2 = catMainEffect[interact2].length;						if (n2 > 1)				for (int k1=0 ; k1<n1 ; k1++) {					double sum = 0.0;					for (int k2=0 ; k2<n2 ; k2++)						sum += interaction[k1][k2];					double mean = sum / n1;					for (int k2=0 ; k2<n2 ; k2++)						interaction[k1][k2] -= mean;					catMainEffect[interact1][k1] += mean;				}						if (n1 > 1)				for (int k2=0 ; k2<n2 ; k2++) {					double sum = 0.0;					for (int k1=0 ; k1<n1 ; k1++)						sum += interaction[k1][k2];					double mean = sum / n2;					for (int k1=0 ; k1<n1 ; k1++)						interaction[k1][k2] -= mean;					catMainEffect[interact2][k2] += mean;				}		}					for (int factIndex=0 ; factIndex<factor.length ; factIndex++)			if (catMainEffect[factIndex] != null && catMainEffect[factIndex].length > 1) {				double sum = 0.0;				int nCats = factor[factIndex].noOfCategories();				for (int k=0 ; k<nCats ; k++)					sum += catMainEffect[factIndex][k];				double mean = sum / nCats;				for (int k=0 ; k<nCats ; k++)					catMainEffect[factIndex][k] -= mean;				constant += mean;			}	}		public void updateLSParams(String yKey) {		setLSParams(yKey, null, false);	}		public double evaluateMean(int[] cat) {		double yMean = constant;		for (int i=0 ; i<catMainEffect.length ; i++)			if (catMainEffect[i] != null) {				if (catMainEffect[i].length > 1)					yMean += catMainEffect[i][cat[i]];				else					yMean += catMainEffect[i][0] * (catToNum[i][cat[i]] - factorXMean[i]);			}				if (interaction != null) {			if (interaction.length > 1) {				if (interaction[0].length > 1)					yMean += interaction[cat[interact1]][cat[interact2]];				else					yMean += interaction[cat[interact1]][0]															* (catToNum[interact2][cat[interact2]] - factorXMean[interact2]);			}			else {				if (interaction[0].length > 1)					yMean += interaction[0][cat[interact2]]															* (catToNum[interact1][cat[interact1]] - factorXMean[interact1]);				else					yMean += interaction[0][0]															* (catToNum[interact1][cat[interact1]] - factorXMean[interact1])															* (catToNum[interact2][cat[interact2]] - factorXMean[interact2]);			}		}				return yMean;	}		public double evaluateMean(Value[] x) {		int cat[] = new int[x.length];		for (int i=0 ; i<cat.length ; i++)			if (xVar[i] instanceof CatVariable)				cat[i] = ((CatVariable)xVar[i]).labelIndex(x[i]);			else				cat[i] = 0;		return evaluateMean(cat);	}	}