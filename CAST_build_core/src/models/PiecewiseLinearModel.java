package models;import java.awt.*;import java.util.*;import dataView.*;import axis.*;public class PiecewiseLinearModel extends CoreModelVariable {	static final public NumValue kZero = new NumValue(0.0, 0);		static final private int kAnchorSize = 8;	static final private int kArrowHeadSize = 3;		private double x0, y0, x1, y1, x2, y2;		static private void drawArrowHead(Graphics g, int x, int y, int dx, int dy) {		g.drawLine(x, y, x + dx - dy, y + dy - dx);		g.drawLine(x, y, x + dx + dy, y + dy + dx);	}		static public void drawBiHandle(Graphics g, Point p, boolean bold) {		if (!bold) {			g.setColor(Color.red);			g.drawLine(p.x - kAnchorSize, p.y, p.x + kAnchorSize, p.y);			g.drawLine(p.x, p.y - kAnchorSize, p.x, p.y + kAnchorSize);			drawArrowHead(g, p.x - kAnchorSize - 1, p.y, kArrowHeadSize, 0);			drawArrowHead(g, p.x + kAnchorSize + 1, p.y, -kArrowHeadSize, 0);			drawArrowHead(g, p.x, p.y - kAnchorSize - 1, 0, kArrowHeadSize);			drawArrowHead(g, p.x, p.y + kAnchorSize + 1, 0, -kArrowHeadSize);		}		g.setColor(bold ? Color.red : Color.black);		g.drawOval(p.x - 2, p.y - 2, 5, 5);	}		public PiecewiseLinearModel(String name, DataSet data, String xKey, double x0, double y0,																			double x1, double y1, double x2, double y2) {		super(name, data, xKey);		this.x0 = x0;		this.y0 = y0;		this.x1 = x1;		this.y1 = y1;		this.x2 = x2;		this.y2 = y2;		s0 = kZero;	}		public PiecewiseLinearModel(String name, DataSet data, String xKey, String params) {		super(name, data, xKey);		setParameters(params);		s0 = kZero;	}		public void setParameters(String s) {		StringTokenizer st = new StringTokenizer(s);		x0 = Double.parseDouble(st.nextToken());		y0 = Double.parseDouble(st.nextToken());		x1 = Double.parseDouble(st.nextToken());		y1 = Double.parseDouble(st.nextToken());		x2 = Double.parseDouble(st.nextToken());		y2 = Double.parseDouble(st.nextToken());	}		public void setMiddle(double x1, double y1) {		this.x1 = x1;		this.y1 = y1;	}		public int noOfParameters() {		return 3;	}		public void updateLSParams(String yKey) {					//		still needs to be written	}		public double evaluateMean(double x) {		if (x <= x1)			return (x0 == x1) ? y0 : y1 + (x - x1) * (y0 - y1) / (x0 - x1);		else			return (x2 == x1) ? y2 : y1 + (x - x1) * (y2 - y1) / (x2 - x1);	}		public double evaluateMean(Value[] x) {		return evaluateMean(((NumValue)x[0]).toDouble());	}		public void drawMean(Graphics g, DataView view, NumCatAxis xAxis,																							NumCatAxis yAxis) {		double lowX = xAxis.minOnAxis;		double highX = xAxis.maxOnAxis;		double xBorder = (highX - lowX) * 0.1;		lowX -= xBorder;		highX += xBorder;		double lowY = evaluateMean(lowX);		double highY = evaluateMean(highX);				Point p0 = view.translateToScreen(xAxis.numValToRawPosition(lowX),														yAxis.numValToRawPosition(lowY), null);		Point p1 = view.translateToScreen(xAxis.numValToRawPosition(x1),														yAxis.numValToRawPosition(y1), null);				g.drawLine(p0.x, p0.y, p1.x, p1.y);				p0 = view.translateToScreen(xAxis.numValToRawPosition(highX),														yAxis.numValToRawPosition(highY), p0);				g.drawLine(p1.x, p1.y, p0.x, p0.y);	}		public void drawModel(Graphics g, DataView view, NumCatAxis xAxis,											NumCatAxis yAxis, Color fillColor, Color meanColor) {		g.setColor(meanColor);		drawMean(g, view, xAxis, yAxis);	}		public Point getHandle(DataView view, NumCatAxis xAxis, NumCatAxis yAxis) {		return view.translateToScreen(xAxis.numValToRawPosition(x1),																					yAxis.numValToRawPosition(y1), null);	}		public void setHandle(double newXValue, double newYValue) {		x1 = Math.max(Math.min(newXValue, x2), x0);		y1 = Math.max(Math.min(newYValue, y2), y0);	}		public void reset() {		x1 = 0.5 * (x0 + x2);		y1 = 0.5 * (y0 + y2);	}}