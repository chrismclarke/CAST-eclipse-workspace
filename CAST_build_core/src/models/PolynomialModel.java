package models;import java.awt.*;import java.util.*;import dataView.*;import axis.*;public class PolynomialModel extends LinearModel {	static final private NumValue kZero = new NumValue(0.0, 0);		static final private int kCurveSegments = 10;		protected NumValue[] b;		public PolynomialModel(String name, DataSet data, String xKey, NumValue[] b,																																					NumValue s0) {		super(name, data, xKey);		this.b = b;		this.s0 = s0;	}		public PolynomialModel(String name, DataSet data, String xKey, NumValue[] b) {		this(name, data, xKey, b, kZero);	}		public PolynomialModel(String name, DataSet data, String xKey, String params) {		super(name, data, xKey);		setParameters(params);	}		public PolynomialModel(String name, DataSet data, String xKey, int nb) {																		//		only for situations where parameters																		//		are set by LS immediately after		super(name, data, xKey);		b = new NumValue[nb];	}		public void setParameters(String params) {		StringTokenizer theParams = new StringTokenizer(params);				int nb = theParams.countTokens() - 1;		b = new NumValue[nb];		for (int i=0 ; i<nb ; i++)			b[i] = new NumValue(theParams.nextToken());				s0 = new NumValue(theParams.nextToken());	}		public void setParameters(NumValue[] b) {		this.b = b;	}		public NumValue getParameter(int index) {		return b[index];	}		public int noOfParameters() {		return b.length;	}		public void setLSParams(String yKey, int[] bDecs, int sdDecs) {		double[] xy = new double[b.length + 1];		double[] r = initSsqMatrix(b.length + 1);				int nObs = 0;				ValueEnumeration xe = ((NumVariable)data.getVariable(xKey[0])).values();		ValueEnumeration ye = ((NumVariable)data.getVariable(yKey)).values();				try {			while (ye.hasMoreValues()) {				xy[0] = 1.0;				double x = xe.nextDouble();				double xPower = x;				for (int i=1 ; i<b.length ; i++) {					xy[i] = xPower;					xPower *= x;				}				xy[b.length] = ye.nextDouble();				givenC(r, xy, 1.0);				nObs ++;			}						double[] bValue = bSub(r, b.length + 1, null);			for (int i=0 ; i<b.length ; i++)				b[i] = new NumValue(bValue[i], bDecs[i]);						SSComponent rss = ssComp(r, b.length + 1, nObs, 0);			s0 = new NumValue(Math.sqrt(rss.ssq / rss.df), sdDecs);		} catch (GivensException e) {			System.err.println(e);		}	}		public void updateLSParams(String yKey) {		int paramDecs[] = new int[b.length];		if (b.length != paramDecs.length)			throw new RuntimeException("PolynomialModel: Wrong number of parameters");		for (int i=0 ; i<b.length ; i++)			paramDecs[i] = b[i].decimals;		int sdDecs = (s0 == null) ? 0 : s0.decimals;		setLSParams(yKey, paramDecs, sdDecs);	}		public double evaluateMean(double x) {		double result = b[0].toDouble();		double xPower = x;		for (int i=1 ; i<b.length ; i++) {			result += xPower * b[i].toDouble();			xPower *= x;		}		return result;	}		public double evaluateMean(Value[] x) {		return evaluateMean(((NumValue)x[0]).toDouble());	}		public void drawMean(Graphics g, DataView view, NumCatAxis xAxis, NumCatAxis yAxis) {		PositionFinder finder = new PositionFinder(view, xAxis, yAxis);		double xMin = finder.xMin;		double xMax = finder.xMax;		Point p0 = new Point(0, 0);		Point p1 = new Point(0, 0);				double xStep = (xMax - xMin) / kCurveSegments;		for (int i=0 ; i<kCurveSegments ; i++) {			double x0 = xMin + i * xStep;			double x1 = x0 + xStep;			double y0 = evaluateMean(x0);			double y1 = evaluateMean(x1);			drawSegment(x0, y0, x1, y1, g, finder, p0, p1);//			drawMonotonic(xMin + i * xStep, xMin + (i + 1) * xStep, g, finder);		}	}		public void drawModel(Graphics g, DataView view, NumCatAxis xAxis,											NumCatAxis yAxis, Color fillColor, Color meanColor) {			//		Not implemented	}	}