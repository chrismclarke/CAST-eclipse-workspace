package models;import java.awt.*;import java.util.*;import dataView.*;import axis.*;public class MeanOnlyModel extends CoreModelVariable {	static final public NumValue kZero = new NumValue(0.0, 0);		static final private String[] kNoXKeys = {};		protected NumValue mean;		public MeanOnlyModel(String name, DataSet data, NumValue mean, NumValue s0) {		super(name, data, kNoXKeys);		this.mean = mean;		this.s0 = s0;	}		public MeanOnlyModel(String name, DataSet data, NumValue mean) {		this(name, data, mean, kZero);	}		public MeanOnlyModel(String name, DataSet data, String params) {		super(name, data, kNoXKeys);		setParameters(params);	}		public MeanOnlyModel(String name, DataSet data) {														//		only for situations where parameters														//		are set by LS immediately after		super(name, data, kNoXKeys);	}		public void setParameters(String params) {		StringTokenizer theParams = new StringTokenizer(params);				mean =new NumValue(theParams.nextToken());		if (theParams.hasMoreTokens()) {			s0 = new NumValue(theParams.nextToken());		}	}		public void setMean(NumValue mean) {		this.mean = mean;	}		public void setMean(double meanVal) {		mean.setValue(meanVal);	}		public NumValue getMean() {		return mean;	}		public int noOfParameters() {		return 1;	}		public void setLSParams(String yKey, int meanDecs, int sdDecs) {		ValueEnumeration ye = ((NumVariable)data.getVariable(yKey)).values();		double sy = 0.0;		double syy = 0.0;		int n = 0;		while (ye.hasMoreValues()) {			double y = ye.nextDouble();			if (!Double.isNaN(y)) {				sy += y;				syy += y * y;				n ++;			}		}		syy -= sy * sy / n;				mean = new NumValue(sy / n, meanDecs);		s0 = new NumValue((n > 1) ? Math.sqrt(syy / (n - 1)) : 0.0, sdDecs);	}		public void updateLSParams(String yKey) {		int meanDecs = (mean == null) ? 0 : mean.decimals;		int sdDecs = (s0 == null) ? 0 : s0.decimals;		setLSParams(yKey, meanDecs, sdDecs);	}		public double evaluateMean(double x) {		return mean.toDouble();	}		public double evaluateMean(Value x) {		return mean.toDouble();	}		public double evaluateMean(Value[] x) {		return mean.toDouble();	}		public void setDecimals(int meanDecs, int sdDecs) {		mean.decimals = meanDecs;		s0.decimals = sdDecs;	}		public void drawMean(Graphics g, DataView view, NumCatAxis xAxis, NumCatAxis yAxis) {		try {			int yPos = yAxis.numValToPosition(mean.toDouble());			Point p = view.translateToScreen(0, yPos, null);			g.drawLine(0, p.y, view.getSize().width, p.y);		} catch (AxisException e) {		}	}}