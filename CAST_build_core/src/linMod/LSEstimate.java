package linMod;import dataView.*;public class LSEstimate {	private double slope, intercept;	private double xMean, sxx, residSsq, totalSsq;	private int n = 0;		public LSEstimate(DataSet theData, String xKey, String yKey) {		double sx = 0.0;		sxx = 0.0;		double sy = 0.0;		double syy = 0.0;		double sxy = 0.0;				NumVariable y = (NumVariable)theData.getVariable(yKey);		NumVariable x = (NumVariable)theData.getVariable(xKey);		ValueEnumeration ye = y.values();		ValueEnumeration xe = x.values();		while (ye.hasMoreValues() && xe.hasMoreValues()) {			double yv = ye.nextDouble();			double xv = xe.nextDouble();			if (!Double.isNaN(yv) && !Double.isNaN(xv)) {				sx += xv;				sxx += xv * xv;				sy += yv;				syy += yv * yv;				sxy += xv * yv;				n ++;			}		}				xMean = sx / n;				sxx -= sx * xMean;		sxy -= xMean * sy;		syy -= sy * sy / n;				slope = sxy / sxx;		intercept = (sy - sx * slope) / n;				residSsq = syy - sxy * slope;		totalSsq = syy;	}		public double getSlope() {		return slope;	}		public double getIntercept() {		return intercept;	}		public double getXMean() {		return xMean;	}		public double getSxx() {		return sxx;	}		public double getErrorSD() {		return Math.sqrt(residSsq / (n - 2));	}		public int getN() {		return n;	}		public double getTotalSsq() {		return totalSsq;	}		public double getResidSsq() {		return residSsq;	}		public int getTotalDF() {		return n - 1;	}		public int getResidDF() {		return n - 2;	}}	