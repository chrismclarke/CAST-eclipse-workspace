package linMod;import java.util.*;import dataView.*;public class NumClusterVariable extends NumFunctionVariable {	private DataSet data;	private String countVarKey;		private int decimals;	private double min, centreMin, centreMax, max;		private double p = 0.0;		public NumClusterVariable(String theName, String params, DataSet data, String countVarKey) {		super(theName);				StringTokenizer st = new StringTokenizer(params);		NumValue minVal = new NumValue(st.nextToken());		min = minVal.toDouble();		centreMin = Double.parseDouble(st.nextToken());		centreMax = Double.parseDouble(st.nextToken());		max = Double.parseDouble(st.nextToken());				decimals = minVal.decimals;				this.data = data;		this.countVarKey = countVarKey;	}		public void setClustering(double p) {		this.p = p;	}//--------------------------------------------------------		public int getMaxDecimals() {		return decimals;	}		public int noOfValues() {		return ((Variable)data.getVariable(countVarKey)).noOfValues();	}		public Value valueAt(int index) {		double val;		int nVals = noOfValues();		if (p >= 0.0) {			double actualMin = min * (1.0 - p) + centreMin * p;			double actualMax = max * (1.0 - p) + centreMax * p;			val = actualMin + index * (actualMax - actualMin) / (nVals - 1);		}		else {			double centre = (max + min) * 0.5;			if (index <= nVals / 2) {				int n = nVals / 2;				double actualMax = centre * (1.0 + p) - min * p;				val = min + index * (actualMax - min) / n;			}			else {				int n = nVals - nVals / 2;				double actualMin = centre * (1.0 + p) - max * p;				val = max - (nVals - index - 1) * (max - actualMin) / n;			}		}		NumValue result = new NumValue(val, decimals);		return result;	}}