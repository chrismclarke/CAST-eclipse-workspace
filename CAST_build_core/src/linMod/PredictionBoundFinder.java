package linMod;import java.awt.*;import dataView.*;import axis.*;import models.*;public class PredictionBoundFinder {	private double intercept, slope, ts, nInv, xMean, sxx;		private int nPoints = 1;			//		first point is not counted otherwise	private int[] xCoord, yCoord;		private boolean countMode = true;		public PredictionBoundFinder(double intercept, double slope, double ts, double nInv,						double xMean, double sxx, DataView view, NumCatAxis xAxis, NumCatAxis yAxis) {		this.intercept = intercept;		this.slope = slope;		this.ts = ts;		this.nInv = nInv;		this.xMean = xMean;		this.sxx = sxx;				PositionFinder finder = new PositionFinder(view, xAxis, yAxis);				double xSlop = (xAxis.maxOnAxis - xAxis.minOnAxis) * 0.05;		double xMin = xAxis.minOnAxis - xSlop;		double xMax = xAxis.maxOnAxis + xSlop;				testMonotonic(xMin, xMax, finder);				countMode = false;		xCoord = new int[nPoints];		yCoord = new int[nPoints];				Point p0 = finder.findPoint(xMin, evaluateBound(xMin), null);		xCoord[0] = p0.x;		yCoord[0] = p0.y;		nPoints = 1;				testMonotonic(xMin, xMax, finder);	}		public int[] getXCoords() {		return xCoord;	}		public int[] getYCoords() {		return yCoord;	}		private double evaluateBound(double x) {		return intercept + slope * x + ts * Math.sqrt(nInv + (x - xMean) * (x - xMean) / sxx);	}		private void testSegment(double x0, double y0, double x1, double y1,							PositionFinder finder, Point p1) {		if (finder.sameX(x0, x1) && (finder.notFinite(y0) || finder.notFinite(y1)))			return;		//		System.err.println("x0 = " + x0 + ", y0 = " + y0 + ", x1 = " + x1 + ", y1 = " + y1);//		try {//			Thread.sleep(500);//		} catch (InterruptedException e) {//		}				double xMid = (x0 + x1) * 0.5;		double yMid = evaluateBound(xMid);				if (finder.nearlyLinear(y0, yMid, y1) || finder.sameX(x0, x1)) {			if (countMode)				nPoints ++;			else {				p1 = finder.findPoint(x1, y1, p1);				xCoord[nPoints] = p1.x;				yCoord[nPoints ++] = p1.y;			}		}		else {			testSegment(x0, y0, xMid, yMid, finder, p1);			testSegment(xMid, yMid, x1, y1, finder, p1);		}	}		private void testMonotonic(double xLow, double xHigh, PositionFinder finder) {		double x0 = xLow;		double y0 = evaluateBound(x0);		double x1 = xHigh;		double y1 = evaluateBound(x1);				Point p1 = new Point(0, 0);		//		System.err.println("xLow = " + xLow + ", xHigh = " + xHigh);				testSegment(x0, y0, x1, y1, finder, p1);	}}