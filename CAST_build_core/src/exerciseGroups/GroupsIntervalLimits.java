package exerciseGroups;import dataView.*;public class GroupsIntervalLimits implements GroupsIntervalConstants {	public NumValue cutoff;			//	questions about (A - B)	public int questionType;	private String groupAName, groupBName, unitsString = "";	private String totalString = "";		public GroupsIntervalLimits(NumValue cutoff,int questionType, String groupAName,																													String groupBName) {		this.cutoff = cutoff;		this.questionType = questionType;		this.groupAName = groupAName;		this.groupBName = groupBName;	}		public GroupsIntervalLimits(NumValue cutoff, int questionType, String groupAName,																								String groupBName, String units) {		this(cutoff, questionType, groupAName, groupBName);		if (units != null && units.length() > 0)			unitsString = " " + units;	}		public GroupsIntervalLimits(NumValue cutoff,int questionType, String groupAName,																						String groupBName, String units, String totalString) {		this(cutoff, questionType, groupAName, groupBName, units);		if (totalString != null && totalString.length() > 0)			this.totalString = totalString;	}		public String toString() {		switch (questionType) {			case DIFF_MORE:				return groupAName + " is at least " + cutoff + unitsString + " above " + groupBName;			case DIFF_LESS:				return groupAName + " is not more than " + cutoff + unitsString + " above " + groupBName;			case WITHIN_OF_ZERO:				return groupAName + " and " + groupBName + " are within " + cutoff + unitsString + " of each other";			case OUTSIDE_OF_ZERO:				return groupAName + " and " + groupBName + " are not within " + cutoff + unitsString + " of each other";			case TOTAL_MORE:				return totalString + " is at least " + cutoff + unitsString;			case TOTAL_LESS:				return totalString + " is no more than " + cutoff + unitsString;		}		return null;	}		public String areaAnswerString() {		switch (questionType) {			case DIFF_MORE:			case TOTAL_MORE:				return "to the right of " + cutoff;			case DIFF_LESS:			case TOTAL_LESS:				return "to the left of " + cutoff;			case WITHIN_OF_ZERO:				return "within " + cutoff + " of zero";			case OUTSIDE_OF_ZERO:				return "further than " + cutoff + " from zero";		}		return null;	}		public String generalAnswerString() {		switch (questionType) {			case DIFF_MORE:			case TOTAL_MORE:				return "more than " + cutoff;			case DIFF_LESS:			case TOTAL_LESS:				return "less than " + cutoff;			case WITHIN_OF_ZERO:				return "within " + cutoff + " of zero";			case OUTSIDE_OF_ZERO:				return "more than " + cutoff + " from zero";		}		return null;	}		public double getStartX() {		switch (questionType) {			case DIFF_MORE:			case TOTAL_MORE:				return cutoff.toDouble();			case DIFF_LESS:			case TOTAL_LESS:				return Double.NEGATIVE_INFINITY;			case WITHIN_OF_ZERO:				return -cutoff.toDouble();			case OUTSIDE_OF_ZERO:			default:				return cutoff.toDouble();		}	}		public double getEndX() {		switch (questionType) {			case DIFF_MORE:			case TOTAL_MORE:				return Double.POSITIVE_INFINITY;			case DIFF_LESS:			case TOTAL_LESS:				return cutoff.toDouble();			case WITHIN_OF_ZERO:				return cutoff.toDouble();			case OUTSIDE_OF_ZERO:			default:				return -cutoff.toDouble();		}	}		public int getIntervalType() {		return questionType;	}		public boolean equals(Object obj) {		if (obj == null || !(obj instanceof GroupsIntervalLimits))			return false;					GroupsIntervalLimits objValue = (GroupsIntervalLimits)obj;		return cutoff.equals(objValue.cutoff) && groupAName.equals(objValue.groupAName)						&& groupBName.equals(objValue.groupBName) && questionType == objValue.questionType;	}}