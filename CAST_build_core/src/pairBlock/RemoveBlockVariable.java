package pairBlock;import dataView.*;public class RemoveBlockVariable extends NumFunctionVariable {	private DataSet data;	private String yKey, blockKey, treatKey;		private double[] blockMean;	private double[] treatMean;	private double allBlockMean;	private double allTreatMean;		private double blockProportion = 0.0;	private double treatProportion = 0.0;	private int treatToCenter;		private boolean initialised = false;		public RemoveBlockVariable(String theName, DataSet data, String yKey, String blockKey,																									String treatKey, int treatToCenter) {		super(theName);		this.data = data;		this.yKey = yKey;		this.blockKey = blockKey;		this.treatKey = treatKey;		this.treatToCenter = treatToCenter;	}		public void setBlockEffectProportion(double blockProportion) {		this.blockProportion = blockProportion;	}		public void setTreatEffectProportion(double treatProportion) {		this.treatProportion = treatProportion;	}		public double getBlockEffectProportion() {		return blockProportion;	}		public double getTreatEffectProportion() {		return treatProportion;	}		protected boolean initialise() {		if (!initialised) {			initialised = true;						CatVariable blockVar = (CatVariable)data.getVariable(blockKey);			CatVariable treatVar = (CatVariable)data.getVariable(treatKey);			blockMean = new double[blockVar.noOfCategories()];			int blockN[] = new int[blockMean.length];			treatMean = new double[treatVar.noOfCategories()];			int treatN[] = new int[treatMean.length];			int allBlockN = 0;			allBlockMean = 0.0;			int allTreatN = 0;			allTreatMean = 0.0;						NumVariable yVar = (NumVariable)data.getVariable(yKey);			ValueEnumeration ye = yVar.values();			ValueEnumeration be = blockVar.values();			ValueEnumeration te = treatVar.values();			while (ye.hasMoreValues() && be.hasMoreValues() && te.hasMoreValues()) {				double y = ye.nextDouble();				int b = blockVar.labelIndex(be.nextValue());				int t = treatVar.labelIndex(te.nextValue());				if (treatToCenter < 0 || treatToCenter == t) {					allBlockMean += y;					blockMean[b] += y;					allBlockN ++;								blockN[b] ++;				}				allTreatMean += y;				treatMean[t] += y;				allTreatN ++;				treatN[t] ++;			}			allBlockMean /= allBlockN;			for (int i=0 ; i<blockMean.length ; i++)				blockMean[i] /= blockN[i];			allTreatMean /= allTreatN;			for (int i=0 ; i<treatMean.length ; i++)				treatMean[i] /= treatN[i];			return false;		}		else			return true;	}		public boolean noteVariableChange(String key) {		if (yKey.equals(key) || blockKey.equals(key) || treatKey.equals(key)) {			initialised = false;			return true;		}		return false;	}//--------------------------------------------------------		public int getMaxDecimals() {		NumVariable yVar = (NumVariable)data.getVariable(yKey);		return yVar.getMaxDecimals();	}		public int noOfValues() {		return Math.min(((NumVariable)data.getVariable(yKey)).noOfValues(),															((CatVariable)data.getVariable(blockKey)).noOfValues());	}		public Value valueAt(int index) {		initialise();		NumVariable yVar = (NumVariable)data.getVariable(yKey);		NumValue y = (NumValue)yVar.valueAt(index);		CatVariable blockVar = (CatVariable)data.getVariable(blockKey);		int block = blockVar.getItemCategory(index);		CatVariable treatVar = (CatVariable)data.getVariable(treatKey);		int treat = treatVar.getItemCategory(index);				return new NumValue(y.toDouble() - blockProportion * (blockMean[block] - allBlockMean)									 - treatProportion * (treatMean[treat] - allTreatMean), y.decimals);	}}