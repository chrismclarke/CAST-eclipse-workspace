package exper;import dataView.*;public class FactorResponseVariable extends NumFunctionVariable {	private DataSet data;	private double constant;	private String errorKey;	private String catKey[];	private double catMainEffect[][];	private int displayDecimals;	private double errorEffectScaling = 1.0;	private double factorEffectScaling[];		public FactorResponseVariable(String theName, DataSet data, double constant, String[] catKey,							double[][] catMainEffect, String errorKey) {		super(theName);		this.data = data;		this.constant = constant;		this.catKey = catKey;		this.errorKey = errorKey;		this.catMainEffect = catMainEffect;		displayDecimals = ((NumVariable)data.getVariable(errorKey)).getMaxDecimals();		factorEffectScaling = new double[catKey.length];		for (int i=0 ; i<factorEffectScaling.length ; i++)			factorEffectScaling[i] = 1.0;	}		public void setMainEffect(int factorIndex, double[] catEffect) {		catMainEffect[factorIndex] = catEffect;	}		public void setErrorEffectScaling(double errorEffectScaling) {		this.errorEffectScaling = errorEffectScaling;	}		public void setFactorEffectScaling(int factorIndex, double scaling) {		this.factorEffectScaling[factorIndex] = scaling;	}		public double[] getEffects(int factorIndex) {		double effect[] = new double[catMainEffect[factorIndex].length];		for (int i=0 ; i<effect.length ; i++)			effect[i] = factorEffectScaling[factorIndex] * catMainEffect[factorIndex][i];		return effect;	}		public double getMean(int[] cat) {		double yMean = constant;		for (int i=0 ; i<catKey.length ; i++)			yMean += factorEffectScaling[i] * catMainEffect[i][cat[i]];		return yMean;	}		public boolean noteVariableChange(String key) {		for (int i=0 ; i<catKey.length ; i++)			if (catKey[i].equals(key))				return true;		return errorKey.equals(key);	}//--------------------------------------------------------		public int getMaxDecimals() {		return displayDecimals;	}		public int noOfValues() {		return ((NumVariable)data.getVariable(errorKey)).noOfValues();	}		synchronized public Value valueAt(int index) {		double yMean = constant;		for (int i=0 ; i<catKey.length ; i++) {			CatVariable xi = (CatVariable)data.getVariable(catKey[i]);			int cat = xi.getItemCategory(index);			yMean += factorEffectScaling[i] * catMainEffect[i][cat];		}				NumValue error = (NumValue)((NumVariable)data.getVariable(errorKey)).valueAt(index);		NumValue result = new NumValue(yMean + errorEffectScaling * error.toDouble(), displayDecimals);				return result;	}}