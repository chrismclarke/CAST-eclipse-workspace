package exper;import java.awt.*;import dataView.*;import experProg.*;public class PairedPictView extends CoreMovePictView {//	static final public String PAIRED_PICT_PLOT = "pairedPict";		static final private Color kPaleGray = new Color(0xDDDDDD);		private boolean showingBlocks = false;		public PairedPictView(DataSet data, CoreMultiFactorApplet applet, long randomSeed, String permKey,											String rowTreatKey, String colTreatKey) {		super(data, applet, randomSeed, permKey, rowTreatKey, colTreatKey);	}		public void setShowingBlocks(boolean showingBlocks) {		this.showingBlocks = showingBlocks;	}		protected void drawFooting(Graphics g, int leftBorder) {	}		protected int getFootingHt(Graphics g) {		return 0;	}		protected int drawLefting(Graphics g, int bottomBorder) {		FontMetrics fm = g.getFontMetrics();		CatVariable rowVar = (CatVariable)getVariable(rowTreatKey);		int n = rowVar.noOfCategories();				int maxWidth = rowVar.getMaxWidth(g);		int ascent = fm.getAscent();		for (int i=0 ; i<n ; i++) {			int vertCenter = ((getSize().height - bottomBorder) * (2 * i + 1)) / (2 * n);			rowVar.getLabel(i).drawRight(g, kHeadingGap, vertCenter + ascent / 2);		}				g.setColor(getForeground());		return 2 * kHeadingGap + maxWidth;	}		protected void drawBackground(Graphics g, int tableLeft, int tableBottom) {		int top = kTopBottomBorder;		int bottom = getSize().height - tableBottom - kTopBottomBorder;		int left = tableLeft + kLeftRightBorder;		int right = getSize().width - kLeftRightBorder;				if (showingBlocks) {			CatVariable colVar = (CatVariable)getVariable(colTreatKey);			int nColCats = colVar.noOfCategories();						for (int j=0 ; j<nColCats ; j++) {				g.setColor((j % 2 == 0) ? Color.white : kPaleGray);				int x0 = left + j * (right - left) / nColCats;				int x1 = left + (j+1) * (right - left) / nColCats;				g.fillRect(x0, top, (x1 - x0), (bottom - top));			}		}		else {			g.setColor(Color.white);			g.fillRect(left, top, (right - left), (bottom - top));		}		g.setColor(getForeground());	}		protected int getPictureIndex(int i) {		int nCols = ((CatVariable)getVariable(colTreatKey)).noOfCategories();		return i % nCols;	}}	