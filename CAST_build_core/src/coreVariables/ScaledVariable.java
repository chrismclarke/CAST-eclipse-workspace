package coreVariables;import java.util.*;import dataView.*;public class ScaledVariable extends NumFunctionVariable {	static private final String kBadScaling = "Invalid specification of scaling";		private NumVariable baseVariable;	private String baseKey;	private double const0, const1;	protected int displayDecimals;		private boolean roundValues = false;		//	if rounded, values are exactly same as they print		public ScaledVariable(String theName, NumVariable baseVariable, String baseKey, double const0,															double const1, int displayDecimals) {		super(theName);		this.baseVariable = baseVariable;		this.baseKey = baseKey;		setScale(const0, const1, displayDecimals);	}		public ScaledVariable(String theName, NumVariable baseVariable, String baseKey,																																		String transformParam) {		super(theName);		this.baseVariable = baseVariable;		this.baseKey = baseKey;		setScale(transformParam);	}		public void setScale(double const0, double const1, int displayDecimals) {		this.const0 = const0;		this.const1 = const1;		this.displayDecimals = displayDecimals;	}		public void setScale(String transformParam) {		if (transformParam == null)			throw new RuntimeException(kBadScaling);					StringTokenizer scaling = new StringTokenizer(transformParam);		if (!scaling.hasMoreTokens())			throw new RuntimeException(kBadScaling);		String const0String = scaling.nextToken();		const0 = Double.parseDouble(const0String);				if (!scaling.hasMoreTokens())			throw new RuntimeException(kBadScaling);		String const1String = scaling.nextToken();		const1 = Double.parseDouble(const1String);				if (!scaling.hasMoreTokens())			throw new RuntimeException(kBadScaling);		this.displayDecimals = Integer.parseInt(scaling.nextToken());	}		public void setRoundValues(boolean roundValues) {		this.roundValues = roundValues;	}		public double getParam(int index) {		return (index == 0) ? const0 : const1;	}		public void setParam(int index, double newValue) {		if (index == 0)			const0 = newValue;		else			const1 = newValue;	}//--------------------------------------------------------		public int getMaxDecimals() {		return displayDecimals;	}		public int noOfValues() {		return baseVariable.noOfValues();	}		protected double scaledValue(int index) {		NumValue baseVal = (NumValue)baseVariable.valueAt(index);		double value = const0 + const1 * baseVal.toDouble();		if (roundValues) {			double factor = 1.0;			for (int i=0 ; i<displayDecimals ; i++) {				value *= 10.0;				factor /= 10.0;			}			for (int i=0 ; i<-displayDecimals ; i++) {				value /= 10.0;				factor *= 10.0;			}			value = Math.rint(value) * factor;		}		return value;	}		public Value valueAt(int index) {		double value = scaledValue(index);		return new NumValue(value, displayDecimals);	}		public boolean noteVariableChange(String key) {		clearSortedValues();		return baseKey.equals(key);	}}