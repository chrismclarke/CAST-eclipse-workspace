package coreVariables;import dataView.*;public class FixedMeanSDVariable extends NumFunctionVariable {	private NumVariable baseVariable;	private CatVariable xVariable;	private String yKey, xKey;		private int nGroups;	private double rawMean[];	private double rawSD[];	private double targetMean[];	private double targetSD[];		public FixedMeanSDVariable(String theName, DataSet data, String yKey, String xKey) {		super(theName);		baseVariable = (NumVariable)data.getVariable(yKey);		if (xKey == null)			nGroups = 1;		else {			xVariable = (CatVariable)data.getVariable(xKey);			nGroups = xVariable.noOfCategories();		}		this.yKey = yKey;		this.xKey = xKey;				findRawMeanSD();		reset();	}		public FixedMeanSDVariable(String theName, DataSet data, String yKey, double targetMean) {		this(theName, data, yKey, null);		setMean(targetMean);	}		public FixedMeanSDVariable(String theName, DataSet data, String yKey, double targetMean,																									double targetSD) {		this(theName, data, yKey, targetMean);		setSD(targetSD);	}		public void setMean(double target) {		for (int i=0 ; i<targetMean.length ; i++)			this.targetMean[i] = target;	}		public void setSD(double target) {		for (int i=0 ; i<targetSD.length ; i++)			this.targetSD[i] = target;	}		public void setMean(double target, int index) {		this.targetMean[index] = target;	}		public void setSD(double target, int index) {		this.targetSD[index] = target;	}		public double[] getMeans() {		return targetMean;	}		public double[] getSDs() {		return targetSD;	}		public void reset() {		if (targetMean == null)			targetMean = new double[rawMean.length];		System.arraycopy(rawMean, 0, targetMean, 0, rawMean.length);		if (targetSD == null)			targetSD = new double[rawSD.length];		System.arraycopy(rawSD, 0, targetSD, 0, rawSD.length);	}//--------------------------------------------------------		private void findRawMeanSD() {		ValueEnumeration ye = baseVariable.values();		if (rawMean == null)			rawMean = new double[nGroups];		if (rawSD == null)			rawSD = new double[nGroups];				if (xKey ==  null) {			double sum = 0.0;			double sum2 = 0.0;			while (ye.hasMoreValues()) {				double val = ye.nextDouble();				sum += val;				sum2 += val * val;			}			int count = baseVariable.noOfValues();						rawMean[0] = sum / count;			rawSD[0] = Math.sqrt((sum2 - rawMean[0] * sum) / (count - 1));		}		else {			ValueEnumeration xe = xVariable.values();			double sum[] = new double[nGroups];			double sum2[] = new double[nGroups];			int count[] = new int[nGroups];			while (ye.hasMoreValues() && xe.hasMoreValues()) {				double val = ye.nextDouble();				int catIndex = xVariable.labelIndex(xe.nextValue());				sum[catIndex] += val;				sum2[catIndex] += val * val;				count[catIndex] ++;			}			for (int i=0 ; i<nGroups ; i++) {				rawMean[i] = sum[i] / count[i];				rawSD[i] = Math.sqrt((sum2[i] - rawMean[i] * sum[i]) / (count[i] - 1));			}		}	}		public int getMaxDecimals() {		return baseVariable.getMaxDecimals();	}		public int noOfValues() {		return baseVariable.noOfValues();	}		public Value valueAt(int index) {		NumValue baseVal = (NumValue)baseVariable.valueAt(index);		double scaledVal;		if (xKey == null)			scaledVal = (baseVal.toDouble() - rawMean[0]) / rawSD[0] * targetSD[0] + targetMean[0];		else {			int group = xVariable.getItemCategory(index);			scaledVal = (baseVal.toDouble() - rawMean[group]) / rawSD[group] * targetSD[group] + targetMean[group];		}		NumValue result = new NumValue(scaledVal, baseVal.decimals);		return result;	}//--------------------------------------------------------		public boolean noteVariableChange(String key) {		if (yKey.equals(key) || (xKey != null && xKey.equals(key))) {			findRawMeanSD();			return true;		}		else			return false;	}}