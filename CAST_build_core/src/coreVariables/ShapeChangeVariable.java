package coreVariables;import dataView.*;import utils.*;public class ShapeChangeVariable extends NumFunctionVariable {																			//	always has value between -0.5 and 1.5	static final private double kMaxKurtosis = 3.0;	static final private double kMaxSkewnessPower = 3.0;	static final private double kMaxShift = 0.5;	static final private double kMinSpread = 0.2;		private DataSet data;	private String baseKey;		private XNoValueSlider kurtosisSlider, skewnessSlider, spreadSlider, shiftSlider;		private NumValue sortedTrans[];		public ShapeChangeVariable(String theName, DataSet data, String baseKey) {		super(theName);		this.data = data;		this.baseKey = baseKey;	}		public void setSliders(XNoValueSlider kurtosisSlider, XNoValueSlider skewnessSlider,												XNoValueSlider spreadSlider, XNoValueSlider shiftSlider) {		this.kurtosisSlider = kurtosisSlider;		this.skewnessSlider = skewnessSlider;		this.spreadSlider = spreadSlider;		this.shiftSlider = shiftSlider;	}		public int getMaxDecimals() {		NumVariable baseVariable = (NumVariable)data.getVariable(baseKey);		return baseVariable.getMaxDecimals();	}		public int noOfValues() {		NumVariable baseVariable = (NumVariable)data.getVariable(baseKey);		return baseVariable.noOfValues();	}		public Value valueAt(int index) {		NumVariable baseVariable = (NumVariable)data.getVariable(baseKey);		NumValue baseVal = (NumValue)baseVariable.valueAt(index);				double kurtosis = getKurtosis();		double skewness = getSkewness();		double spread = getSpread();		double shift = getShift();				return transformValue(baseVal, kurtosis, skewness, spread, shift, getMaxDecimals());	}		synchronized public NumValue[] getSortedData() {		NumVariable baseVariable = (NumVariable)data.getVariable(baseKey);		if (sortedTrans == null)			sortedTrans = new NumValue[baseVariable.noOfValues()];				double kurtosis = getKurtosis();		double skewness = getSkewness();		double spread = getSpread();		double shift = getShift();		int decimals = baseVariable.getMaxDecimals();				NumValue baseSorted[] = baseVariable.getSortedData();		for (int i=0 ; i<baseSorted.length ; i++)			sortedTrans[i] = transformValue(baseSorted[i], kurtosis, skewness, spread,																										shift, decimals);				return sortedTrans;	}		private double getKurtosis() {		double kurtosis = 1.0;		if (kurtosisSlider != null)			kurtosis = 1.0 + kurtosisSlider.getValue() * (kMaxKurtosis - 1.0)																				/ kurtosisSlider.getMaxValue();													//		assumes minValue = 0		return kurtosis;	}		private double getSkewness() {		double skewness = 1.0;		if (skewnessSlider != null) {			int sliderVal = skewnessSlider.getValue();			int maxVal = skewnessSlider.getMaxValue();													//		assumes minValue = - maxValue			if (sliderVal > 0)				skewness = -1.0 - sliderVal * (kMaxSkewnessPower - 1.0) / maxVal;			else if (sliderVal < 0)				skewness = 1.0 - sliderVal * (kMaxSkewnessPower - 1.0) / maxVal;		}		return skewness;	}		private double getSpread() {		double spread = 1.0;		if (spreadSlider != null)			spread = kMinSpread + (1.0 - kMinSpread)											* spreadSlider.getValue() / (double)spreadSlider.getMaxValue();													//		assumes minValue = 0		return spread;	}		private double getShift() {		double shift = 0.0;													//		assumes minValue = - maxValue		if (shiftSlider != null)			shift = kMaxShift * shiftSlider.getValue() / (double)shiftSlider.getMaxValue();		return shift;	}		private NumValue transformValue(NumValue baseVal, double kurtosis, double skewness,																double spread, double shift, int decimals) {		double result = baseVal.toDouble();		if (kurtosisSlider != null)			result = (result >= 0.5) ? 0.5 + 0.5 * Math.pow(2.0 * result - 1.0, kurtosis)											: 0.5 - 0.5 * Math.pow(1.0 - 2.0 * result, kurtosis);		if (skewnessSlider != null)			result = (skewness > 0.0) ? Math.pow(result, skewness)												: 1.0 - Math.pow(1.0 - result, -skewness);		if (spreadSlider != null)			result = 0.5 + (result - 0.5) * spread;				if (shiftSlider != null)			result = result + shift;				return new NumValue(result, decimals);	}}