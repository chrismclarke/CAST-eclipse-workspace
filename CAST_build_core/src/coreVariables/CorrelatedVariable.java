package coreVariables;import java.util.*;import dataView.*;public class CorrelatedVariable extends NumFunctionVariable {	static private final String kBadParams = "Invalid parameters for correlated variable";		private DataSet data;	private String xKey, yKey;	private double xMean, xSD, yMean, ySD, xyCorr;		private double min01, max01;			//		with mean 0 and sd 1		private double targetMean, targetSD, targetCorr;	private double targetMin, targetMax;	private double xCoeff, yCoeff;	private boolean scaleForMeanSd = true;		private int displayDecimals;	private boolean sourceInitialised = false;	//		initialisation when source variable changes		public CorrelatedVariable(String theName, DataSet data, String xKey, String yKey,					double targetMean, double targetSD, double targetCorr, int displayDecimals) {		super(theName);		this.data = data;		this.xKey = xKey;		this.yKey = yKey;		setMeanSdCorr(targetMean, targetSD, targetCorr, displayDecimals);	}		public CorrelatedVariable(String theName, DataSet data, String xKey, String yKey,																								String parameters) {		super(theName);		this.data = data;		this.xKey = xKey;		this.yKey = yKey;				if (parameters == null)			throw new RuntimeException(kBadParams);					StringTokenizer tokens = new StringTokenizer(parameters);		if (!tokens.hasMoreTokens())			throw new RuntimeException(kBadParams);		String meanString = tokens.nextToken();		targetMean = Double.parseDouble(meanString);				if (!tokens.hasMoreTokens())			throw new RuntimeException(kBadParams);		String sdString = tokens.nextToken();		targetSD = Double.parseDouble(sdString);		if (targetSD <= 0.0)			throw new RuntimeException(kBadParams);				if (!tokens.hasMoreTokens())			throw new RuntimeException(kBadParams);		String corrString = tokens.nextToken();		targetCorr = Double.parseDouble(corrString);		if (targetCorr < -1.0 || targetCorr > 1.0)			throw new RuntimeException(kBadParams);				if (!tokens.hasMoreTokens())			throw new RuntimeException(kBadParams);		this.displayDecimals = Integer.parseInt(tokens.nextToken());	}		public CorrelatedVariable(String theName, DataSet data, String xKey, String yKey,																							int displayDecimals) {		super(theName);		this.data = data;		this.xKey = xKey;		this.yKey = yKey;		this.displayDecimals = displayDecimals;				initialiseXY();				this.targetMean = yMean;		this.targetSD = ySD;		setCorrelation(xyCorr);	}		private boolean initialiseXY() {		if (sourceInitialised)			return false;				NumVariable xVariable = (NumVariable)data.getVariable(xKey);		NumVariable yVariable = (NumVariable)data.getVariable(yKey);		ValueEnumeration xEnum = xVariable.values();		ValueEnumeration yEnum = yVariable.values();		int xyValues = 0;		double sx = 0.0;		double sy = 0.0;		double sxx = 0.0;		double syy = 0.0;		double sxy = 0.0;		while (xEnum.hasMoreValues() && yEnum.hasMoreValues()) {			double xVal = xEnum.nextDouble();			double yVal = yEnum.nextDouble();			sx += xVal;			sy += yVal;			sxx += xVal*xVal;			syy += yVal*yVal;			sxy += xVal*yVal;			xyValues ++;		}		xMean = sx / xyValues;		yMean = sy / xyValues;		xSD = Math.sqrt((sxx - sx * xMean) / (xyValues - 1));		ySD = Math.sqrt((syy - sy * yMean) / (xyValues - 1));		xyCorr = (sxy - sx * yMean) / (xSD * ySD * (xyValues - 1));		setCorrelation(targetCorr);				if (!scaleForMeanSd) {			min01 = Double.POSITIVE_INFINITY;			max01 = Double.NEGATIVE_INFINITY;			xEnum = xVariable.values();			yEnum = yVariable.values();			while (xEnum.hasMoreValues() && yEnum.hasMoreValues()) {				double xVal = xEnum.nextDouble();				double yVal = yEnum.nextDouble();								double y = xCoeff * (xVal - xMean) / xSD + yCoeff * (yVal - yMean) / ySD;								min01 = Math.min(min01, y);				max01 = Math.max(max01, y);			}		}				sourceInitialised = true;		return true;	}		public void setCorrelation(double targetCorr) {		this.targetCorr = targetCorr;		yCoeff = Math.sqrt((1.0 - targetCorr * targetCorr) / (1.0 - xyCorr * xyCorr));		xCoeff = targetCorr - xyCorr * yCoeff;	}		public void setMeanSdCorr(double targetMean, double targetSD, double targetCorr,																							int displayDecimals) {		this.targetMean = targetMean;		this.targetSD = targetSD;		this.targetCorr = targetCorr;		this.displayDecimals = displayDecimals;		scaleForMeanSd = true;		sourceInitialised = false;	}		public void setMinMaxCorr(double targetMin, double targetMax, double targetCorr,																							int displayDecimals) {		this.targetMin = targetMin;		this.targetMax = targetMax;		this.targetCorr = targetCorr;		this.displayDecimals = displayDecimals;		scaleForMeanSd = false;		sourceInitialised = false;	}		public double getRawCorrelation() {		initialiseXY();		return xyCorr;	}//--------------------------------------------------------		public boolean noteVariableChange(String key) {		if (xKey.equals(key) || yKey.equals(key)) {			sourceInitialised = false;			return true;		}		return false;	}		public int getMaxDecimals() {		return displayDecimals;	}		public int noOfValues() {		NumVariable xVar = (NumVariable)data.getVariable(xKey);		NumVariable yVar = (NumVariable)data.getVariable(yKey);				return Math.min(xVar.noOfValues(), yVar.noOfValues());	}		public Value valueAt(int index) {		initialiseXY();				NumVariable xVariable = (NumVariable)data.getVariable(xKey);		NumVariable yVariable = (NumVariable)data.getVariable(yKey);		double x = xVariable.doubleValueAt(index);		double y = yVariable.doubleValueAt(index);				double baseValue = y;		if (index > 0 || noOfValues() > 1)			baseValue = xCoeff * (x - xMean) / xSD + yCoeff * (y - yMean) / ySD;					//		if nValues = 1, assumes yVal is generated from normal(0,1) distn				if (scaleForMeanSd)			return new NumValue(targetMean + targetSD * baseValue, displayDecimals);		else {			double slope = (targetMax - targetMin) / (max01 - min01);			double intercept = targetMin - slope * min01;			return new NumValue(intercept + slope * baseValue, displayDecimals);		}	}}