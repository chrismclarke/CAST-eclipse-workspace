package coreVariables;import dataView.*;public class InteractionVariable extends CatFunctionVariable {	static private boolean[] trueArray(int n) {		boolean result[] = new boolean[n];		for (int i=0 ; i<n ; i++)			result[i] = true;		return result;	}		private String[] allMainEffectKeys;	private boolean[] activeKey;	private CatVariable allMainEffectVar[];	private int nCats[];		public InteractionVariable(String theName, DataSet data, String[] allMainEffectKeys,																															boolean[] activeKey) {		super(theName);		this.allMainEffectKeys = allMainEffectKeys;		this.activeKey = activeKey;		allMainEffectVar = new CatVariable[allMainEffectKeys.length];		nCats = new int[allMainEffectKeys.length];		for (int i=0 ; i<allMainEffectKeys.length ; i++) {			allMainEffectVar[i] = (CatVariable)data.getVariable(allMainEffectKeys[i]);			if (activeKey[i])			 	nCats[i] = allMainEffectVar[i].noOfCategories();		}				int nLabels = 1;		for (int i=0 ; i<nCats.length ; i++)			if (activeKey[i])				nLabels *= (nCats[i] - 1);		nLabels += 1;				LabelValue labels[] = new LabelValue[nLabels];		labels[0] = new LabelValue(theName + "_00");		addLabels(theName + "_", nCats, 0, labels, 1);		setLabels(labels);	}		public InteractionVariable(String theName, DataSet data, String[] mainEffectKeys) {		this(theName, data, mainEffectKeys, trueArray(mainEffectKeys.length));	}		private int addLabels(String prefix, int[] nCats, int startLevel, LabelValue labels[],																																			int nLabels) {		if (nCats[startLevel] > 0)			for (int i=1 ; i<nCats[startLevel] ; i++) {				String newPrefix = prefix + i;				if (startLevel == nCats.length - 1)					labels[nLabels ++] = new LabelValue(newPrefix);				else					nLabels = addLabels(newPrefix, nCats, startLevel + 1, labels, nLabels);			}		else {			if (startLevel < nCats.length - 1)				nLabels = addLabels(prefix, nCats, startLevel + 1, labels, nLabels);			else				labels[nLabels ++] = new LabelValue(prefix);		}					return nLabels;	}//--------------------------------------------------------		public boolean noteVariableChange(String key) {		for (int i=0 ; i<allMainEffectKeys.length ; i++)			if (activeKey[i] && key.equals(allMainEffectKeys[i]))				return true;		return false;	}//--------------------------------------------------------		public int noOfValues() {		return allMainEffectVar[0].noOfValues();	}		public Value valueFromMainEffects(int[] mainEffectIndex) {		for (int i=0 ; i<nCats.length ; i++)			if (activeKey[i] && mainEffectIndex[i] == 0)					return getLabel(0);				int labelIndex = 0;		for (int i=0 ; i<nCats.length ; i++)			if (activeKey[i])				labelIndex = labelIndex * (nCats[i] - 1) + (mainEffectIndex[i] - 1);		labelIndex ++;				return getLabel(labelIndex);	}		public Value valueAt(int index) {		int catIndex[] = new int[nCats.length];		for (int i=0 ; i<nCats.length ; i++)			catIndex[i] = allMainEffectVar[i].getItemCategory(index);				return valueFromMainEffects(catIndex);	}}