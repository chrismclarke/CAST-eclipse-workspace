package coreVariables;import java.util.*;import dataView.*;public class QuadraticVariable extends NumFunctionVariable {	static private final String kBadScaling = "Invalid specification of scaling";		private NumVariable baseVariable;	private double const0, const1, const2;	private int displayDecimals;		public QuadraticVariable(String theName, NumVariable baseVariable, double const0,													double const1, double const2, int displayDecimals) {		super(theName);		this.baseVariable = baseVariable;		this.const0 = const0;		this.const1 = const1;		this.const2 = const2;		this.displayDecimals = displayDecimals;	}		public QuadraticVariable(String theName, NumVariable baseVariable, String transformParam) {		super(theName);		this.baseVariable = baseVariable;		setParameters(transformParam);	}		public void setParameters(String transformParam) {		if (transformParam == null)			throw new RuntimeException(kBadScaling);					StringTokenizer scaling = new StringTokenizer(transformParam);		if (!scaling.hasMoreTokens())			throw new RuntimeException(kBadScaling);		String const0String = scaling.nextToken();		const0 = Double.parseDouble(const0String);				if (!scaling.hasMoreTokens())			throw new RuntimeException(kBadScaling);		String const1String = scaling.nextToken();		const1 = Double.parseDouble(const1String);				if (!scaling.hasMoreTokens())			throw new RuntimeException(kBadScaling);		String const2String = scaling.nextToken();		const2 = Double.parseDouble(const2String);				if (!scaling.hasMoreTokens())			throw new RuntimeException(kBadScaling);		this.displayDecimals = Integer.parseInt(scaling.nextToken());	}		public void changeParameters(double const0, double const1, double const2) {		this.const0 = const0;		this.const1 = const1;		this.const2 = const2;	}//--------------------------------------------------------		public int getMaxDecimals() {		return displayDecimals;	}		public int noOfValues() {		return baseVariable.noOfValues();	}		public Value valueAt(int index) {		NumValue baseVal = (NumValue)baseVariable.valueAt(index);		NumValue result = new NumValue(const0 + baseVal.toDouble() * (const1 + baseVal.toDouble() * const2),																								displayDecimals);		return result;	}}