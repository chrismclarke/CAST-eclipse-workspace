package regnProg;import java.util.*;import dataView.*;import models.*;class ChangedValue {	int index;	double val0;	double val1;	ChangedValue(int index, double val0, double val1) {		this.index = index;		this.val0 = val0;		this.val1 = val1;	}	ChangedValue(String s) {		StringTokenizer st = new StringTokenizer(s);		index = Integer.parseInt(st.nextToken());		try {			val0 = (new NumValue(st.nextToken())).toDouble();		} catch (Exception e) {			val0 = Double.NaN;		}		try {			val1 = (new NumValue(st.nextToken())).toDouble();		} catch (Exception e) {			val1 = Double.NaN;		}	}		static ChangedValue[] readChanges(String params) {		LabelEnumeration e = new LabelEnumeration(params);		int count = 0;		while (e.hasMoreElements()) {			e.nextElement();			count++;		}		ChangedValue result[] = new ChangedValue[count];				e = new LabelEnumeration(params);		count = 0;		while (e.hasMoreElements()) {			result[count] = new ChangedValue((String)e.nextElement());			count++;		}		return result;	}}abstract public class ChangeValuesApplet extends MultipleScatterApplet {	static final protected String CHANGE1_PARAM = "change1";	static final protected String CHANGE2_PARAM = "change2";	static final protected String CHANGE1_NAME_PARAM = "change1Name";	static final protected String CHANGE2_NAME_PARAM = "change2Name";	//	private XCheckbox change1Check;//	private XCheckbox change2Check;		protected ChangedValue change1[];	protected ChangedValue change2[];		public void setupApplet() {		super.setupApplet();				String change1String = getParameter(CHANGE1_PARAM);		if (change1String != null)			change1 = ChangedValue.readChanges(change1String);		String change2String = getParameter(CHANGE2_PARAM);		if (change2String != null)		change2 = ChangedValue.readChanges(change2String);	}		abstract protected LinearModel createModel(DataSet data);	abstract protected void updateLSParams();		protected DataSet readData() {		DataSet data = super.readData();		LinearModel model = createModel(data);		if (model != null)			data.addVariable("model", model);				return data;	}		protected void doChanges(ChangedValue[] changes, boolean secondValue) {		NumVariable x = (NumVariable)data.getVariable("x");		boolean selected[] = new boolean[x.noOfValues()];		for (int i=0 ; i<changes.length ; i++) {			NumValue changedVal = (NumValue)x.valueAt(changes[i].index);			changedVal.setValue(secondValue ? changes[i].val1 : changes[i].val0);			if (!Double.isNaN(changedVal.toDouble()))				selected[changes[i].index] = true;		}		updateLSParams();		synchronized (data) {			data.variableChanged("x");			data.setSelection(selected);		}	}}