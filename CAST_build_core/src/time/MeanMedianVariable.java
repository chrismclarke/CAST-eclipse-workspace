package time;import dataView.*;public class MeanMedianVariable extends StoredFunctVariable {	private int meanRun = 1;	private int medianRun = 1;	private int extraDecimals = 0;		private boolean showEnds = true;		public MeanMedianVariable(String theName, DataSet data, String sourceKey, boolean showEnds) {		super(theName, data, sourceKey);		this.showEnds = showEnds;	}		public MeanMedianVariable(String theName, DataSet data, String sourceKey) {		this(theName, data, sourceKey, true);	}		public void setMeanRun(int run) {		this.meanRun = run;		markChanged();	}		public void setMedianRun(int run) {		this.medianRun = run;		markChanged();	}		public int getMeanRun() {		return meanRun;	}		public int getMedianRun() {		return medianRun;	}		public void setExtraDecimals(int extraDecimals) {		this.extraDecimals = extraDecimals;	}//--------------------------------------------------------		protected int getDecimals() {		NumVariable sourceVar = getSourceVariable();		return sourceVar.getMaxDecimals() + extraDecimals;	}//--------------------------------------------------------		protected ValueEnumeration getEnumeration() {		NumVariable sourceVar = getSourceVariable();				ValueEnumeration result = sourceVar.values();		if (medianRun > 1)			result = new MedianEnumeration(result, medianRun, showEnds);		if (meanRun > 1)			result = new MeanEnumeration(result, meanRun, showEnds);				return result;	}		private int getInfluence(int index) {		int bestInfluence = medianRun / 2 + meanRun / 2;		int actualInfluence = Math.min(Math.min(index, noOfValues() - index - 1),																			medianRun / 2 + meanRun / 2);		if (!showEnds && actualInfluence < bestInfluence)			return 0;		else			return actualInfluence;	}	protected int getMinInfluence(int index) {		return index - getInfluence(index);			}		protected int getMaxInfluence(int index) {		return index + getInfluence(index);	}}