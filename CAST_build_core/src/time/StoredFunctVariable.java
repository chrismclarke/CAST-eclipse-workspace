package time;import dataView.*;abstract public class StoredFunctVariable extends NumFunctionVariable {	private double value[] = null;	private int decimals;	private boolean initialised = false;			//		initialisation when parameters change	private boolean sourceInitialised = false;	//		initialisation when source variable changes		protected DataSet data;	protected String sourceKey;		public StoredFunctVariable(String theName, DataSet data, String sourceKey) {		super(theName);		this.data = data;		this.sourceKey = sourceKey;	}		protected void markChanged() {		markChanged(0);	}		protected void markChanged(int offset) {		initialised = false;		String thisKey = data.getKey(this);		if (thisKey != null) {			int selectedIndex = data.getSelection().findSingleSetFlag();			if (selectedIndex >= 0)				selectedIndex += offset;			data.variableChanged(thisKey, selectedIndex);		}	}		public boolean noteVariableChange(String key) {		if (sourceKey.equals(key)) {			sourceInitialised = false;			initialised = false;			return true;		}		return false;	}		public void noteValueChange(int theIndex) {		sourceInitialised = false;		initialised = false;	}//--------------------------------------------------------		private void initialise() {		if (!sourceInitialised) {			setupSource();			sourceInitialised = true;		}		if (!initialised) {			setupValues();			decimals = getDecimals();			initialised = true;		}	}		public int getMaxDecimals() {		initialise();		return decimals;	}		public int noOfValues() {		return getSourceVariable().noOfValues();	}		public Value valueAt(int index) {		initialise();		NumValue newVal = new NumValue(value[index], decimals);		return newVal;	}		protected void setupSource() {	}		private void setupValues() {		if (value == null || value.length != noOfValues())			value = new double[noOfValues()];				ValueEnumeration e = getEnumeration();		int index = 0;		while (e.hasMoreValues())			value[index++] = e.nextDouble();	}		protected NumVariable getSourceVariable() {		return (NumVariable)data.getVariable(sourceKey);	}//--------------------------------------------------------		abstract protected int getDecimals();	abstract protected ValueEnumeration getEnumeration();	abstract protected int getMinInfluence(int index);	abstract protected int getMaxInfluence(int index);}