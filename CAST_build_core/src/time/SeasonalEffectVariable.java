package time;import dataView.*;public class SeasonalEffectVariable extends NumFunctionVariable {	private DataSet data;	private String residKey;	private int noOfSeasons, decimals;		private boolean initialised = false;	private double[] seasonEffect;		public SeasonalEffectVariable(String theName, DataSet data, String residKey,																													int noOfSeasons, int decimals) {		super(theName);		this.data = data;		this.residKey = residKey;		this.noOfSeasons = noOfSeasons;		this.decimals = decimals;	}		protected void initialise() {		if (!initialised) {			seasonEffect = new double[noOfSeasons];			int noOfVals[] = new int[noOfSeasons];						NumVariable residVar = (NumVariable)data.getVariable(residKey);			ValueEnumeration e = residVar.values();			int seasonIndex = 0;			while (e.hasMoreValues()) {				double nextVal = e.nextDouble();				if (!Double.isNaN(nextVal)) {					seasonEffect[seasonIndex] += nextVal;					noOfVals[seasonIndex] ++;				}				seasonIndex = (seasonIndex + 1) % noOfSeasons;			}						for (int i=0 ; i<noOfSeasons ; i++)				seasonEffect[i] /= noOfVals[i];						initialised = true;		}	}		public int getMaxDecimals() {		return decimals;	}		public int noOfValues() {		NumVariable residVar = (NumVariable)data.getVariable(residKey);		return residVar.noOfValues();	}		public Value valueAt(int index) {		initialise();		return new NumValue(seasonEffect[index % noOfSeasons], decimals);	}		public boolean noteVariableChange(String key) {		if (residKey.equals(key)) {			initialised = false;			return true;		}		else			return false;	}}