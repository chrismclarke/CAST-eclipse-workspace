package inference;import dataView.*;import distn.NormalTable;import coreSummaries.*;public class PropnCIVariable extends IntervalSummaryVariable {	static final private double kMaxT = 10.0;		private String sourceKey;	private int decimals;	private double zValue;		public PropnCIVariable(String theName, double zValue, String sourceKey, int decimals) {		super(theName);		this.zValue = zValue;		this.sourceKey = sourceKey;		this.decimals = decimals;	}		protected IntervalValue evaluateSummary(DataSet sourceData) {		CatVariable y = (CatVariable)sourceData.getVariable(sourceKey);		int n = y.noOfValues();		int count[] = y.getCounts();				double propn = count[0] / (double)n;		double propnSD = Math.sqrt(propn * (1.0 - propn) / n);		return new IntervalValue(propn, propnSD, zValue, decimals);	}		public void setDecimals(int decimals) {		this.decimals = decimals;		super.setDecimals(decimals);	}		public void setT(double zValue) {		this.zValue = Math.min(Math.abs(zValue), kMaxT);		ValueEnumeration e = values();		while (e.hasMoreValues())			((IntervalValue)e.nextValue()).setT(this.zValue);	}		public double getZ() {		return zValue;	}		public void setTFromLevel(double level) {		double newT = NormalTable.quantile(0.5 + level * 0.5);		setT(newT);	}		public double getConfidenceLevel() {		double pLess = NormalTable.cumulative(zValue);		return pLess * 2.0 - 1.0;	}}