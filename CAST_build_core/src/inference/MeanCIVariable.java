package inference;import dataView.*;import distn.*;import coreSummaries.*;public class MeanCIVariable extends IntervalSummaryVariable {	static final private double kMaxT = 10.0;		private String sourceKey;	private int decimals;	private double tValue;	private int df;	private double popnSD;	private boolean knownSD = false;		public MeanCIVariable(String theName, double tValue, int df, String sourceKey, int decimals) {		super(theName);		this.tValue = tValue;		this.sourceKey = sourceKey;		this.decimals = decimals;		this.df = df;	}		public MeanCIVariable(String theName, double zValue, double popnSD, String sourceKey, int decimals) {		super(theName);		knownSD = true;		tValue = zValue;		this.sourceKey = sourceKey;		this.decimals = decimals;		this.popnSD = popnSD;	}		protected IntervalValue evaluateSummary(DataSet sourceData) {		int n = 0;		double sx = 0.0;		double sxx = 0.0;				NumVariable variable = (NumVariable)sourceData.getVariable(sourceKey);		ValueEnumeration e = variable.values();		while (e.hasMoreValues()) {			double val = e.nextDouble();			sx += val;			sxx += val * val;			n ++;		}		double mean = sx / n;		double meanSD = knownSD ? popnSD / Math.sqrt(n)												 :	Math.sqrt((sxx - sx * mean) / (n * (n - 1)));		return new IntervalValue(mean, meanSD, tValue, decimals);	}		public void setDecimals(int decimals) {		this.decimals = decimals;		super.setDecimals(decimals);	}		public void setT(double tValue) {		this.tValue = Math.min(Math.abs(tValue), kMaxT);		ValueEnumeration e = values();		while (e.hasMoreValues())			((IntervalValue)e.nextValue()).setT(this.tValue);	}		public double getT() {		return tValue;	}		public void setTFromLevel(double level) {		double newT = knownSD ? NormalTable.quantile(0.5 + level * 0.5) : TTable.quantile(0.5 + level * 0.5, df);		setT(newT);	}		public void setDF(int df) {		this.df = df;	}		public double getConfidenceLevel() {		double pLess = knownSD ? NormalTable.cumulative(tValue) : TTable.cumulative(tValue, df);		return pLess * 2.0 - 1.0;	}}