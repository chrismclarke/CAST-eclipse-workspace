package inference;import dataView.*;import distn.*;import utils.*;public class TTable2DataSet extends DataSet {	static final private int kTDecimals = 3;		static final private int kMax1DF = 100;	static final private int kMax5DF = 150;	static final private int kMax10DF = 400;	static final private int kMax50DF = 1000;	static final private int kMax100DF = 4000;	static final private int kMax1000DF = 10000;	static final private int kMax10000DF = 100000;		private XSlider dfSlider;		public TTable2DataSet(double pLess, int initialDF) {		int nValues = kMax1DF + (kMax5DF - kMax1DF) / 5 + (kMax10DF - kMax5DF) / 10									+ (kMax50DF - kMax10DF) / 50 + (kMax100DF - kMax50DF) / 100									+ (kMax1000DF - kMax100DF) / 1000 + (kMax10000DF - kMax1000DF) / 10000;				double df[] = new double[nValues];		double t[] = new double[nValues];				int dfi = 0;		for (int i=0 ; i<nValues ; i++) {			dfi += (dfi < kMax1DF) ? 1					: (dfi < kMax5DF) ? 5					: (dfi < kMax10DF) ? 10					: (dfi < kMax50DF) ? 50					: (dfi < kMax100DF) ? 100					: (dfi < kMax1000DF) ? 1000					: 10000;			df[i] = dfi;			t[i] = TTable.quantile(pLess, dfi);		}		NumVariable dfVar = new NumVariable("degrees of freedom =");		dfVar.setValues(df);		dfVar.setDecimals(0);		addVariable("df", dfVar);				NumVariable tVar = new NumVariable("t-value =");		tVar.setValues(t);		tVar.setDecimals(kTDecimals);		addVariable("t", tVar);				setSelection(initialDF);	}		public void setDFSlider(XSlider dfSlider) {		this.dfSlider = dfSlider;	}	//	public synchronized boolean clearSelection() {//		return true;//	}		public synchronized boolean setSelection(int index) {		boolean changed = super.setSelection(index);		if (dfSlider != null)			dfSlider.setValue(index);		return changed;	}}