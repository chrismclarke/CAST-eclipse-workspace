package exercise2;import java.util.*;import dataView.*;public class MeanSD {	private NumValue meanVal, sdVal;		public MeanSD(String paramString, String axisInfo, Random generator) {		StringTokenizer st = new StringTokenizer(axisInfo);		double axisMin = Double.parseDouble(st.nextToken());		double axisMax = Double.parseDouble(st.nextToken());				StringTokenizer pst = new StringTokenizer(paramString, ":");				double minWidthPropn = Double.parseDouble(pst.nextToken());		int decimals = Integer.parseInt(pst.nextToken());		double maxZ = pst.hasMoreTokens() ? Double.parseDouble(pst.nextToken()) : 3.0;				double minWidth = minWidthPropn * (axisMax - axisMin);		double min = axisMin + generator.nextDouble() * (axisMax - axisMin - minWidth);		double max = min + minWidth + generator.nextDouble() * (axisMax - min - minWidth);		double mean = (min + max) * 0.5;		double sd = (max - min) / (2 * maxZ);				double factor = 1.0;		for (int i=0 ; i<decimals ; i++) {			mean *= 10;			sd *= 10;			factor *= 0.1;		}		for (int i=0 ; i<-decimals ; i++) {			mean *= 0.1;			sd *= 0.1;			factor *= 10;		}		double scaledMean = Math.rint(mean) * factor;		double scaledSD = Math.floor(sd) * factor;				if (scaledMean - maxZ * scaledSD < axisMin)		//	rounding can result in +/- 3s being off-axis			scaledMean = Math.ceil(mean) * factor;		else if (scaledMean + maxZ * scaledSD > axisMax)			scaledMean = Math.floor(mean) * factor;				meanVal = new NumValue(scaledMean, decimals);		sdVal =  new NumValue(scaledSD, decimals);	}		public MeanSD(NumValue meanVal, NumValue sdVal) {		this.meanVal = meanVal;		this.sdVal =  sdVal;	}		public NumValue getMean() {		return meanVal;	}		public NumValue getSD() {		return sdVal;	}		public int getDecimals() {		return Math.max(meanVal.decimals, sdVal.decimals);	}		public boolean equals(Object obj) {		if (obj == null || !(obj instanceof MeanSD))			return false;					MeanSD objValue = (MeanSD)obj;		return meanVal.equals(objValue.meanVal) && sdVal.equals(objValue.sdVal);	}}