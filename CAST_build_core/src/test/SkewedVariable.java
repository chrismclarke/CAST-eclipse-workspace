package test;import dataView.*;import distn.*;public class SkewedVariable extends NumFunctionVariable {	static final private double kSDMax = 3.0;		private NumVariable baseVariable;	private String baseKey, yKey;	private double maxValue;	private double changeP, mean, lowSD, highSD;	private int decimals;		public SkewedVariable(String theName, NumVariable baseVariable, String baseKey, String yKey,																						int decimals, double maxValue) {		super(theName);		this.baseVariable = baseVariable;		this.baseKey = baseKey;		this.yKey = yKey;		this.maxValue = maxValue;		this.decimals = decimals;		setChangeP(0.5);	}		public void setChangeP(double changeP) {		this.changeP = changeP;		mean = maxValue * changeP;		lowSD = mean / kSDMax;		highSD = (maxValue - mean) / kSDMax;	}//--------------------------------------------------------		public boolean noteVariableChange(String key) {		if (baseKey.equals(key)) {			clearSortedValues();			return true;		}		else {			if (yKey.equals(key))				clearSortedValues();			return false;		}	}		public int getMaxDecimals() {		return decimals;	}		public int noOfValues() {		return baseVariable.noOfValues();	}		public Value valueAt(int index) {		double baseVal = baseVariable.doubleValueAt(index);				double newVal;		if (baseVal < changeP) {			double newP = 0.5 * baseVal / changeP;			newVal = NormalDistnVariable.stdQuantile(newP) * lowSD + mean;		}		else {			double newP = 0.5 + 0.5 * (baseVal - changeP) / (1.0 - changeP);			newVal = NormalDistnVariable.stdQuantile(newP) * highSD + mean;		}				return new NumValue(newVal, decimals);	}}