package axis;import java.awt.*;import dataView.*;public class AxisLayout implements LayoutManager {	private Axis leftAxis, leftAxis2, rightAxis, topAxis, bottomAxis, bottomAxis2;	private DataView graph;	private MarginalDataView leftMargin, bottomMargin, rightMargin;	private int leftBorder, rightBorder, topBorder, bottomBorder;		public AxisLayout() {		leftAxis = leftAxis2 = rightAxis = topAxis = bottomAxis = bottomAxis2 = null;		graph = null;	}		public void addLayoutComponent(String name, Component comp) {		try {			if (name.equals("Center")) {				graph = (DataView)comp;			}			else if (name.equals("LeftMargin")) {				leftMargin = (MarginalDataView)comp;			}			else if (name.equals("RightMargin")) {				rightMargin = (MarginalDataView)comp;			}			else if (name.equals("BottomMargin")) {				bottomMargin = (MarginalDataView)comp;			}			else {				Axis theAxis = (Axis)comp;				if (name.equals("Left")) {					theAxis.setSide(true);					if (leftAxis == null)						leftAxis = theAxis;					else if (leftAxis2 == null)						leftAxis2 = theAxis;				}				else if (name.equals("Bottom")) {					theAxis.setSide(true);					if (bottomAxis == null)						bottomAxis = theAxis;					else if (bottomAxis2 == null)						bottomAxis2 = theAxis;				}				else if (name.equals("Right")) {					theAxis.setSide(false);					if (rightAxis == null)						rightAxis = theAxis;				}				else if (name.equals("Top")) {					theAxis.setSide(false);					if (topAxis == null)						topAxis = theAxis;				}			}		} catch (ClassCastException e) {			System.err.println("Bad component passed to layout");		}	}		public void removeLayoutComponent(Component comp) {		if (comp == graph)			graph = null;		else if (comp == leftMargin)			leftMargin = null;		else if (comp == rightMargin)			rightMargin = null;		else if (comp == bottomMargin)			bottomMargin = null;		else if (comp == leftAxis)			leftAxis = null;		else if (comp == leftAxis2)			leftAxis2 = null;		else if (comp == rightAxis)			rightAxis = null;		else if (comp == topAxis)			topAxis = null;		else if (comp == bottomAxis)			bottomAxis = null;		else if (comp == bottomAxis2)			bottomAxis2 = null;	}		public Dimension preferredLayoutSize(Container parent) {		return new Dimension(300, 300);				//		this probably won't get called by Applet	}		public Dimension minimumLayoutSize(Container parent) {		return new Dimension(30, 30);				//		this probably won't get called by Applet	}		public void layoutContainer(Container parent) {		Insets insets = parent.getInsets();		int maxWidth = parent.getSize().width - (insets.left + insets.right);		int maxHeight = parent.getSize().height - (insets.top + insets.bottom);				leftBorder = 0;		rightBorder = 0;		if (leftAxis != null) {			leftAxis.findAxisWidth();			leftBorder = leftAxis.axisWidth;			if (leftAxis2 != null) {				leftAxis2.findAxisWidth();				leftBorder += leftAxis2.axisWidth;			}		}				if (leftMargin != null) {			Insets marginInsets = leftMargin.getViewBorder();			leftBorder += (leftMargin.minDisplayWidth() + marginInsets.left + marginInsets.right);		}				if (rightMargin != null) {			Insets marginInsets = rightMargin.getViewBorder();			rightBorder += (rightMargin.minDisplayWidth() + marginInsets.left + marginInsets.right);		}					if (rightAxis != null) {			rightAxis.findAxisWidth();			rightBorder = rightAxis.axisWidth;		}		if (graph != null) {			leftBorder += graph.getViewBorder().left;			rightBorder += graph.getViewBorder().right;		}				boolean adjust1 = (bottomAxis != null);		boolean adjust2 = (bottomAxis2 != null);		boolean adjust3 = (topAxis != null);		while (adjust1 || adjust2 || adjust3) {			if (adjust1 && adjustHorizBorders(bottomAxis, maxWidth)) {				adjust2 = (bottomAxis2 != null);				adjust3 = (topAxis != null);			}			adjust1 = false;			if (adjust2 && adjustHorizBorders(bottomAxis2, maxWidth)) {				adjust1 = (bottomAxis != null);				adjust3 = (topAxis != null);			}			adjust2 = false;			if (adjust3 && adjustHorizBorders(topAxis, maxWidth)) {				adjust1 = (bottomAxis != null);				adjust2 = (bottomAxis2 != null);			}			adjust3 = false;		}				bottomBorder = graph.getViewBorder().bottom;		topBorder = graph.getViewBorder().top;		if (bottomAxis != null) {			bottomAxis.findAxisWidth();			bottomBorder += bottomAxis.axisWidth;		}		if (bottomAxis2 != null) {			bottomAxis2.findAxisWidth();			bottomBorder += bottomAxis2.axisWidth;		}		if (bottomMargin != null) {			Insets marginInsets = bottomMargin.getViewBorder();			bottomBorder += (bottomMargin.minDisplayWidth() + marginInsets.top + marginInsets.bottom);		}		if (topAxis != null) {			topAxis.findAxisWidth();			topBorder += topAxis.axisWidth;		}				adjust1 = (leftAxis != null);		adjust2 = (leftAxis2 != null);		adjust3 = (rightAxis != null);		while (adjust1 || adjust2 || adjust3) {			if (adjust1 && adjustVertBorders(leftAxis, maxHeight)) {				adjust2 = (leftAxis2 != null);				adjust3 = (rightAxis != null);			}			adjust1 = false;			if (adjust2 && adjustVertBorders(leftAxis2, maxHeight)) {				adjust1 = (leftAxis != null);				adjust3 = (rightAxis != null);			}			adjust2 = false;			if (adjust3 && adjustVertBorders(rightAxis, maxHeight)) {				adjust1 = (leftAxis != null);				adjust2 = (leftAxis2 != null);			}			adjust3 = false;		}				int graphLeft = insets.left + leftBorder;		int graphRight = insets.left + maxWidth - rightBorder;		int graphTop = insets.top + topBorder;		int graphBottom = insets.top + maxHeight - bottomBorder;				if (graph != null) {			Insets gb = graph.getViewBorder();			graphLeft -= gb.left;			graphTop -= gb.top;			graphRight += gb.right;			graphBottom += gb.bottom;			graph.setBounds(graphLeft, graphTop, graphRight - graphLeft, graphBottom - graphTop);		}				if (topAxis != null)			topAxis.setBounds(insets.left + topAxis.lowBorder - topAxis.lowBorderUsed,							graphTop - topAxis.axisWidth,							topAxis.axisLength + topAxis.lowBorderUsed + topAxis.highBorderUsed,							topAxis.axisWidth);		if (rightAxis != null)			rightAxis.setBounds(graphRight,							insets.top + rightAxis.highBorder - rightAxis.highBorderUsed,							rightAxis.axisWidth,							rightAxis.axisLength + rightAxis.lowBorderUsed + rightAxis.highBorderUsed);				int originalGraphBottom = graphBottom;		if (bottomMargin != null) {			Insets marginInsets = bottomMargin.getViewBorder();			Insets graphInsets = graph.getViewBorder();			int itemWidth = bottomMargin.minDisplayWidth() + marginInsets.top + marginInsets.bottom;			int itemLength = graphRight - graphLeft - (graphInsets.left + graphInsets.right)																	+ (marginInsets.left + marginInsets.right);			bottomMargin.setBounds(graphLeft - marginInsets.left + graphInsets.left, graphBottom,										itemLength, itemWidth);			graphBottom += itemWidth;		}		if (leftMargin != null) {			Insets marginInsets = leftMargin.getViewBorder();			Insets graphInsets = graph.getViewBorder();			int itemWidth = leftMargin.minDisplayWidth() + marginInsets.left + marginInsets.right;			int itemLength = originalGraphBottom - graphTop - (graphInsets.top + graphInsets.bottom)																		+ (marginInsets.top + marginInsets.bottom);			leftMargin.setBounds(graphLeft - itemWidth, graphTop - marginInsets.top + graphInsets.top,										itemWidth, itemLength);			graphLeft -= itemWidth;		}				if (rightMargin != null) {			Insets marginInsets = rightMargin.getViewBorder();			Insets graphInsets = graph.getViewBorder();			int itemWidth = rightMargin.minDisplayWidth() + marginInsets.left + marginInsets.right;			int itemLength = originalGraphBottom - graphTop - (graphInsets.top + graphInsets.bottom)																		+ (marginInsets.top + marginInsets.bottom);			rightMargin.setBounds(graphRight, graphTop - marginInsets.top + graphInsets.top,										itemWidth, itemLength);			graphRight += itemWidth;		}				if (bottomAxis != null) {			bottomAxis.setBounds(insets.left + bottomAxis.lowBorder - bottomAxis.lowBorderUsed,							graphBottom,							bottomAxis.axisLength + bottomAxis.lowBorderUsed + bottomAxis.highBorderUsed,							bottomAxis.axisWidth);			graphBottom += bottomAxis.axisWidth;		}		if (bottomAxis2 != null) {			bottomAxis2.setBounds(insets.left + bottomAxis2.lowBorder - bottomAxis2.lowBorderUsed,							graphBottom,							bottomAxis2.axisLength + bottomAxis2.lowBorderUsed + bottomAxis2.highBorderUsed,							bottomAxis2.axisWidth);			graphBottom += bottomAxis2.axisWidth;		}				if (leftAxis != null) {			leftAxis.setBounds(graphLeft - leftAxis.axisWidth,							insets.top + leftAxis.highBorder - leftAxis.highBorderUsed,							leftAxis.axisWidth,							leftAxis.axisLength + leftAxis.lowBorderUsed + leftAxis.highBorderUsed);			graphLeft -= leftAxis.axisWidth;		}		if (leftAxis2 != null) {			leftAxis2.setBounds(graphLeft - leftAxis2.axisWidth,							insets.top + leftAxis2.highBorder - leftAxis2.highBorderUsed,							leftAxis2.axisWidth,							leftAxis2.axisLength + leftAxis2.lowBorderUsed + leftAxis2.highBorderUsed);			graphLeft -= leftAxis2.axisWidth;		}	}		private boolean adjustHorizBorders(Axis theAxis, int maxWidth) {		if (theAxis != null) {			theAxis.findLengthInfo(maxWidth, leftBorder, rightBorder);			int newLeftBorder = theAxis.lowBorder;			int newRightBorder = theAxis.highBorder;			if (newLeftBorder > leftBorder || newRightBorder > rightBorder) {				leftBorder = newLeftBorder;				rightBorder = newRightBorder;				return true;			}		}		return false;	}		private boolean adjustVertBorders(Axis theAxis, int maxHeight) {		if (theAxis != null) {			theAxis.findLengthInfo(maxHeight, bottomBorder,topBorder);			int newBottomBorder = theAxis.lowBorder;			int newTopBorder = theAxis.highBorder;			if (newBottomBorder > bottomBorder || newTopBorder > topBorder) {				bottomBorder = newBottomBorder;				topBorder = newTopBorder;				return true;			}		}		return false;	}		public String toString() {		return getClass().getName();	}}