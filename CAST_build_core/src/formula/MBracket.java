package formula;import java.awt.*;public class MBracket extends MFormula {	static final private int kBracketExtraHeight = 2;	static final private int kMinHalfStraight = 5;	static final private int kLeftLabelGap = 3;		static final private int bracketPix[] = {1, 1, 1, 2, 3, 4, 7};		private MFormula val;	private MFormula leftLabel = null;			//		Mainly for "Pr(...)"	private int leftLabelWidth;		private int bracketCurveHeight, curveWidth;		public MBracket(MFormula leftLabel, MFormula val, FormulaContext context) {		super(context);				this.leftLabel = leftLabel;		this.val = val;				if (leftLabel != null)			add(leftLabel);		add(val);	}		public MBracket(MFormula val, FormulaContext context) {		this(null, val, context);	}		public void reinitialise() {		val.reinitialise();		super.reinitialise();	}		protected void doInitialisation(Graphics g) {		super.doInitialisation(g);				if (leftLabel !=  null)			leftLabel.initialise(g);		val.initialise(g);				layoutAscent = val.layoutAscent;		layoutDescent = val.layoutDescent;		if (leftLabel != null) {			layoutAscent = Math.max(layoutAscent, leftLabel.layoutAscent);			layoutDescent = Math.max(layoutDescent, leftLabel.layoutDescent);		}		layoutAscent += kBracketExtraHeight;		layoutDescent += kBracketExtraHeight;		int halfHeight = (layoutAscent + layoutDescent) / 2;				bracketCurveHeight = 0;		curveWidth = 0;		for (int i=0 ; i<bracketPix.length ; i++) {			if (halfHeight - bracketPix[i] < kMinHalfStraight)				break;			curveWidth = i + 1;			bracketCurveHeight += bracketPix[i];			halfHeight -= bracketPix[i];		}				layoutWidth = val.layoutWidth + 2 * (curveWidth + 1);		if (leftLabel != null) {			leftLabelWidth = leftLabel.layoutWidth + kLeftLabelGap;			layoutWidth += leftLabelWidth;		}	}		public void layoutContainer(Container parent) {		initialise(context.getGraphics());		int horizStart = (getSize().width - layoutWidth) / 2;		int baseline = (getSize().height + layoutAscent - layoutDescent) / 2;				if (leftLabel != null) {			leftLabel.setBounds(horizStart, baseline - leftLabel.layoutAscent, leftLabel.layoutWidth,															leftLabel.layoutAscent + leftLabel.layoutDescent);			horizStart += leftLabel.layoutWidth + kLeftLabelGap;		}				horizStart += curveWidth;				val.setBounds(horizStart, baseline - val.layoutAscent, val.layoutWidth,															val.layoutAscent + val.layoutDescent);	}		protected void paintAroundItems(Graphics g) {		int horizStart = (getSize().width - layoutWidth) / 2;		int baseline = (getSize().height + layoutAscent - layoutDescent) / 2;				if (leftLabel != null)			horizStart += leftLabel.layoutWidth + kLeftLabelGap;				int bracketTop = baseline - layoutAscent;		int leftArcLeft = horizStart;		int rightArcRight = horizStart + layoutWidth - leftLabelWidth;				int drawBracketWidth = curveWidth + 1;				int topVert = bracketTop;		int bottomVert = bracketTop + layoutAscent + layoutDescent - 1;		int horiz = leftArcLeft + drawBracketWidth - 1;		for (int i=0 ; i<curveWidth ; i++) {			int oldTopVert = topVert;			int oldBottomVert = bottomVert;			topVert += bracketPix[i];			bottomVert -= bracketPix[i];			g.drawLine(horiz, oldTopVert, horiz - 1, topVert);			g.drawLine(horiz - 1, bottomVert, horiz, oldBottomVert);			horiz --;		}		g.drawLine(leftArcLeft, bracketTop + bracketCurveHeight, leftArcLeft,									bracketTop + layoutAscent + layoutDescent - bracketCurveHeight - 1);				topVert = bracketTop;		bottomVert = bracketTop + layoutAscent + layoutDescent - 1;		horiz = rightArcRight - drawBracketWidth;		for (int i=0 ; i<curveWidth ; i++) {			int oldTopVert = topVert;			int oldBottomVert = bottomVert;			topVert += bracketPix[i];			bottomVert -= bracketPix[i];			g.drawLine(horiz, oldTopVert, horiz + 1, topVert);			g.drawLine(horiz + 1, bottomVert, horiz, oldBottomVert);			horiz ++;		}		g.drawLine(rightArcRight - 1, bracketTop + bracketCurveHeight, rightArcRight - 1,									bracketTop + layoutAscent + layoutDescent - bracketCurveHeight - 1);			}}