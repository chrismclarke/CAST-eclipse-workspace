package formula;import java.awt.*;public class Square extends FormulaPanel {		static final private String kTwoString = "2";	static final private int kSuperscriptGap = 2;	static final private int kSuperscriptRise = 5;		private FormulaPanel val;		public Square(FormulaPanel val, FormulaContext context) {		super(context);				this.val = val;				val.setParent(this);		add(val);	}		public void reinitialise() {		val.reinitialise();		super.reinitialise();	}		protected boolean initialise(Graphics g) {		if (super.initialise(g)) {			val.initialise(val.getGraphics());			layoutWidth = val.layoutWidth + kSuperscriptGap + g.getFontMetrics().stringWidth(kTwoString);						layoutAscent = Math.max(val.layoutAscent, kSuperscriptRise + ascent);			layoutDescent = val.layoutDescent;			return true;		}		else			return false;	}		public void layoutContainer(Container parent) {		initialise(getGraphics());		int horizStart = (getSize().width - layoutWidth) / 2;		int baseline = (getSize().height + layoutAscent - layoutDescent) / 2;				val.setBounds(horizStart, baseline - val.layoutAscent, val.layoutWidth,															val.layoutAscent + val.layoutDescent);	}		protected void paintAroundItems(Graphics g) {		int horizStart = (getSize().width - layoutWidth) / 2;		int baseline = (getSize().height + layoutAscent - layoutDescent) / 2;				int gap = val instanceof Edit ? -1 : kSuperscriptGap;		horizStart += val.layoutWidth + gap;		g.drawString(kTwoString, horizStart, baseline - kSuperscriptRise);	}		protected double evaluateFormula() {		double v = val.evaluateFormula();		return v * v;	}}