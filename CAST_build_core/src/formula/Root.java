package formula;import java.awt.*;public class Root extends FormulaPanel {		static final private int kRootLeftWidth = 11;	static final private int kRootRightWidth = 3;	static final private int kRootExtraHeight = 3;		private FormulaPanel val;		public Root(FormulaPanel val, FormulaContext context) {		super(context);				this.val = val;				val.setParent(this);		add(val);	}		public void reinitialise() {		val.reinitialise();		super.reinitialise();	}		protected boolean initialise(Graphics g) {		if (super.initialise(g)) {			val.initialise(val.getGraphics());						layoutWidth = val.layoutWidth + kRootLeftWidth + kRootRightWidth;						layoutAscent = val.layoutAscent + kRootExtraHeight;			layoutDescent = val.layoutDescent + kRootExtraHeight;			return true;		}		else			return false;	}		public void layoutContainer(Container parent) {		initialise(getGraphics());		int horizStart = (getSize().width - layoutWidth) / 2;		int baseline = (getSize().height + layoutAscent - layoutDescent) / 2;				horizStart += kRootLeftWidth;				val.setBounds(horizStart, baseline - val.layoutAscent, val.layoutWidth,															val.layoutAscent + val.layoutDescent);	}		protected void paintAroundItems(Graphics g) {		int horizStart = (getSize().width - layoutWidth) / 2;		int baseline = (getSize().height + layoutAscent - layoutDescent) / 2;				int rootTop = baseline - layoutAscent;		int rootBottom = baseline + layoutDescent;		g.drawLine(horizStart, rootBottom - 7, horizStart + 1, rootBottom - 6);		g.drawLine(horizStart + 2, rootBottom - 5, horizStart + 2, rootBottom - 4);		g.drawLine(horizStart + 3, rootBottom - 3, horizStart + 3, rootBottom - 3);		g.drawLine(horizStart + 4, rootBottom - 1, horizStart + 8, rootTop);		g.drawLine(horizStart + 8, rootTop, horizStart + layoutWidth - 1, rootTop);		g.drawLine(horizStart + layoutWidth - 1, rootTop, horizStart + layoutWidth - 1, rootTop + 3);	}		protected double evaluateFormula() {		double v = val.evaluateFormula();		return Math.sqrt(v);	}}