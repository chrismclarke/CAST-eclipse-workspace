package curveInteract;import java.awt.*;import dataView.*;import models.*;public class SsqDiffComponentVariable extends CoreComponentVariable {	static final public int TOTAL = 0;	static final public int X_AND_Z = 1;	static final public int X2_AFTER_XZ = 2;	static final public int Z2_AFTER_XZ = 3;	static final public int RESIDUAL = 4;		static final public Color kTotalColor = Color.black;	static final public Color kResidualColor = new Color(0x3333FF);		//	blue	static final public Color kCompColor[] = {Color.red, new Color(0x336600),																										new Color(0x9900FF), Color.orange};		static public void addComponentsToData(DataSet data, String[] explanKey,										String yKey, String[] lsKey, String[] compName, int params[],										int componentDecimals) {		data.addVariable("total", new BasicComponentVariable(compName[0], data, explanKey,												yKey, lsKey[lsKey.length - 1], BasicComponentVariable.TOTAL,												componentDecimals));		data.addVariable("resid", new BasicComponentVariable(compName[compName.length - 1],																			data, explanKey, yKey, lsKey[lsKey.length - 1],																			BasicComponentVariable.RESIDUAL, componentDecimals));		for (int i=0 ; i<lsKey.length-1 ; i++) {			SsqDiffComponentVariable comp = new SsqDiffComponentVariable(compName[i+1], data,																explanKey, lsKey[i], lsKey[i+1], params[i+1] - params[i],																componentDecimals);			data.addVariable("comp" + i, comp);		}	}		static public Color[] getComponentColors(int nComponents) {		Color c[] = new Color[nComponents];		c[0] = kTotalColor;		c[nComponents - 1] = kResidualColor;		for (int i=0 ; i<nComponents-2 ; i++)			c[i+1] = kCompColor[i];		return c;	}		static public String[] getComponentKeys(int nComponents) {		String s[] = new String[nComponents];		s[0] = "total";		s[nComponents - 1] = "resid";		for (int i=0 ; i<nComponents-2 ; i++)			s[i+1] = "comp" + i;		return s;	}		private int df;	private String[] explanKey;	private String[] complexExplanKey;	private String complexLSKey;		private Value tempX[];	private Value tempXComplex[];		public SsqDiffComponentVariable(String theName, DataSet data, String[] explanKey,									String simplerLSKey, String complexLSKey, int df, int decimals) {		super(theName, data, "dummy", simplerLSKey, decimals);		this.explanKey = explanKey;		this.complexLSKey = complexLSKey;		this.df = df;				tempX = new Value[explanKey.length];	}		public SsqDiffComponentVariable(String theName, DataSet data, String[] explanKey,									String simplerLSKey, String[] complexExplanKey, String complexLSKey,									int df, int decimals) {		this(theName, data, explanKey, simplerLSKey, complexLSKey, df, decimals);				this.complexExplanKey = complexExplanKey;		tempXComplex = new Value[complexExplanKey.length];	}//--------------------------------------------------------		public boolean noteVariableChange(String key) {		for (int i=0 ; i<explanKey.length ; i++)			if (explanKey[i].equals(key))				return true;				if (complexExplanKey != null)			for (int i=0 ; i<complexExplanKey.length ; i++)				if (complexExplanKey[i].equals(key))					return true;		return false;	}		public int noOfValues() {		return ((Variable)data.getVariable(explanKey[0])).noOfValues();	}		public Value valueAt(int index) {		for (int i=0 ; i<explanKey.length ; i++) {			Variable xVar = (NumVariable)data.getVariable(explanKey[i]);			tempX[i] = xVar.valueAt(index);		}				if (complexExplanKey != null)			for (int i=0 ; i<complexExplanKey.length ; i++) {				Variable xVar = (Variable)data.getVariable(complexExplanKey[i]);				tempXComplex[i] = xVar.valueAt(index);			}			else {				tempXComplex = new Value[tempX.length];				for (int i=0 ; i<tempX.length ; i++)					tempXComplex[i] = tempX[i];			}				CoreModelVariable simplerModel = (CoreModelVariable)data.getVariable(modelKey);		CoreModelVariable complexModel = (CoreModelVariable)data.getVariable(complexLSKey);				double simplerFit = simplerModel.evaluateMean(tempX);		double complexFit = complexModel.evaluateMean(tempXComplex);					return new NumValue(simplerFit - complexFit, decimals);	}		public int getDF() {		return df;	}}