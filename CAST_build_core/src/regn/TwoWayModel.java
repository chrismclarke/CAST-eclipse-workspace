package regn;import dataView.*;public class TwoWayModel extends CoreVariable {	private double b0, b1;		public TwoWayModel(String name) {		super(name);	}		public double predict(double val, boolean straightNotInv) {		if (straightNotInv)			return b0 + b1 * val;		else if (b1 == 0.0)			return Double.POSITIVE_INFINITY;		else if (Double.isInfinite(b1))			return b0;		else			return (val - b0) / b1;	}		public void initialise(DataSet data, String xKey, String yKey) {		ValueEnumeration xe = ((NumVariable)data.getVariable(xKey)).values();		ValueEnumeration ye = ((NumVariable)data.getVariable(yKey)).values();		double sx = 0.0;		double sy = 0.0;		double sxx = 0.0;		double syy = 0.0;		int n = 0;		while (xe.hasMoreValues() && ye.hasMoreValues()) {			double x = xe.nextDouble();			double y = ye.nextDouble();			if (!Double.isNaN(x) && !Double.isNaN(y)) {				sx += x;				sy += y;				sxx += x * x;				syy += y * y;				n ++;			}		}		sxx -= sx * sx / n;		syy -= sy * sy / n;				b1 = Math.sqrt(syy / sxx);		b0 = (sy - sx * b1) / n;	}		public void setToBest(DataSet data, String xKey, String yKey, boolean straightNotInv) {		ValueEnumeration xe = ((NumVariable)data.getVariable(xKey)).values();		ValueEnumeration ye = ((NumVariable)data.getVariable(yKey)).values();		double sx = 0.0;		double sy = 0.0;		double sxx = 0.0;		double sxy = 0.0;		double syy = 0.0;		int n = 0;		while (xe.hasMoreValues() && ye.hasMoreValues()) {			double x = xe.nextDouble();			double y = ye.nextDouble();			if (!Double.isNaN(x) && !Double.isNaN(y)) {				sx += x;				sy += y;				sxx += x * x;				sxy += x * y;				syy += y * y;				n ++;			}		}		sxx -= sx * sx / n;		sxy -= sx * sy / n;		syy -= sy * sy / n;				if (straightNotInv) {			b1 = sxy / sxx;			b0 = (sy - sx * b1) / n;		}		else {			double c1 = sxy / syy;			double c0 = (sx - sy * c1) / n;						b0 = -c0 / c1;			b1 = 1.0 / c1;		}	}		public void setParameters(double b0, double b1) {		this.b0 = b0;		this.b1 = b1;	}}