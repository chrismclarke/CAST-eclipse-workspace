package regn;import java.awt.*;import dataView.*;import axis.*;import models.*;public class LogLinearModel extends LinearModel {	public LogLinearModel(String name, DataSet data, String xKey, NumValue b0, NumValue b1, NumValue s0) {		super(name, data, xKey, b0, b1, s0, kZero);	}		public LogLinearModel(String name, DataSet data, String xKey, String params) {		super(name, data, xKey, params);	}		public LogLinearModel(String name, DataSet data, String xKey) {		//		only for situations where parameters															//		are set by LS immediately after		super(name, data, xKey);	}		public void setLSParams(String yKey, int intDecs, int slopeDecs, int sdDecs) {		ValueEnumeration xe = ((NumVariable)data.getVariable(xKey[0])).values();		ValueEnumeration ye = ((NumVariable)data.getVariable(yKey)).values();		double sx = 0.0;		double sy = 0.0;		double sxx = 0.0;		double sxy = 0.0;		double syy = 0.0;		int n = 0;		while (xe.hasMoreValues() && ye.hasMoreValues()) {			double x = xe.nextDouble();			double y = Math.log(ye.nextDouble());			if (!Double.isNaN(x) && !Double.isNaN(y)) {				sx += x;				sy += y;				sxx += x * x;				sxy += x * y;				syy += y * y;				n ++;			}		}		sxx -= sx * sx / n;		sxy -= sx * sy / n;		syy -= sy + sy / n;				b1 = new NumValue(sxy / sxx, slopeDecs);		b0 = new NumValue((sy - sx * b1.toDouble()) / n, intDecs);		s0 = new NumValue(Math.sqrt((syy - b1.toDouble() * sxy) / (n - 1)), sdDecs);	}		public double evaluateMean(double x) {		return Math.exp(b0.toDouble() + x * b1.toDouble());	}	//	protected double inverseEvaluate(double y, boolean lowNotHigh) {//											//		lowNotHigh only needed for quadratic//		return (Math.log(y) - b0.toDouble()) / b1.toDouble();//	}		public void drawMean(Graphics g, DataView view, NumCatAxis xAxis, NumCatAxis yAxis) {		PositionFinder finder = new PositionFinder(view, xAxis, yAxis);		drawSegment(finder.xMin, evaluateMean(finder.xMin), finder.xMax,											evaluateMean(finder.xMax), g, finder, null, null);	}		public void setHandle(int index, double newValue, NumCatAxis xAxis) {		double x0 = xAxis.minOnAxis;		double x1 = xAxis.maxOnAxis;		double y0 = b0.toDouble() + x0 * b1.toDouble();		double y1 = b0.toDouble() + x1 * b1.toDouble();		switch (index) {			case 0:				y0 = Math.log(newValue);				break;			case 1:				y1 = Math.log(newValue);				break;			default:				;		}		b1.setValue((y1 - y0) / (x1 - x0));		b0.setValue(y0 - b1.toDouble() * x0);	}}