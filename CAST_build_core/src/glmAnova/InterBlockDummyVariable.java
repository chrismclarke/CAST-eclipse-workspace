package glmAnova;import dataView.*;public class InterBlockDummyVariable extends NumFunctionVariable {	static public void addDummyVariables(DataSet data, String catKey, String blockKey) {		CatVariable catVar = (CatVariable)data.getVariable(catKey);		int nCats = catVar.noOfCategories();				for (int i=1 ; i<nCats ; i++) {			InterBlockDummyVariable dummyVar = new InterBlockDummyVariable(catVar.getLabel(i).toString(),																						data, catKey, blockKey, i);			data.addVariable("interDummy" + i, dummyVar);		}	}		private String catKey, blockKey;	private int catLevel;	private CatVariable blockVar, catVar;		private NumValue catPropnInBlock[];		public InterBlockDummyVariable(String theName, DataSet data, String catKey, String blockKey,																																	int catLevel) {		super(theName);		this.catKey = catKey;		this.blockKey = blockKey;		this.catLevel = catLevel;		catVar = (CatVariable)data.getVariable(catKey);		blockVar = (CatVariable)data.getVariable(blockKey);				countCatsInBlocks();	}		private void countCatsInBlocks() {		Value targetCat = catVar.getLabel(catLevel);		int nBlocks = blockVar.noOfCategories();		int count[] = new int[nBlocks];		int total[] = new int[nBlocks];				for (int i=0 ; i<catVar.noOfValues() ; i++) {			int block = blockVar.getItemCategory(i);			total[block] ++;			if (targetCat == catVar.valueAt(i))				count[block] ++;		}				catPropnInBlock = new NumValue[nBlocks];		for (int i=0 ; i<nBlocks ; i++)			catPropnInBlock[i] = new NumValue(count[i] / (double)total[i], 12);	}//--------------------------------------------------------	public int getMaxDecimals() {		return 0;	}		public int noOfValues() {		return blockVar.noOfValues();	}		public Value valueAt(int index) {		int block = blockVar.getItemCategory(index);		return catPropnInBlock[block];	}//--------------------------------------------------------		public boolean noteVariableChange(String key) {		if (key.equals(catKey) || key.equals(blockKey))			countCatsInBlocks();		return false;	}}