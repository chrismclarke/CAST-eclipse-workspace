package simulation;import dataView.*;import random.*;public class OneRandomVariable extends CoreVariable implements SampleInterface {	private DataSet data;	private String distnKey;		private RandomRectangular generator;	private long currentSeed, nextSeed;	private double value = Double.NaN;		public OneRandomVariable(String theName, DataSet data, String distnKey) {		super(theName);		this.data = data;		this.distnKey = distnKey;		generator = new RandomRectangular(1, 0.0, 1.0);		nextSeed = generator.nextLong();	}		public void setSampleSize(int n) {		//		sample size must be 1	}		public long generateNextSample() {		currentSeed = nextSeed;		generator.setSeed(nextSeed);		value = generator.generateOne();		nextSeed = generator.nextLong();				data.setSelection(getIndex() - 1);				return currentSeed;	}		public boolean setSampleFromSeed(long newSeed) {		if (currentSeed == newSeed)			return false;		currentSeed = newSeed;		generator.setSeed(newSeed);		value = generator.generateOne();				data.setSelection(getIndex() - 1);				return true;	}		public void setNextSeed(long nextSeed) {		//	only used when setting up exercise with fixed seed		this.nextSeed = nextSeed;	}		public void clearSample() {		value = Double.NaN;	}		public double getPseudo() {		return value;	}		public int getIndex() {		NumVariable distn = (NumVariable) data.getVariable(distnKey);		int noOfValues = distn.noOfValues();		int index = Math.min(noOfValues, 1 + (int)Math.floor(value * noOfValues));		return index;	}		public NumValue getValue() {		NumVariable distn = (NumVariable) data.getVariable(distnKey);		int noOfValues = distn.noOfValues();		int index = Math.min(noOfValues, 1 + (int)Math.floor(value * noOfValues));		return (NumValue)distn.valueAt(index - 1);	}}