package simulation;import distn.*;public class CumNormalPlusDistnInfo extends DistnInfo {					//		DistnInfo sub-classes are usually intended to allow smooth drawing of					//		p.d.f.s, but this sub-class allows the same basic methods to be used					//		to draw c.d.f.s smoothly		private NormalPlusDistnVariable distn;	private double a, b;		public CumNormalPlusDistnInfo(NormalPlusDistnVariable distn) {		super();		this.distn = distn;		a = distn.getA();				//		we need local copies for testing with sameParams()		b = distn.getB();	}		public double zMin() {		return -4.0;	}		public double zMax() {		return Math.max(4.0, distn.getZMax());	}		public double zMode() {		return 0.0;			//		the maximum is really at zMax, but if it is set to 0.0								//		the lower half of the cdf is drawn identically for all a & b//		return zMax();	}		public boolean isSymmetric() {		return false;	}		public double getDensity(double z) {		return distn.getStdCumulativeProb(z);	}		public boolean sameParams(ContinDistnVariable v) {		if (!(v instanceof NormalPlusDistnVariable))			return false;		else {			NormalPlusDistnVariable other = (NormalPlusDistnVariable)v;			return a == other.getA() && b == other.getB();		}	}}