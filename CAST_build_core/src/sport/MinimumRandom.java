package sport;import random.*;public class MinimumRandom extends RandomContinuous {	static final public int SIMPLE_ALGORITHM = 0;	static final public int FAST_ALGORITHM = 1;		private int[] sampleSize;	private int algorithm = SIMPLE_ALGORITHM;		public MinimumRandom(int[] sampleSize) {		super(sampleSize.length);		this.sampleSize = sampleSize;	}		public void setAlgorithm (int algorithm) {		this.algorithm = algorithm;	}		public double getQuantile(double p) {		// This was an abstract class that must be defined		return 0.0;										//	even though it is never used	}		public double[] generate() {		double vals[] = new double[count];		for (int i=0 ; i<count ; i++)			if (algorithm == SIMPLE_ALGORITHM) {				int n = sampleSize[i];				double result = Double.POSITIVE_INFINITY;				for (int j=0 ; j<n ; j++) {					double nextVal = nextDouble();					if (nextVal < result)						result = nextVal;				}				vals[i] = result;			}			else				vals[i] = 1.0 - Math.pow(nextDouble(), 1.0 / sampleSize[i]);		return vals;	}}