package sport;import java.util.*;import dataView.*;import distn.*;public class HandicapScoreVariable extends NumFunctionVariable {	private double targetVal, targetCumProb;		private NumVariable actualVariable;	private MeanAbilityVariable abilityVariable;	private int displayDecimals;	private double targetQuantile;		public HandicapScoreVariable(String theName, NumVariable actualVariable,							MeanAbilityVariable abilityVariable, String handicapParam,							int displayDecimals) {		super(theName);		this.actualVariable = actualVariable;		this.abilityVariable = abilityVariable;		this.displayDecimals = displayDecimals;				StringTokenizer st = new StringTokenizer(handicapParam);		targetVal = Double.parseDouble(st.nextToken());		targetCumProb = Double.parseDouble(st.nextToken());				targetQuantile = NormalDistnVariable.stdQuantile(targetCumProb);	}//--------------------------------------------------------		public int getMaxDecimals() {		return displayDecimals;	}		public int noOfValues() {		return actualVariable.noOfValues();	}		public double getTarget() {		return targetVal;	}		public Value valueAt(int index) {		double actual = actualVariable.doubleValueAt(index);		double ability = abilityVariable.doubleValueAt(index);		//		double handicapped = doHandicap(actual, ability, abilityVariable.getSD(index));		double handicapped = doHandicap(actual, ability);		NumValue result = new NumValue(handicapped, displayDecimals);		return result;	}	//	public double doHandicap(double actual, double scoreMean, double scoreSD) {//		double handicapped = actual - scoreMean + targetVal;//		if (targetCumProb != 0.5) {//			double sd = scoreSD;//			handicapped -= targetQuantile * sd;//		}//		return handicapped;//	}		public double doHandicap(double actual, double scoreMean) {		double handicapped = actual - scoreMean + targetVal;		if (targetCumProb != 0.5) {			double sd = abilityVariable.getSD(scoreMean);			handicapped -= targetQuantile * sd;		}		return handicapped;	}		public double scoreGivingTarget(double meanScore) {		double raw = meanScore;		if (targetCumProb != 0.5) {			double sd = abilityVariable.getSD(meanScore);			raw += targetQuantile * sd;		}		return raw;	}}