package sport;class MatchStatus {	public int points[] = new int[2];	public int games[] = new int[2];	public int sets[] = new int[2];		public int server, winner;		MatchStatus(MatchStatus oldStatus, int server, int winner) {		if (oldStatus == null) {			this.server = server;			this.winner = winner;			points[winner] = 1;		}		else			update(oldStatus, server, winner);	}		void update(MatchStatus oldStatus, int server, int winner) {		this.server = server;		this.winner = winner;		int oldWinnerPoints = oldStatus.points[winner];		int oldLoserPoints = oldStatus.points[1-winner];		int oldWinnerGames = oldStatus.games[winner];		int oldLoserGames = oldStatus.games[1-winner];		boolean tieBreak = oldWinnerGames == 6 && oldLoserGames == 6;		boolean winsGame = (tieBreak && oldWinnerPoints >= 5 && oldWinnerPoints > oldLoserPoints)						|| (!tieBreak && oldWinnerPoints >= 3 && oldWinnerPoints > oldLoserPoints);		if (winsGame) {			points[0] = points[1] = 0;			boolean winsSet = tieBreak || (oldWinnerGames >= 5 && oldLoserGames < oldWinnerGames);			if (winsSet) {				games[0] = games[1] = 0;				sets[winner] = oldStatus.sets[winner] + 1;				sets[1-winner] = oldStatus.sets[1-winner];			}			else {				games[winner] = oldWinnerGames + 1;				games[1-winner] = oldLoserGames;				sets[0] = oldStatus.sets[0];				sets[1] = oldStatus.sets[1];			}		}		else {			points[winner] = oldWinnerPoints + 1;			points[1-winner] = oldLoserPoints;			for (int i=0 ; i<2 ; i++) {				games[i] = oldStatus.games[i];				sets[i] = oldStatus.sets[i];			}		}	}		boolean serverChange() {		int totalPoints = points[0] + points[1];		return (totalPoints == 0) || (games[0] == 6 && games[1] == 6 && (totalPoints % 2) == 1);	}		boolean matchFinished(int noOfSets) {		return (sets[0] > noOfSets / 2) || (sets[1] > noOfSets / 2);	}		boolean justWonGame() {		return points[0] + points[1] == 0;	}		boolean justWonSet() {		return (games[0] + games[1] == 0)				&& (points[0] + points[1] == 0);	}}