package sport;import dataView.*;public class TennisMatchVariable extends CoreVariable implements SampleInterface {	protected RandomPoint generator;	private long currentSeed, nextSeed;		private int noOfSets;		private MatchStatus status[];	private int currentStatusIndex = 0;		public TennisMatchVariable(String theName, int noOfSets, int nRecordsRetained, RandomPoint generator) {		super(theName);		this.noOfSets = noOfSets;		this.generator = generator;		status = new MatchStatus[nRecordsRetained];	}		public void setSampleSize(int n) {	}		public long generateNextSample() {		currentSeed = nextSeed;		generator.setSeed(nextSeed);		clearSample();		nextSeed = generator.nextLong();		return currentSeed;	}		public boolean setSampleFromSeed(long newSeed) {		if (currentSeed == newSeed)			return false;		currentSeed = newSeed;		generator.setSeed(newSeed);		clearSample();		return true;	}		public void setNextSeed(long nextSeed) {		//	only used when setting up exercise with fixed seed		this.nextSeed = nextSeed;	}		public void clearSample() {		for (int i=0 ; i<status.length ; i++)			status[i] = null;	}		public int getNoOfRecords() {		return status.length;	}		public int getNoOfSets() {		return noOfSets;	}		public MatchStatus getStatus(int row) {		int topIndex = (currentStatusIndex + 1) % status.length;		for (int i=0 ; i<status.length ; i++)			if (status[topIndex] == null)				topIndex = (topIndex + 1) % status.length;			else				break;		int index = (topIndex + row) % status.length;		return status[index];	}		public MatchStatus getCurrentStatus() {		return status[currentStatusIndex];	}		public boolean matchFinished() {		return status[currentStatusIndex] == null ? false										: status[currentStatusIndex].matchFinished(noOfSets);	}		public boolean generateNextPoint() {		MatchStatus previousStatus = status[currentStatusIndex];		if (previousStatus != null && previousStatus.matchFinished(noOfSets))			return false;		else {			int server = (previousStatus == null) ? 0							: previousStatus.serverChange() ? (1 - previousStatus.server)							: previousStatus.server;			int winner = generator.nextWinner(server);			currentStatusIndex = (currentStatusIndex + 1) % status.length;			if (status[currentStatusIndex] == null)				status[currentStatusIndex] = new MatchStatus(previousStatus, server, winner);			else				status[currentStatusIndex].update(previousStatus, server, winner);			return true;		}	}		public void finishMatch() {		while (generateNextPoint()) ;	}}