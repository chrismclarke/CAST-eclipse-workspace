package normal;import java.awt.*;import java.io.Serializable;import javax.swing.*;public class TableLayout implements LayoutManager, Serializable {	static final public String VALUES = "Values";	static final public String VERT_SCROLL = "VertScroll";	static final public String HORIZ_SCROLL = "HorizScroll";	static final public String VERT_HEADING = "VertHeading";	static final public String HORIZ_HEADING = "HorizHeading";	static final public String TOP_LEFT = "TopLeft";		static final public int kPixelShift = 3;		private Component values, vertScroll, horizScroll, vertHeading, horizHeading, topLeft;	//	private boolean initialised = false;//	private Dimension xSize, meanSize, sdSize, zSize;//	private int zEqualsWidth, minusWidth, equalsWidth, numerWidth, fractionWidth;//	private int ascent;		public TableLayout() {	}	public void addLayoutComponent(String name, Component comp) {		if (VALUES.equals(name))			values = comp;		else if (VERT_SCROLL.equals(name))			vertScroll = comp;		else if (HORIZ_SCROLL.equals(name))			horizScroll = comp;		else if (VERT_HEADING.equals(name))			vertHeading = comp;		else if (HORIZ_HEADING.equals(name))			horizHeading = comp;		else if (TOP_LEFT.equals(name))			topLeft = comp;	}	public void removeLayoutComponent(Component comp) {	}		public Dimension minimumLayoutSize(Container parent) {		Dimension valuesSize = values.getMinimumSize();		Dimension vertScrollSize = vertScroll.getMinimumSize();		Dimension horizScrollSize = horizScroll.getMinimumSize();		Dimension vertHeadingSize = vertHeading.getMinimumSize();		Dimension horizHeadingSize = horizHeading.getMinimumSize();		Dimension topLeftSize = topLeft.getMinimumSize();				Insets insets = parent.getInsets();				int headingHt = Math.max(horizHeadingSize.height, topLeftSize.height);		int tableHt = Math.max(valuesSize.height, Math.max(vertScrollSize.height, vertHeadingSize.height));		int scrollHt = horizScrollSize.height;				int headingWd = Math.max(vertHeadingSize.width, topLeftSize.width);		int tableWd = Math.max(valuesSize.width, Math.max(horizScrollSize.width, horizHeadingSize.width));		int scrollWd = vertScrollSize.width;				return new Dimension(headingHt + tableHt + scrollHt + insets.left + insets.right,							headingWd + tableWd + scrollWd + insets.top + insets.bottom);	}		public Dimension preferredLayoutSize(Container parent) {		Dimension valuesSize = values.getPreferredSize();		Dimension vertScrollSize = vertScroll.getPreferredSize();		Dimension horizScrollSize = horizScroll.getPreferredSize();		Dimension vertHeadingSize = vertHeading.getPreferredSize();		Dimension horizHeadingSize = horizHeading.getPreferredSize();		Dimension topLeftSize = topLeft.getPreferredSize();				Insets insets = parent.getInsets();				int headingHt = Math.max(horizHeadingSize.height, topLeftSize.height);		int tableHt = Math.max(valuesSize.height, Math.max(vertScrollSize.height, vertHeadingSize.height));		int scrollHt = horizScrollSize.height;				int headingWd = Math.max(vertHeadingSize.width, topLeftSize.width);		int tableWd = Math.max(valuesSize.width, Math.max(horizScrollSize.width, horizHeadingSize.width));		int scrollWd = vertScrollSize.width;				return new Dimension(headingHt + tableHt + scrollHt + insets.left + insets.right,							headingWd + tableWd + scrollWd + insets.top + insets.bottom);	}		public void layoutContainer(Container parent) {		Dimension valuesSize = values.getPreferredSize();		Dimension vertScrollSize = vertScroll.getPreferredSize();		Dimension horizScrollSize = horizScroll.getPreferredSize();		Dimension vertHeadingSize = vertHeading.getPreferredSize();		Dimension horizHeadingSize = horizHeading.getPreferredSize();		Dimension topLeftSize = topLeft.getPreferredSize();				Insets insets = parent.getInsets();				int headingHt = Math.max(horizHeadingSize.height, topLeftSize.height);		int scrollHt = horizScrollSize.height;		int tableHt = parent.getSize().height - insets.top - insets.bottom - headingHt - scrollHt;				int headingWd = Math.max(vertHeadingSize.width, topLeftSize.width);		int scrollWd = vertScrollSize.width;		int tableWd = parent.getSize().width - insets.left - insets.right - headingWd - scrollWd;				topLeft.setBounds(insets.left, insets.top, headingWd, headingHt);		values.setBounds(insets.left + headingWd, insets.top + headingHt, tableWd, tableHt);		vertHeading.setBounds(insets.left, insets.top + headingHt, headingWd, tableHt);		horizHeading.setBounds(insets.left + headingWd, insets.top, tableWd, headingHt);		vertScroll.setBounds(insets.left + headingWd + tableWd, insets.top + headingHt, scrollWd, tableHt);		horizScroll.setBounds(insets.left + headingWd, insets.top + headingHt + tableHt, tableWd, scrollHt);				((JScrollBar)horizScroll).setValues(0, tableWd / kPixelShift, 0, valuesSize.width / kPixelShift);		((JScrollBar)horizScroll).setBlockIncrement((tableWd - 40) / kPixelShift);		((JScrollBar)vertScroll).setValues(-((NormalTableView)values).topOrigin / kPixelShift, tableHt / kPixelShift, 0, valuesSize.height / kPixelShift);		((JScrollBar)vertScroll).setBlockIncrement((tableHt - 20) / kPixelShift);	}		public String toString() {		return getClass().getName();	}}