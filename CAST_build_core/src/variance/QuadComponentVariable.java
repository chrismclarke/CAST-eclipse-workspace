package variance;import java.awt.*;import dataView.*;import models.*;public class QuadComponentVariable extends CoreComponentVariable {	static final public int TOTAL = 0;	static final public int LINEAR = 1;	static final public int QUADRATIC = 2;	static final public int RESIDUAL = 3;		static final public Color kTotalColor = new Color(0x9900FF);			//	purple	static final public Color kLinearColor = Color.red;	static final public Color kQuadraticColor = new Color(0x336600);	//	dark green	static final public Color kResidualColor = new Color(0x3333FF);		//	blue		static final public int kComponentType[] = {TOTAL, LINEAR, QUADRATIC, RESIDUAL};	static final public String kComponentKey[] = {"total", "linear", "quadratic", "residual"};	static final public Color kComponentColor[] = {kTotalColor, kLinearColor, kQuadraticColor,																																	kResidualColor};		static public void addComponentsToData(CoreModelDataSet data, String xKey, String yKey,																										String lsLinKey, String lsQuadKey) {		int decimals = data.getResponseDecimals();		for (int i=0 ; i<kComponentKey.length ; i++) {			String key = kComponentKey[i];			int type = kComponentType[i];			QuadComponentVariable comp = new QuadComponentVariable(key, data, xKey, yKey,																					lsLinKey, lsQuadKey, type, decimals);			data.addVariable(key, comp);		}	}		private int componentType;	private String xKey, lsQuadKey;		public QuadComponentVariable(String theName, DataSet data, String xKey, String yKey,												String lsLinKey, String lsQuadKey, int componentType, int decimals) {		super(theName, data, yKey, lsLinKey, decimals);		this.componentType = componentType;		this.xKey = xKey;		this.lsQuadKey = lsQuadKey;	}//--------------------------------------------------------		public int noOfValues() {		return Math.min(((Variable)data.getVariable(xKey)).noOfValues(),									super.noOfValues());	}		public boolean noteVariableChange(String key) {		return super.noteVariableChange(key) || xKey.equals(key);	}		public Value valueAt(int index) {		NumVariable yVar = (NumVariable)data.getVariable(yKey);		if (!foundYMean && (componentType == TOTAL || componentType == LINEAR))			getYMean();		double y = yVar.doubleValueAt(index);		double component;		if (componentType == TOTAL)			component = y - yMean;		else {			NumVariable xVar = (NumVariable)data.getVariable(xKey);			Value x = xVar.valueAt(index);			CoreModelVariable linModel = (CoreModelVariable)data.getVariable(modelKey);			CoreModelVariable quadModel = (CoreModelVariable)data.getVariable(lsQuadKey);			double linFit = linModel.evaluateMean(x);			double quadFit = quadModel.evaluateMean(x);			if (componentType == LINEAR)				component = linFit - yMean;			else if (componentType == QUADRATIC)				component = quadFit - linFit;			else				component = y - quadFit;		}		return new NumValue(component, decimals);	}		public int getDF() {		NumVariable yVar = (NumVariable)data.getVariable(yKey);		int n = yVar.noOfValues();		if (componentType == TOTAL)			return n - 1;		else if (componentType == LINEAR)			return 1;		else if (componentType == QUADRATIC)			return 1;		else 			return n - 3;	}}