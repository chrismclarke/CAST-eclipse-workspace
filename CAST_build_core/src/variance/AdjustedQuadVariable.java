package variance;import dataView.*;public class AdjustedQuadVariable extends NumFunctionVariable {	private DataSet data;	private String xKey, residKey;		private double targetMean, targetSD;		private int displayDecimals;	private boolean sourceInitialised = false;	//		initialisation when source variable changes		private double xMean, sxx, zMean, szz;	private int n;		private double residScale, xScale, zScale;		public AdjustedQuadVariable(String theName, DataSet data, String xKey, String residKey,																double targetMean, double targetSD, int displayDecimals) {																	//	resid variable must be uncorrelated with x and x-squared																	//	and have zero mean and unit variance		super(theName);		this.data = data;		this.xKey = xKey;		this.residKey = residKey;		this.targetMean = targetMean;		this.targetSD = targetSD;		this.displayDecimals = displayDecimals;				initialiseXY();	}		private boolean initialiseXY() {		if (!sourceInitialised) {			NumVariable xVariable = (NumVariable)data.getVariable(xKey);			ValueEnumeration xEnum = xVariable.values();			n = 0;			double sx = 0.0;			sxx = 0.0;			while (xEnum.hasMoreValues()) {				double xVal = xEnum.nextDouble();				sx += xVal;				sxx += xVal*xVal;				n ++;			}			xMean = sx / n;			sxx -= sx * xMean;						zMean = sxx / n;			szz = 0.0;			xEnum = xVariable.values();			while (xEnum.hasMoreValues()) {				double xVal = xEnum.nextDouble();				double zVal = (xVal - xMean) * (xVal - xMean);				szz += zVal*zVal;			}						szz -= zMean * zMean * n;						sourceInitialised = true;			return true;		}				return false;	}		public void setR2(double pExplained, double pQuadratic) {		residScale = Math.sqrt(1.0 - pExplained) * targetSD;		xScale = Math.sqrt(pExplained * (1 - pQuadratic) * n / sxx) * targetSD;		zScale = Math.sqrt(pExplained * pQuadratic * n / szz) * targetSD;	}//--------------------------------------------------------		public boolean noteVariableChange(String key) {		if (xKey.equals(key) || residKey.equals(key)) {			sourceInitialised = false;			return true;		}		return false;	}		public int getMaxDecimals() {		return displayDecimals;	}		public int noOfValues() {		Variable xVar = (Variable)data.getVariable(xKey);		return xVar.noOfValues();	}		public Value valueAt(int index) {		initialiseXY();				NumVariable xVariable = (NumVariable)data.getVariable(xKey);		NumVariable residVariable = (NumVariable)data.getVariable(residKey);		double xVal = xVariable.doubleValueAt(index) - xMean;		double zVal = xVal * xVal - zMean;		double residVal = residVariable.doubleValueAt(index);				double resultVal = targetMean + xScale * xVal + zScale * zVal + residScale * residVal;				NumValue result = new NumValue(resultVal, displayDecimals);		return result;	}}