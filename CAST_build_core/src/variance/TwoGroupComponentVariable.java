package variance;import java.awt.*;import dataView.*;import models.*;public class TwoGroupComponentVariable extends CoreComponentVariable {	static final public int TOTAL = 0;	static final public int BETWEEN_MEANS = 1;	static final public int WITHIN_0 = 2;	static final public int WITHIN_1 = 3;	//	static final public Color kTotalColor = new Color(0x006600);		//	dark green//	static final public Color kBetweenColor = Color.orange;//	static final public Color kWithin0Color = Color.red;//	static final public Color kWithin1Color = Color.blue;		static final public Color kTotalColor = new Color(0x9900FF);		//	purple	static final public Color kBetweenColor = Color.red;	static final public Color kWithin0Color = new Color(0x336600);		//	dark green	static final public Color kWithin1Color = new Color(0x3333FF);		//	blue		static final public int kComponentType[] = {TOTAL, BETWEEN_MEANS, WITHIN_0, WITHIN_1};	static final public String kComponentKey[] = {"total", "between", "within0", "within1"};	static final public Color kComponentColor[] = {kTotalColor, kBetweenColor, kWithin0Color,																																	kWithin1Color};		static public void addComponentsToData(GroupsDataSet data, String xKey, String yKey, String lsKey) {		int decimals = data.getResponseDecimals();		for (int i=0 ; i<kComponentKey.length ; i++) {			String key = kComponentKey[i];			int type = kComponentType[i];			TwoGroupComponentVariable comp = new TwoGroupComponentVariable(key, data, xKey, yKey,											lsKey, type, decimals);			data.addVariable(key, comp);		}	}		private int componentType;	private String xKey;		public TwoGroupComponentVariable(String theName, DataSet data, String xKey, String yKey,													String modelKey, int componentType, int decimals) {		super(theName, data, yKey, modelKey, decimals);		this.componentType = componentType;		this.xKey = xKey;	}//--------------------------------------------------------		public int noOfValues() {		return Math.min(((Variable)data.getVariable(xKey)).noOfValues(),									super.noOfValues());	}		public boolean noteVariableChange(String key) {		return super.noteVariableChange(key) || xKey.equals(key);	}		public Value valueAt(int index) {		NumVariable yVar = (NumVariable)data.getVariable(yKey);		if (!foundYMean && (componentType == TOTAL || componentType == BETWEEN_MEANS))			getYMean();		double y = yVar.doubleValueAt(index);		double component;		if (componentType == TOTAL)			component = y - yMean;		else {			CatVariable xVar = (CatVariable)data.getVariable(xKey);			Value x = xVar.valueAt(index);			CoreModelVariable theModel = (CoreModelVariable)data.getVariable(modelKey);			double fit = theModel.evaluateMean(x);			int group = xVar.labelIndex(x);			if (componentType == BETWEEN_MEANS)				component = fit - yMean;			else if ((componentType == WITHIN_0 && group == 1)																						|| (componentType == WITHIN_1 && group == 0))				return null;			else				component = y - fit;		}		return new NumValue(component, decimals);	}		public int getDF() {		NumVariable yVar = (NumVariable)data.getVariable(yKey);		int n = yVar.noOfValues();		if (componentType == TOTAL)			return n - 1;//		else if (componentType == WITHIN)//			return n - 2;		else if (componentType == BETWEEN_MEANS)			return 1;		else {			CatVariable xVar = (CatVariable)data.getVariable(xKey);			int counts[] = xVar.getCounts();						return counts[componentType == WITHIN_0 ? 0 : 1] - 1;		}	}}