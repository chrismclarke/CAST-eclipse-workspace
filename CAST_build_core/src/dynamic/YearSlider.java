package dynamic;import java.awt.*;import javax.swing.*;import java.util.*;import dataView.*;import utils.*;public class YearSlider extends XSlider {	static final private int kMaxSteps = 200;		private int stepsPerYear;		public YearSlider(String titleText, int minYear, int maxYear, int startYear, 													int yearStep, int labelStartYear, int labelStep, XApplet applet) {		super(null, null, titleText, minYear, maxYear, startYear, HORIZONTAL, applet, true);		setDisplayLabels(labelStartYear, labelStep);		slider.setMinorTickSpacing(stepsPerYear * yearStep);	}		protected JSlider createSlider(int minYear, int maxYear, int startYear, int jOrientation) {		JSlider sl = new JSlider(jOrientation, minYear, maxYear, startYear);		sl.setPaintLabels(true);				//	creates standard labels in Dictionary		sl.setMajorTickSpacing(1);		sl.setPaintTicks(true);				stepsPerYear = kMaxSteps / (maxYear - minYear);				Dictionary oldTable = sl.getLabelTable();		Hashtable newTable = new Hashtable();		Enumeration le = oldTable.keys();		while (le.hasMoreElements()) {			Integer key = (Integer)le.nextElement();			int yearSteps = key.intValue();			Object value = oldTable.get(key);			Integer newKey = Integer.valueOf(yearSteps * stepsPerYear);			newTable.put(newKey, value);		}				sl.setMaximum(maxYear * stepsPerYear);		sl.setValue(startYear * stepsPerYear);		sl.setMinimum(minYear * stepsPerYear);		sl.setMinorTickSpacing(stepsPerYear);		sl.setSnapToTicks(true);				sl.setLabelTable(newTable);				sl.addChangeListener(this);		return sl;	}			private void setDisplayLabels(int labelStartYear, int labelStep) {		Dictionary oldTable = slider.getLabelTable();		Hashtable newTable = new Hashtable();		Enumeration le = oldTable.keys();		while (le.hasMoreElements()) {			Integer key = (Integer)le.nextElement();			int year = key.intValue() / stepsPerYear;			Object value = oldTable.get(key);			if ((year - labelStartYear) % labelStep == 0)				newTable.put(key, value);		}				slider.setLabelTable(newTable);		int tickStep = Math.min(labelStep, 5);		slider.setMajorTickSpacing(stepsPerYear * tickStep);	}		public void setForeground(Color c) {		super.setForeground(c);		if (slider == null)			return;		Dictionary table = slider.getLabelTable();		Enumeration enumx = table.elements();		while (enumx.hasMoreElements()) {			JComponent comp = (JComponent)enumx.nextElement();			comp.setForeground(c);		}	}		protected Value translateValue(int val) {		return new NumValue(val / stepsPerYear, 0);	}		protected int getMaxValueWidth(Graphics g) {		return g.getFontMetrics().stringWidth((getMaxValue() / stepsPerYear) + "");	}		public double getYear() {		return ((double)getValue()) / stepsPerYear;	}		public void setYear(int year) {		setValue(year * stepsPerYear);	}}