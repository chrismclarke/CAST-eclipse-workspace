package dynamic;import java.util.*;import java.lang.Math;import dataView.*;public class NumSeriesValue extends NumValue {	private double series[];	private double seriesIndex = 0.0;		public NumSeriesValue(String valString) throws NullPointerException, NumberFormatException {		StringTokenizer st = new StringTokenizer(valString, ",");		int nVals = st.countTokens();		series = new double[nVals];		for (int i=0 ; i<nVals ; i++) {			int oldLeftDigits = leftDigits;			int oldDecimals = decimals;			series[i] = readValueFromString(st.nextToken());			leftDigits = Math.max(leftDigits, oldLeftDigits);			decimals = Math.max(decimals, oldDecimals);		}	}		public int seriesLength() {		return series.length;	}		public void setSeriesIndex(double seriesIndex) {		this.seriesIndex = seriesIndex;	}		public double getSeriesIndex() {		return seriesIndex;	}	public double toDouble() {		return toDouble(seriesIndex);	}		public double toDouble(double index) {		if (index >= series.length)			return Double.NaN;		else {			int index0 = (int)Math.round(Math.floor(index));			int index1 = (int)Math.round(Math.ceil(index));			 			while (index0 >= 0 && Double.isNaN(series[index0]))				index0 --;			while (index1 < series.length && Double.isNaN(series[index1]))				index1 ++;			 			if (index0 < 0 || index1 >= series.length)				return Double.NaN;			else if (index0 == index1)				return series[index0];			else				return series[index0] + (index - index0) * (series[index1] - series[index0]) / (index1 - index0);		}	}}