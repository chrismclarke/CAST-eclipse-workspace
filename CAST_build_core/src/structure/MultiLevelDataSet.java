package structure;import java.util.*;import dataView.*;public class MultiLevelDataSet extends DataSet {	private int higherIndex[];	private boolean tempSelection[];		private MultiLevelDataSet linkedData;		public MultiLevelDataSet() {		//	For higher level	}		public MultiLevelDataSet(String indexString) {		//	For lower level		StringTokenizer st = new StringTokenizer(indexString);		int noOfHigherLevels = st.countTokens();		tempSelection = new boolean[noOfHigherLevels];		higherIndex = new int[noOfHigherLevels];		for (int i=0 ; i<noOfHigherLevels ; i++)			higherIndex[i] = Integer.parseInt(st.nextToken());	}		public void setLinkedData(MultiLevelDataSet linkedData) {		this.linkedData = linkedData;	}		public int[] getHigherIndex() {		return higherIndex;	}		public synchronized boolean setSelection(int index) {		if (higherIndex == null) {		//	higher level			super.setSelection(index);			if (linkedData != null)				linkedData.setHigherSelection(index);		}		else {												//	lower level			if (linkedData == null)				super.setSelection(index);			else {				int highIndex = (index < 0) ? -1 : higherIndex[index];				linkedData.setSelection(highIndex);			}		}				return true;	}		public synchronized boolean setHigherSelection(int index) {		for (int i=0 ; i<higherIndex.length ; i++)			tempSelection[i] = (index == higherIndex[i]);		setSelection(tempSelection);		return true;	}		public synchronized boolean clearSelection() {		if (higherIndex == null) {		//	higher level			super.clearSelection();			if (linkedData != null)				linkedData.clearLowLevelSelection();		}		else {												//	lower level			if (linkedData == null)				super.clearSelection();			else				linkedData.clearSelection();		}				return true;	}		public synchronized boolean clearLowLevelSelection() {		return super.clearSelection();	}		public int getMinIndex(int higherTarget) {		for (int i=0 ; i<higherIndex.length ; i++)			if (higherTarget == higherIndex[i])				return i;		return -1;	}		public int getMaxIndex(int higherTarget) {		for (int i=higherIndex.length-1 ; i>=0 ; i--)			if (higherTarget == higherIndex[i])				return i;		return -1;	}}