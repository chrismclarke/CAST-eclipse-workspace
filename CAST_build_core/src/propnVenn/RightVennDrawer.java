package propnVenn;import java.awt.*;import dataView.*;import axis.*;import contin.*;public class RightVennDrawer {	static final private Color[] outlineColor = RotateContinView.outlineColor;		static final private int kTableRightGap = 14;	static final private int kMiniRightGap = 3;	static final private int kArrowSize = 5;	static final private int kEqualsOffset = 10;		static final private int kProbDecimals = 3;	static final private NumValue kZero = new NumValue(0.0, kProbDecimals);		private VertAxis yAxis;	private HorizAxis xAxis;	private DataView theView;		double minYP, maxYP, diffYP;	private boolean canShowProbs;		public RightVennDrawer(double minYP, double maxYP, HorizAxis xAxis, VertAxis yAxis,																				boolean canShowProbs, DataView theView) {		this.minYP = minYP;		this.maxYP = maxYP;		diffYP = maxYP - minYP;		this.xAxis = xAxis;		this.yAxis = yAxis;		this.theView = theView;		this.canShowProbs = canShowProbs;	}		public int rightLabelBorder(CatVariableInterface xVar, CatVariableInterface yVar,																					Insets border) {		Graphics g = theView.getGraphics();		FontMetrics fm = g.getFontMetrics();				int nYCats = yVar.noOfCategories();		int maxYCatLength = 0;		for (int i=0 ; i<nYCats ; i++)			maxYCatLength = Math.max(maxYCatLength, yVar.getLabel(i).stringWidth(g));				int nXCats = xVar.noOfCategories();		int maxXCatLength = 0;		for (int i=0 ; i<nXCats ; i++)			maxXCatLength = Math.max(maxXCatLength, xVar.getLabel(i).stringWidth(g));				int widthForLabels = !canShowProbs ? (maxYCatLength + kMiniRightGap) :						(Math.max(maxYCatLength + maxXCatLength + fm.stringWidth("P( | )"),										kZero.stringWidth(g) + fm.stringWidth(" = ")) + kTableRightGap);				return widthForLabels;	}		private int getYLabelBaseline(int y, PropnVennDrawer propnVennDrawer, Point tempPoint, Graphics g) {		FontMetrics fm = g.getFontMetrics();		int ascent = fm.getAscent();		int descent = fm.getDescent();		double yFractCenter = propnVennDrawer.yCumMarginalProb[y] + 0.5 * propnVennDrawer.yMarginalProb[y];				int yCenter = yAxis.numValToRawPosition(yFractCenter * diffYP + minYP);		tempPoint = theView.translateToScreen(0, yCenter, tempPoint);		return tempPoint.y + (ascent - descent) / 2;	}		private void drawVertArrow(Graphics g, int x, int y, int height) {		int arrowSize = Math.max(Math.min(kArrowSize, height / 2 - 3), 1);		boolean doubleWidth = (arrowSize >= 3);		int x1 = doubleWidth ? x + 1 : x;				g.drawLine(x, y, x, y + height - 1);		g.drawLine(x1, y, x1, y + height - 1);				g.drawLine(x, y, x - arrowSize, y + arrowSize);		g.drawLine(x1, y, x1 + arrowSize, y + arrowSize);		g.drawLine(x, y + height - 1, x - arrowSize, y + height - 1 - arrowSize);		g.drawLine(x1, y + height - 1, x1 + arrowSize, y + height - 1 - arrowSize);				if (doubleWidth) {			g.drawLine(x, y + 1, x - arrowSize, y + arrowSize + 1);			g.drawLine(x1, y + 1, x1 + arrowSize, y + arrowSize + 1);			g.drawLine(x, y + height - 2, x - arrowSize, y + height - 2 - arrowSize);			g.drawLine(x1, y + height - 2, x1 + arrowSize, y + height - 2 - arrowSize);		}	}		private String getMarginStringStart(Value mainCat) {		return "P(" + mainCat.toString() + ")";	}		private String getConditStringStart(Value mainCat, Value otherCat) {		return "P(" + mainCat.toString() + " | " + otherCat.toString() + ")";	}		private String getProbString(double p) {		NumValue prob = new NumValue(p, kProbDecimals);		return " = " + prob.toString();	}		public void drawRightLabels(int selectedX, int selectedY, Rectangle selectedRect,											CatVariableInterface xVar, CatVariableInterface yVar,											PropnVennDrawer propnVennDrawer, double framePropn, Graphics g) {		FontMetrics fm = g.getFontMetrics();		int ascent = fm.getAscent();		int descent = fm.getDescent();		//		int nXCats = xVar.noOfCategories();		int nYCats = yVar.noOfCategories();		int yLabelLeft = theView.translateToScreen(xAxis.numValToRawPosition(1.0), 0, null).x;		yLabelLeft += canShowProbs ? kTableRightGap : kMiniRightGap;		for (int j=0 ; j<nYCats ; j++) {			Value yLabel = yVar.getLabel(j);			if (canShowProbs && j == selectedY && (framePropn == 0.0 || framePropn == 1.0)) {				boolean marginForY = (framePropn == 0.0);				int ySelectedPos = selectedRect.y;				int ySelectedHeight = selectedRect.height;				int yCentre = ySelectedPos + ySelectedHeight / 2;								int arrowHoriz = theView.getSize().width - theView.getViewBorder().right + kTableRightGap / 2;				g.setColor(theView.getForeground());				drawVertArrow(g, arrowHoriz, ySelectedPos, ySelectedHeight);								String probString1 = !marginForY								? getConditStringStart(yLabel, xVar.getLabel(selectedX))								: getMarginStringStart(yLabel);								g.setColor(outlineColor[j]);				Font oldFont = g.getFont();				g.setFont(new Font(oldFont.getName(), Font.BOLD, oldFont.getSize()));								if (xVar instanceof CatVariable) {					int nTotal = ((CatVariable)xVar).noOfValues();					int nXMargin = (int)Math.round(nTotal * propnVennDrawer.xMarginalProb[selectedX]);					int nYMargin = (int)Math.round(nTotal * propnVennDrawer.yMarginalProb[selectedY]);					int nJoint = (int)Math.round(nXMargin * propnVennDrawer.yConditXProb[selectedX][selectedY]);					int numer = marginForY ? nYMargin : nJoint;					int denom = marginForY ? nTotal : nXMargin;					//					int fractionHeight = 2 * (ascent + JointProbChoice.kDivGap);					int yBaseline = yCentre - (ascent + descent) / 2 - JointProbChoice.kDivGap - 1;					g.drawString(probString1, yLabelLeft, yBaseline);										yBaseline += (descent + 2 + ascent);					g.drawString("=", yLabelLeft + kEqualsOffset, yBaseline + ascent / 2);					int equalsWidth = fm.stringWidth("=  ");										JointProbChoice.drawFraction(g, yLabelLeft + kEqualsOffset + equalsWidth,																							yBaseline, numer, denom, JointProbChoice.RIGHT);				}				else {					int yBaseline = yCentre - descent / 2 - 1;					g.drawString(probString1, yLabelLeft, yBaseline);					String probString2 = getProbString(!marginForY ? propnVennDrawer.yConditXProb[selectedX][selectedY]																		: propnVennDrawer.yMarginalProb[selectedY]);					g.drawString(probString2, yLabelLeft, yBaseline + ascent + descent + 2);				}				g.setFont(oldFont);			}			else {				int yBaseline = getYLabelBaseline(j, propnVennDrawer, null, g);				g.setColor(outlineColor[j]);				yLabel.drawRight(g, yLabelLeft, yBaseline);			}		}	}}