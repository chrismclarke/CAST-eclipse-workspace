package propnVenn;import java.awt.*;import dataView.*;import axis.*;import contin.*;public class TopVennDrawer {	static final private Color[] fillColor = RotateContinView.fillColor;		static final private int kXLabelBorder = 5;	static final private int kTableTopGap = 14;	static final private int kTableNoSelGap = 4;	static final public int kArrowSize = 5;		static final private int kProbDecimals = 3;	static final private NumValue kZero = new NumValue(0.0, kProbDecimals);		private HorizAxis xAxis;	private DataView theView;		private boolean canShowProbs;		static public void drawHorizArrow(Graphics g, int x, int y, int width) {		int arrowSize = Math.min(kArrowSize, (width * 2) / 5);				g.drawLine(x, y, x + width - 1, y);		g.drawLine(x, y - 1, x + width - 1, y - 1);				g.drawLine(x, y, x + arrowSize, y + arrowSize);		g.drawLine(x, y - 1, x + arrowSize, y - 1 - arrowSize);		if (arrowSize > 2) {			g.drawLine(x + 1, y, x + 1 + arrowSize, y + arrowSize);			g.drawLine(x + 1, y - 1, x + 1 + arrowSize, y - 1 - arrowSize);		}				g.drawLine(x + width - 1, y, x + width - 1 - arrowSize, y + arrowSize);		g.drawLine(x + width - 1, y - 1, x + width - 1 - arrowSize, y - 1 - arrowSize);		if (arrowSize > 2) {			g.drawLine(x + width - 2, y, x + width - 2 - arrowSize, y + arrowSize);			g.drawLine(x + width - 2, y - 1, x + width - 2 - arrowSize, y - 1 - arrowSize);		}	}			public TopVennDrawer(HorizAxis xAxis, DataView theView, boolean canShowProbs) {		this.xAxis = xAxis;		this.theView = theView;		this.canShowProbs = canShowProbs;	}		public int topLabelBorder(CatVariableInterface xVar) {		Graphics g = theView.getGraphics();		FontMetrics fm = g.getFontMetrics();				int height = fm.getAscent() + fm.getDescent() + 2 * kXLabelBorder;				if (canShowProbs) {			height += kTableTopGap;			if (xVar instanceof CatVariable)				height += fm.getAscent() + 2 * JointProbChoice.kDivGap;		}		else			height += kTableNoSelGap;		return height;	}		private int getXLabelCenter(int x, PropnVennDrawer propnVennDrawer, Point tempPoint) {		double xFractCenter = propnVennDrawer.xCumMarginalProb[x] + 0.5 * propnVennDrawer.xMarginalProb[x];				int xCenter = xAxis.numValToRawPosition(xFractCenter);		tempPoint = theView.translateToScreen(xCenter, 0, tempPoint);		return tempPoint.x;	}		private String getMarginStringStart(Value mainCat) {		return "P(" + mainCat.toString() + ") =  ";	}		private String getConditStringStart(Value mainCat, Value otherCat) {		return "P(" + mainCat.toString() + " | " + otherCat.toString() + ") =  ";	}		private String getProbString(double p) {		NumValue prob = new NumValue(p, kProbDecimals);		return prob.toString();	}		public void drawTopLabels(int selectedX, int selectedY, Rectangle selectedRect,												CatVariableInterface xVar, CatVariableInterface yVar,												PropnVennDrawer propnVennDrawer, double framePropn, Graphics g) {		FontMetrics fm = g.getFontMetrics();		int ascent = fm.getAscent();		int descent = fm.getDescent();				int nXCats = xVar.noOfCategories();//		int nYCats = yVar.noOfCategories();		int xLabelBaseline = theView.getViewBorder().top - kXLabelBorder - descent;		if (canShowProbs)			xLabelBaseline -= kTableTopGap;		else			xLabelBaseline -= kTableNoSelGap;		int xDiscreteSelBaseline = theView.getViewBorder().top - kTableTopGap																	- kXLabelBorder - JointProbChoice.kDivGap - ascent / 2;		Point pt = new Point(0, 0);		for (int i=0 ; i<nXCats ; i++) {			Value xLabel = xVar.getLabel(i);						if (canShowProbs && i == selectedX && (framePropn == 0.0 || framePropn == 1.0)) {				boolean marginForY = (framePropn == 0.0);				int xSelectedPos = selectedRect.x;				int xSelectedWidth = selectedRect.width;				int arrowBaseline = theView.getViewBorder().top - kTableTopGap / 2;				g.setColor(theView.getForeground());				drawHorizArrow(g, xSelectedPos, arrowBaseline, xSelectedWidth);								Font oldFont = g.getFont();				g.setFont(new Font(oldFont.getName(), Font.BOLD, oldFont.getSize()));								String probLabelString = marginForY								? getConditStringStart(xLabel, yVar.getLabel(selectedY))								: getMarginStringStart(xLabel);				int labelWidth = fm.stringWidth(probLabelString);								if (xVar instanceof CatVariable) {					int nTotal = ((CatVariable)xVar).noOfValues();					int nXMargin = (int)Math.round(nTotal * propnVennDrawer.xMarginalProb[selectedX]);					int nYMargin = (int)Math.round(nTotal * propnVennDrawer.yMarginalProb[selectedY]);					int nJoint = (int)Math.round(nXMargin * propnVennDrawer.yConditXProb[selectedX][selectedY]);					int numer = marginForY ? nJoint : nXMargin;					int denom = marginForY ? nYMargin : nTotal;										int maxValueWidth = fm.stringWidth(String.valueOf(nTotal));					int width = labelWidth + maxValueWidth + 2 * kXLabelBorder;					int height = 2 * (ascent + JointProbChoice.kDivGap + kXLabelBorder);										int xLeft = Math.max(0, Math.min(theView.getSize().width - width,																							xSelectedPos + (xSelectedWidth - width) / 2));					g.setColor(fillColor[i]);					g.fillRect(xLeft, theView.getViewBorder().top - kTableTopGap - height,																																		width, height);					g.setColor(Color.white);					g.drawRect(xLeft, theView.getViewBorder().top - kTableTopGap - height,																														width - 1, height - 1);					g.setColor(theView.getForeground());										xLeft += kXLabelBorder;					g.drawString(probLabelString, xLeft, xDiscreteSelBaseline);					xLeft += labelWidth;										JointProbChoice.drawFraction(g, xLeft, xDiscreteSelBaseline - ascent / 2,																									numer, denom, JointProbChoice.RIGHT);				}				else {					int width = labelWidth + kZero.stringWidth(g) + 2 * kXLabelBorder;					int xLeft = Math.max(0, Math.min(theView.getSize().width - width,																							xSelectedPos + (xSelectedWidth - width) / 2));					g.setColor(fillColor[i]);					g.fillRect(xLeft, xLabelBaseline - ascent - kXLabelBorder,																		width, ascent + descent + 2 * kXLabelBorder);					g.setColor(Color.white);					g.drawRect(xLeft, xLabelBaseline - ascent - kXLabelBorder,																	width - 1, ascent + descent + 2 * kXLabelBorder - 1);					g.setColor(theView.getForeground());										xLeft += kXLabelBorder;					g.drawString(probLabelString, xLeft, xLabelBaseline);					xLeft += labelWidth;										String probValueString = getProbString(marginForY ? propnVennDrawer.xConditYProb[selectedY][selectedX]																	: propnVennDrawer.xMarginalProb[selectedX]);					g.drawString(probValueString, xLeft, xLabelBaseline);				}				g.setFont(oldFont);			}			else {				int width = xLabel.stringWidth(g);				int xCenter = getXLabelCenter(i, propnVennDrawer, pt);				int xLeft = Math.max(0, Math.min(theView.getSize().width - width, xCenter - width / 2));				g.setColor(fillColor[i]);				g.fillRect(xLeft - kXLabelBorder, xLabelBaseline - ascent - kXLabelBorder,									width + 2 * kXLabelBorder, ascent + descent + 2 * kXLabelBorder);				g.setColor(theView.getForeground());				xLabel.drawRight(g, xLeft, xLabelBaseline);			}		}	}}