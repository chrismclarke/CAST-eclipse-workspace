package exerciseTest;import java.awt.*;import dataView.*;import random.*;import exercise2.*;public class PValueChoicePanel extends MultichoicePanel implements PValueConstants{	static final private int kOptions = 5;		private String nullHypoth, altHypoth;	private NumValue pValue;	//================================================		private class PValueOptionInfo extends OptionInformation {		private int optionPValue, variation, appOrGeneric;				PValueOptionInfo(int appOrGeneric, boolean onlyAltVariation) {			super(true);								//	for correct answer			if (appOrGeneric == RANDOM)				this.appOrGeneric = (exerciseApplet.randomDouble() < 0.5) ? GENERIC : APP;			else				this.appOrGeneric = appOrGeneric;						if (this.appOrGeneric == APP || onlyAltVariation)				variation = ALT_VERSION;			else				variation = (exerciseApplet.randomDouble() < 0.5) ? NULL_VERSION : ALT_VERSION;							optionPValue = correctConclusion();		}				PValueOptionInfo(int optionPValue, int appOrGeneric, boolean onlyAltVariation) {			super(false);									//	for wrong answer			if (appOrGeneric == RANDOM)				this.appOrGeneric = (exerciseApplet.randomDouble() < 0.5) ? GENERIC : APP;			else				this.appOrGeneric = appOrGeneric;			this.optionPValue = optionPValue;						if (isCorrect())				variation = BAD_VERSION;		//	to make it wrong			else if (onlyAltVariation)				variation = ALT_VERSION;			else if (this.appOrGeneric == GENERIC) {				double r = exerciseApplet.randomDouble();				variation = (r < 0.33) ? NULL_VERSION : (r < 0.67) ? ALT_VERSION : BAD_VERSION;			}			else				variation = (exerciseApplet.randomDouble() < 0.5) ? ALT_VERSION : BAD_VERSION;		}				public boolean equals(OptionInformation a) {			PValueOptionInfo oa = (PValueOptionInfo)a;			if (optionPValue != oa.optionPValue)				return false;						return (variation == BAD_VERSION) == (oa.variation == BAD_VERSION);		}				public boolean lessThan(OptionInformation a) {			PValueOptionInfo oa = (PValueOptionInfo)a;			return optionPValue > oa.optionPValue;		}				public int correctConclusion() {			double pv = pValue.toDouble();			return (pv >= 0.1) ? NO_EVIDENCE										: (pv >= 0.05) ? WEAK_EVIDENCE										: (pv >= 0.01) ? MODERATE_EVIDENCE										: (pv > 0.0) ? STRONG_EVIDENCE										: CERTAIN_EVIDENCE;		}				public String getOptionString() {			String result = "";			switch (optionPValue) {				case NO_EVIDENCE:					result = "There is no evidence that ";					break;				case WEAK_EVIDENCE:					result = "There is only weak evidence that ";					break;				case MODERATE_EVIDENCE:					result = "There is moderately strong evidence that ";					break;				case STRONG_EVIDENCE:					result = "There is very strong evidence that ";					break;				case CERTAIN_EVIDENCE:					result = "It is almost certain that ";					break;			}						String nullString = (appOrGeneric == GENERIC) ? "the null hypothesis" : nullHypoth;			String altString = (appOrGeneric == GENERIC) ? "the alternative hypothesis" : altHypoth;						switch (variation) {				case ALT_VERSION:					result += altString;					if (appOrGeneric == GENERIC)						result += " is true.";					break;				case NULL_VERSION:					result += nullString + " is false.";					break;				case BAD_VERSION:					result += nullString;					if (appOrGeneric == GENERIC)						result += " is true.";					break;			}			return result;		}				public String getMessageString() {			String result = "";			String nullString = (appOrGeneric == GENERIC) ? "the null hypothesis is true" : nullHypoth;						if (isCorrect()) {				result = "If " + nullString + ", the probability of getting a p-value as low as "														+ pValue.toString() + " is " + pValue.toString() + ".";								switch (optionPValue) {					case NO_EVIDENCE:						result += " A p-value that is higher than 0.1 is not unusual.";						break;					case WEAK_EVIDENCE:						result += " A p-value between 0.05 and 0.1 is fairly low, but not particularly unusual.";						break;					case MODERATE_EVIDENCE:						result += " A p-value lower than 0.05 is therefore unusual.";						break;					case STRONG_EVIDENCE:						result += " A p-value lower than 0.01 is therefore extremely unusual.";						break;					case CERTAIN_EVIDENCE:						result += " Such a low p-value would therefore be almost impossible.";						break;				}			}			else if (variation == BAD_VERSION)				result = "A hypothesis test can never indicate whether the null hypothesis is true. It can only give evidence that it is false.";			else {				result = "If " + nullString + ", the probability of getting a p-value as low as "														+ pValue.toString() + " will be ";				double pVal = pValue.toDouble();				switch (optionPValue) {					case NO_EVIDENCE:						result += "less than 0.1.";						break;					case WEAK_EVIDENCE:						if (pVal > 0.1)							result += "more than 0.1.";						else							result += "less than 0.05.";						break;					case MODERATE_EVIDENCE:						if (pVal > 0.05)							result += "more than 0.05.";						else							result += "less than 0.01.";						break;					case STRONG_EVIDENCE:						if (pVal > 0.01)							result += "more than 0.01.";						else							result += "almost zero.";						break;					case CERTAIN_EVIDENCE:						result += "0.001 or higher.";						break;				}			}			return result;		}	}	//================================================		private int ordering, appOrGeneric;	private boolean altOnly;		public PValueChoicePanel(ExerciseApplet exerciseApplet, String nullHypoth, String altHypoth,													NumValue pValue, int ordering, int appOrGeneric, boolean altOnly) {		super(exerciseApplet, kOptions);		optionInfo = new PValueOptionInfo[kOptions];		this.ordering = ordering;		this.appOrGeneric = appOrGeneric;		this.altOnly = altOnly;		setupChoices(nullHypoth, altHypoth, pValue);		setupPanel();	}		public void setupChoices(String nullHypoth, String altHypoth, NumValue pValue) {		this.nullHypoth = nullHypoth;		this.altHypoth = altHypoth;		this.pValue = pValue;				PValueOptionInfo correctInfo = new PValueOptionInfo(appOrGeneric, altOnly);		optionInfo[0] = correctInfo;		int correctAns = correctInfo.correctConclusion();		if (ordering == SORTED) {			int ans = 0;			for (int i=1 ; i<kOptions ; i++) {				if (ans == correctAns)					ans ++;				optionInfo[i] = new PValueOptionInfo(ans, appOrGeneric, altOnly);				ans ++;			}		}		else {			RandomInteger ansGenerator = new RandomInteger(0, 4, 1);			ansGenerator.setSeed(exerciseApplet.nextSeed());			for (int i=1 ; i<kOptions ; i++) {				while (true) {					optionInfo[i] = new PValueOptionInfo(ansGenerator.generateOne(), appOrGeneric, altOnly);					boolean alreadyExists = false;					for (int j=0 ; j<i ; j++)						if (optionInfo[i].equals(optionInfo[j]))							alreadyExists = true;					if (!alreadyExists)						break;				}			}		}				if (ordering == SORTED)			sortOptions();		else			randomiseOptions();				findCorrectOption();	}		protected Component createOptionPanel(int optionIndex, ExerciseApplet exerciseApplet) {		return new OptionLongTextPanel(optionInfo, optionIndex, exerciseApplet);	}		public void changeOptions(String nullHypoth, String altHypoth, NumValue pValue) {		setupChoices(nullHypoth, altHypoth, pValue);		for (int i=0 ; i<option.length ; i++)			((OptionLongTextPanel)option[i]).changeContent();	}		public String getBiggestMessage(String nullHypoth) {		return "If " + nullHypoth + ", the probability of getting a p-value as low as 9.9999 is 9.9999. A p-value between 0.05 and 0.1 is fairly low, but not particularly unusual."; 	}}