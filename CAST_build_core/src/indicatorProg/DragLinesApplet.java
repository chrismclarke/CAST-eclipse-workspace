package indicatorProg;import java.awt.*;import dataView.*;import utils.*;import models.*;import coreVariables.*;import indicator.*;public class DragLinesApplet extends DragParallelLinesApplet {	static final private String X_STEP_PARAM = "xStep";		static final private String[] kXDataInteractKey = {"x", "z", "xz"};	static final private String[] kXHandleInteractKey = {"xHandle", "zHandle", "xzHandle"};																										//	Assumes exactly 2 groups	static final private NumValue kZero = new NumValue(0.0, 0);		static final private double[] kNoInteractionConstraints = {Double.NaN, Double.NaN, Double.NaN, 0.0};	static final private double[] kInteractionConstraints = null;		private NumValue xStep;		private double constraints[] = kNoInteractionConstraints;	private XCheckbox interactionCheck;		protected String[] getXDataKeys() {		return kXDataInteractKey;	}		protected String[] getXHandleKeys() {		return kXHandleInteractKey;	}		protected void addExplanVariables(DataSet data) {		super.addExplanVariables(data);		data.addVariable(getXDataKeys()[2], new CatNumInteractTermVariable("Interaction", data,																			getXDataKeys()[1], getXDataKeys()[0], 1));	}		protected void createHandleVars(DataSet data) {		super.createHandleVars(data);		data.addVariable(getXHandleKeys()[2], new CatNumInteractTermVariable("Interaction", data,																			getXHandleKeys()[1], getXHandleKeys()[0], 1));	}		protected void fillXArray(Value[] x, Value xVal, Value zVal, Variable xVar, CatVariable zVar) {		x[0] = xVal;		x[1] = zVal;		int catIndex = zVar.labelIndex(zVal);		for (int i=2 ; i<x.length ; i++)			x[i] = (i == catIndex + 1) ? xVal : kZero;	}		protected void addGroupHandles(Variable xVar, NumVariable yVar, CatVariable zVar,												MultipleRegnModel model) {		int nLines = zVar.noOfCategories();		Value[] x = new Value[getXDataKeys().length];		for (int i=1 ; i<nLines ; i++) {			fillXArray(x, kZero, zVar.getLabel(i), xVar, zVar);			NumValue y = new NumValue(model.evaluateMean(x));						xVar.addValue(x[0]);			yVar.addValue(y);			zVar.addValue(x[1]);		}				xStep = new NumValue(getParameter(X_STEP_PARAM));		for (int i=1 ; i<nLines ; i++) {		//	initially no interaction			xVar.addValue(xStep);			yVar.addValue(new NumValue(Double.NaN, 0));			zVar.addValue(zVar.getLabel(i));		}	}		protected DragParallelLinesView getLinesView(DataSet data) {		DragLinesView theView = new DragLinesView(data, this, xAxis, yAxis, getXDataKeys(), kYDataKey,																getXHandleKeys(), kYHandleKey, "model", paramDecimals, xStep);		theView.setConstraints(constraints);	//	initially no interaction		return theView;	}		protected double[] getConstraints() {		return constraints;	}		protected void addInteractionCheck(XPanel thePanel) {			interactionCheck = new XCheckbox(translate("Allow interaction"), this);		thePanel.add(interactionCheck);	}		protected XPanel equationPanel(DataSet data) {		XPanel thePanel = super.equationPanel(data);		eqn.setLastDrawParameter(2);			//	initially no interaction		return thePanel;	}		private void setAllowInteraction(boolean allowInteraction) {		MultipleRegnModel model = (MultipleRegnModel)data.getVariable("model");		NumVariable yVariable = (NumVariable)data.getVariable(kYHandleKey);		if (allowInteraction) {			constraints = kInteractionConstraints;			((NumValue)yVariable.valueAt(3)).setValue(0.0);			updateHandleY(model);			if (eqn != null)				eqn.setLastDrawParameter(3);		}		else {			constraints = kNoInteractionConstraints;			((NumValue)yVariable.valueAt(3)).setValue(Double.NaN);			model.setXKey(getXHandleKeys());			model.setLSParams(kYHandleKey, getConstraints(), paramDecimals, 0);			if (eqn != null)				eqn.setLastDrawParameter(2);		}		((DragLinesView)theView).setConstraints(constraints);		data.variableChanged(kYHandleKey);	}		private boolean localAction(Object target) {		if (target == interactionCheck) {			setAllowInteraction(interactionCheck.getState());			return true;		}		return false;	}		@SuppressWarnings("deprecation")	public boolean action(Event evt, Object what) {		if (super.action(evt, what))			return true;		else			return localAction(evt.target);	}}