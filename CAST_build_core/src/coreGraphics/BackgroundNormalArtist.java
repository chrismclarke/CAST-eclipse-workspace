package coreGraphics;import java.awt.*;import dataView.*;import axis.*;import distn.*;public class BackgroundNormalArtist implements BackgroundArtistInterface {	private DistnInfo distnInfo;		private String distnKey;	private DataSet data;		private int outlineX[];	private int outlineY[];	private int pointsUsed;		private Color shadeColor = Color.lightGray;	private Color highlightColor = Color.blue;		private double maxDensityFactor = 1.2;		private boolean horizNotVert = true;	private int displayHeight, displayXOffset;		public BackgroundNormalArtist(String distnKey, DataSet data) {		this.distnKey = distnKey;		this.data = data;		ContinDistnVariable distn = (ContinDistnVariable)data.getVariable(distnKey);		distnInfo = distn.getDistnInfo();	}		public void changeDistnKey(String distnKey) {		this.distnKey = distnKey;		resetDistn();	}		public void resetDistn() {	}		private void addPointToPoly(int x, int y) {		if (horizNotVert) {			outlineX[pointsUsed] = displayXOffset + x;			outlineY[pointsUsed ++] = displayHeight - y;		}		else {			outlineY[pointsUsed] = displayHeight - x - displayXOffset;			outlineX[pointsUsed ++] = y;		}	}		public double getMaxDensity() {		return distnInfo.maxDensity() * maxDensityFactor;	}		public void setMaxDensityFactor(double maxDensityFactor) {		this.maxDensityFactor = maxDensityFactor;	}		private void paintPoly(Graphics g, double lowX,											double highX, int maxDisplayHt, Color fillColour, NumCatAxis axis) {		if (lowX >= highX)			return;				ContinDistnVariable distn = (ContinDistnVariable)data.getVariable(distnKey);		if (!distnInfo.sameParams(distn))			distnInfo = distn.getDistnInfo();				DistnPoints p0 = distnInfo.getLowPoints();		DistnPoints p1 = distnInfo.getHighPoints();				if (outlineX == null || outlineX.length != (p0.elementsUsed + p1.elementsUsed + 3)) {			outlineX = new int[p0.elementsUsed + p1.elementsUsed + 3];			outlineY = new int[p0.elementsUsed + p1.elementsUsed + 3];		}				double maxDensity = getMaxDensity();		if (Double.isInfinite(maxDensity)) {			double zNearMode = distnInfo.zMode() + 0.005 * (distnInfo.zMax() - distnInfo.zMode());			maxDensity = distnInfo.getDensity(zNearMode) * maxDensityFactor;		}				pointsUsed = 0;//		int lowXPos = axis.numValToRawPosition(lowX);//		int highXPos = axis.numValToRawPosition(highX);		double zMin = distnInfo.isSymmetric() ? 2 * distnInfo.zMode() - distnInfo.zMax() : distnInfo.zMin();		int lowXPos = axis.numValToRawPosition(Math.max(lowX, distn.zToX(zMin)));		int highXPos = axis.numValToRawPosition(Math.min(highX, distn.zToX(distnInfo.zMax())));				addPointToPoly(lowXPos, 0);		int lowDensity = (int)Math.round(distnInfo.lookup(distn.xToZ(lowX)) / maxDensity * maxDisplayHt);		addPointToPoly(lowXPos, lowDensity);				for (int i=p0.elementsUsed-1 ; i>=0 ; i--) {			double nextX = distn.zToX(p0.z[i]);			if (nextX > lowX && nextX < highX) {				int endX = axis.numValToRawPosition(nextX);				int endY = (int)Math.round(p0.d[i] / maxDensity * maxDisplayHt); 				addPointToPoly(endX, endY);			}		}		for (int i=1 ; i<p1.elementsUsed ; i++) {			double nextX = distn.zToX(p1.z[i]);			if (nextX > lowX && nextX < highX) {				int endX = axis.numValToRawPosition(nextX);				int endY = (int)Math.round(p1.d[i] / maxDensity * maxDisplayHt); 				addPointToPoly(endX, endY);			}		}				int highDensity = (int)Math.round(distnInfo.lookup(distn.xToZ(highX)) / maxDensity * maxDisplayHt);		addPointToPoly(highXPos, highDensity);		addPointToPoly(highXPos, 0);				if (fillColour != null) {			Color oldColor = g.getColor();			g.setColor(fillColour);			g.fillPolygon(outlineX, outlineY, pointsUsed);			g.drawPolygon(outlineX, outlineY, pointsUsed);		//		makes sure something is drawn when sd = 0			g.setColor(oldColor);		}		else			g.drawPolygon(outlineX, outlineY, pointsUsed);	}		public void paintDistn(Graphics g, DataView theView, NumCatAxis axis) {		paintDistn(g, theView, axis, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);	}		synchronized public void paintDistn(Graphics g, DataView theView, NumCatAxis axis,															double lowHighlightX, double highHighlightX) {		if (distnKey == null)			return;				horizNotVert = axis instanceof HorizAxis;				displayHeight = theView.getSize().height;		displayXOffset = horizNotVert ? theView.getViewBorder().left : theView.getViewBorder().bottom;					int maxDisplayHt = horizNotVert ? theView.getSize().height - theView.getViewBorder().top													: theView.getSize().width - theView.getViewBorder().right;				lowHighlightX = Math.min(Math.max(lowHighlightX, axis.minOnAxis), axis.maxOnAxis);		highHighlightX = Math.min(Math.max(highHighlightX, axis.minOnAxis), axis.maxOnAxis);		//		System.out.println("lowHighlightX = " + lowHighlightX + ", highHighlightX = " + highHighlightX);				paintPoly(g, axis.minOnAxis, lowHighlightX, maxDisplayHt, highlightColor, axis);		paintPoly(g, lowHighlightX, highHighlightX, maxDisplayHt, shadeColor, axis);		paintPoly(g, highHighlightX, axis.maxOnAxis, maxDisplayHt, highlightColor, axis);	}		public void setFillColor(Color c) {		shadeColor = c;	}		public void setHighlightColor(Color c) {		highlightColor = c;	}}