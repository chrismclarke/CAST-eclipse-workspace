package control;import dataView.*;class MeanValueEnumeration implements ValueEnumeration {	private int noInGroup;	private int noOfDecimals;		private ValueEnumeration e;	private boolean lookedAhead = false;	private boolean anotherAvailable;	private double nextMean;	@SuppressWarnings("unused")	private int index = -1;	private double groupVals[];		public MeanValueEnumeration(NumVariable v, int noInGroup, int noOfDecimals) {		e = v.values();		this.noInGroup = noInGroup;		this.noOfDecimals = noOfDecimals;		groupVals = new double[noInGroup];	}		static public double evaluateMeanSummary(double vals[]) {		double sum = 0.0;		for (int i=0 ; i<vals.length ; i++)			sum += vals[i];		return sum / vals.length;	}		public double evaluateSummary(double vals[]) {		return evaluateMeanSummary(vals);	}		public boolean hasMoreValues() {		if (lookedAhead)			return anotherAvailable;		else {			lookedAhead = true;			int noFound = 0;			while (e.hasMoreValues()) {				groupVals[noFound] = e.nextDouble();				noFound++;				if (noFound == noInGroup) {					nextMean = evaluateSummary(groupVals);					anotherAvailable = true;					index++;					return true;				}			}			anotherAvailable = false;			return false;		}	}		public Value nextValue() {		NumValue val = new NumValue(nextDouble(), noOfDecimals);		return val;	}		public double nextDouble() {		if (hasMoreValues()) {			lookedAhead = false;			return nextMean;		}		else			throw new RuntimeException("Error: Attempt to find summary beyond end of data.");	}		public RepeatValue nextGroup() {		return new RepeatValue(nextValue(), 1);	}}public class GroupMeanVariable extends NumFunctionVariable {	protected NumVariable sourceVariable;	protected int decimals;	protected int noInGroup;		public GroupMeanVariable(String theName, NumVariable sourceVariable, int noInGroup, int decimals) {		super(theName);		this.sourceVariable = sourceVariable;		this.decimals = decimals;		this.noInGroup = noInGroup;	}		public int getNoInGroup() {		return noInGroup;	}		public ValueEnumeration values() {		return new MeanValueEnumeration(sourceVariable, noInGroup, decimals);	}		public int getMaxDecimals() {		return decimals;	}		public int noOfValues() {		int sourceVals = sourceVariable.noOfValues();		return sourceVals / noInGroup;	}		public double evaluateSummary(double vals[]) {		return MeanValueEnumeration.evaluateMeanSummary(vals);	}		public Value valueAt(int index) {		ValueEnumeration e = sourceVariable.values();		for (int i=0 ; i<index*noInGroup ; i++)			e.nextDouble();		//	throw away initial values;					double groupVals[] = new double[noInGroup];		for (int i=0 ; i<noInGroup ; i++)			groupVals[i] = e.nextDouble();		NumValue val = new NumValue(evaluateSummary(groupVals), decimals);		return val;	}}