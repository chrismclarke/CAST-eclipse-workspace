package exerciseNumGraph;import dataView.*;import random.*;import exercise2.*;public class DistnGenerator {	static final public int NORMAL = 0;	static final public int TWO_CLUSTER = 1;	static final public int LONG_TAILS = 2;	static final public int RIGHT_SKEW = 3;	static final public int VERY_RIGHT_SKEW = 4;	static final public int LEFT_SKEW = 5;	static final public int VERY_LEFT_SKEW = 6;		static final private String[] kYKey = {"normal", "twoCluster", "longTails", "rightTail",																							"veryRightTail", "leftSkew", "veryLeftTail"};	static final private String[] kBaseKey = {"base_normal", "base_twoCluster", "base_longTails",												"base_rightTail", "base_veryRightTail", "base_leftSkew", "base_veryLeftTail"};		static final private int[] kShortDistns = {NORMAL, TWO_CLUSTER, VERY_RIGHT_SKEW, VERY_LEFT_SKEW};	static final private int[] kLongDistns = {NORMAL, TWO_CLUSTER, LONG_TAILS, RIGHT_SKEW,																										VERY_RIGHT_SKEW, LEFT_SKEW, VERY_LEFT_SKEW};		static final public DistnGenerator[] createGenerators(boolean shortList) {		if (shortList) {			DistnGenerator[] result = new DistnGenerator[kShortDistns.length];			for (int i=0 ; i<result.length ; i++)				result[i] = new DistnGenerator(kShortDistns[i]);			return result;		}		else {			DistnGenerator[] result = new DistnGenerator[kLongDistns.length];			for (int i=0 ; i<result.length ; i++)				result[i] = new DistnGenerator(kLongDistns[i]);			return result;		}	}		private int distnType;	private double neatening;		public DistnGenerator(int distnType) {		this(distnType, 0.3);	}		public DistnGenerator(int distnType, double neatening) {		this.distnType = distnType;		this.neatening = neatening;	}		public String getBaseKey() {		return kBaseKey[distnType];	}		public String getYKey() {		return kYKey[distnType];	}		public RandomContinuous getGenerator(ExerciseApplet applet) {		RandomContinuous result = null;		switch (distnType) {			case NORMAL:				result = new RandomNormal(1, 0.0, 1.0, 2.5);				result.setNeatening(neatening);				break;			case TWO_CLUSTER:				RandomNormal lowClusterGen = new RandomNormal(1, -2.5, 1.0, 2.5);				lowClusterGen.setSeed(applet.nextSeed());				lowClusterGen.setNeatening(neatening);				RandomNormal highClusterGen = new RandomNormal(1, 2.5, 1.0, 2.5);				highClusterGen.setSeed(applet.nextSeed());				highClusterGen.setNeatening(neatening);				result = new RandomMixture(1, lowClusterGen, highClusterGen, 0.5);				break;			case LONG_TAILS:				RandomGamma positiveGen = new RandomGamma(1, 1.0, 1.0, Double.POSITIVE_INFINITY);				positiveGen.setSeed(applet.nextSeed());				positiveGen.setNeatening(neatening);				RandomGamma negativeGen = new RandomGamma(1, 1.0, -1.0, 0.0);				negativeGen.setSeed(applet.nextSeed());				negativeGen.setNeatening(neatening);				negativeGen.setTruncation(Double.NEGATIVE_INFINITY, 0.0);			//	since scale parameter gives negative vals				result = new RandomMixture(1, positiveGen, negativeGen, 0.5);				break;			case RIGHT_SKEW:				result = new RandomGamma(1, 3.0, 1.0, Double.POSITIVE_INFINITY);				result.setNeatening(neatening);				break;			case VERY_RIGHT_SKEW:				result = new RandomGamma(1, 1.0, 1.0, Double.POSITIVE_INFINITY);				result.setNeatening(neatening);				break;			case LEFT_SKEW:				result = new RandomGamma(1, 3.0, -1.0, Double.NEGATIVE_INFINITY);				result.setNeatening(neatening);				break;			case VERY_LEFT_SKEW:				result = new RandomGamma(1, 1.0, -1.0, Double.NEGATIVE_INFINITY);				result.setNeatening(neatening);				break;		}		result.setSeed(applet.nextSeed());		return result;	}		public void generateNextSample(DataSet data, int n) {		NumSampleVariable baseVar = (NumSampleVariable)data.getVariable(getBaseKey());		baseVar.setSampleSize(n);		baseVar.generateNextSample();	}}