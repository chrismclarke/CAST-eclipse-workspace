package randomStatProg;import java.awt.*;import java.util.*;import dataView.*;import utils.*;import randomStat.*;import qnUtils.*;import distn.*;import distribution.*;public class BinomialCalcApplet extends QuestionApplet {	static final private int kMaxN = 100;	static final private int kStartN = 20;		protected boolean testNotProb() {		return false;	}		protected double questionProportion() {		return 0.45;	}		protected void addQuestionFields(QuestionPanel question, StringTokenizer st) {		XLabel nEdit = new XLabel(st.nextToken(), XLabel.LEFT, this);		nEdit.setFont(questionFont);		question.add(QuestionLayout.N, nEdit);				XLabel piEdit = new XLabel(st.nextToken(), XLabel.LEFT, this);		piEdit.setFont(questionFont);		piEdit.setForeground(Color.blue);		question.add(QuestionLayout.PI, piEdit);				XLabel xEdit = new XLabel(st.nextToken(), XLabel.LEFT, this);		xEdit.setFont(questionFont);		question.add(QuestionLayout.X1_VALUE, xEdit);	}		protected XPanel workingPanel() {		XPanel thePanel = new XPanel();		thePanel.setLayout(new BorderLayout(0, 4));				thePanel.add("Center", new BinomialDistnPanel(this, kMaxN, kStartN,											ProportionLayout.VERTICAL, DiscreteProbView.DRAG_CUMULATIVE));				return thePanel;	}		protected String[] getAnswerStrings() {		String nString = question.getValueString(QuestionLayout.N);//		int n = Integer.parseInt(nString);			String piString = question.getValueString(QuestionLayout.PI);//		double pi = Double.parseDouble(piString);				String xString = question.getValueString(QuestionLayout.X1_VALUE);		int x = Integer.parseInt(xString);				String adviceString;		if (tailString.equals("LT"))			adviceString = "The probability is the sum of probabilities below " + String.valueOf(x - 1) + ".5.";		else if (tailString.equals("LE"))			adviceString = "The probability is the sum of probabilities below " + String.valueOf(x) + ".5.";		else if (tailString.equals("GT"))			adviceString = "The probability is 1.0 minus the sum of probabilities below " + String.valueOf(x) + ".5.";		else if (tailString.equals("GE"))			adviceString = "The probability is 1.0 minus the sum of probabilities below " + String.valueOf(x - 1) + ".5.";		else if (tailString.equals("EQ"))			adviceString = "The probability is the difference between the sums of probabilities below " + String.valueOf(x) + ".5 and " + String.valueOf(x - 1) + ".5.";		else			adviceString = "The probability is 1.0 minus the difference between the sums of probabilities below " + String.valueOf(x) + ".5 and " + String.valueOf(x - 1) + ".5.";				String solnString = "The probability is " + answer.toString();				String answerString[] = new String[5];				answerString[LinkedAnswerEditPanel.NONE] = "Find the probability to within "																+ approxString + " of the correct value.";		answerString[LinkedAnswerEditPanel.EXACT] = "Probability is correct!  " + solnString;		answerString[LinkedAnswerEditPanel.WRONG] = "Probability is wrong.  Set the sliders to n = " + nString + " and pi = " + piString + ". " + adviceString;		answerString[LinkedAnswerEditPanel.UNKNOWN] = "Error! You have not typed a valid number.";		answerString[LinkedAnswerEditPanel.CLOSE] = "Probability is close enough!  " + solnString;		return answerString;	}		protected HypothesisTest findTestInfo(String tailString, String[] paramString) {		return null;	}		protected double getAccuracy(double slopValue) {		return slopValue;	}		protected String[] getNewValueStrings(StringTokenizer st) {		String nString = nextRandomValue(st);		String piString = nextRandomValue(st);		String sdFactorString = nextRandomValue(st);				double pi = Double.parseDouble(piString);		int n = Integer.parseInt(nString);		double sdFactor = Double.parseDouble(sdFactorString);				double mean = n * pi;		double sd = Math.sqrt(mean * (1.0 - pi));		int x = (int)Math.round(mean + sd * sdFactor);		x = Math.min(n, Math.max(0, x));		String xString = String.valueOf(x);				String valueString[] = {null, null, xString, null, null, null, nString, piString};		return valueString;	}		protected void setupAnswer() {		String nString = question.getValueString(QuestionLayout.N);		int n = Integer.parseInt(nString);				String piString = question.getValueString(QuestionLayout.PI);		double pi = Double.parseDouble(piString);				String xString = question.getValueString(QuestionLayout.X1_VALUE);		int x = Integer.parseInt(xString);				double prob = 0.0;		if (tailString.equals("LT"))			prob = BinomialTable.cumulative(x - 1, n, pi);		else if (tailString.equals("LE"))			prob = BinomialTable.cumulative(x, n, pi);		else if (tailString.equals("GT"))			prob = 1.0 - BinomialTable.cumulative(x, n, pi);		else if (tailString.equals("GE"))			prob = 1.0 - BinomialTable.cumulative(x - 1, n, pi);		else if (tailString.equals("EQ"))			prob = BinomialTable.cumulative(x, n, pi) - BinomialTable.cumulative(x - 1, n, pi);		else			prob = 1.0 - (BinomialTable.cumulative(x, n, pi) - BinomialTable.cumulative(x - 1, n, pi));				answer = new NumValue(prob, 4);	}}