package utils;import java.awt.*;import dataView.*;public class XTextArea extends BufferedCanvas {	static final private int kLeftRightBorder = 7;	static final private int kTopBottomBorder = 5;		private String theText[];	private int textIndex = 0;	private int charWidth, pixWidth, textPixWidth;		private boolean initialised = false;	private int ascent, descent, leading;		static private String[] stringToArray(String theText) {		String s[] = new String[1];		s[0] = theText;		return s;	}		public XTextArea(String theText[], int charWidth, int pixWidth, XApplet applet) {											//		only one of charWidth and pixWidth must be >0		super(applet);		this.theText = theText;		this.charWidth = charWidth;		this.pixWidth = pixWidth;		setFont(applet.getStandardBoldFont());	}		public XTextArea(String theText, int charWidth, int pixWidth, XApplet applet) {											//		only one of charWidth and pixWidth must be >0		this(stringToArray(theText), charWidth, pixWidth, applet);	}		public void changeText(String theText[]) {		this.theText = theText;				//		does not check whether new text is too big to fit	}		public void setText(String newText) {		changeText(stringToArray(newText));		setText(0);	}//-----------------------------------------------------------------------------------	protected boolean needsHitToDrag() {		return true;	}		protected boolean canDrag() {		return false;	}		protected boolean startDrag(PositionInfo startInfo) {		return false;	}		protected void doDrag(PositionInfo fromPos, PositionInfo toPos) {	}		protected void endDrag(PositionInfo startPos, PositionInfo endPos) {	}//-----------------------------------------------------------------------------------		private void initialise(Graphics g) {		FontMetrics fm = g.getFontMetrics();		ascent = fm.getAscent();		leading = fm.getLeading();		descent = fm.getDescent();		if (pixWidth <= 0)			textPixWidth = charWidth * fm.getMaxAdvance();		else			textPixWidth = pixWidth - 2 * kLeftRightBorder;		initialised = true;	}		public Dimension getMinimumSize() {		Graphics g = getGraphics();		g.setFont(getFont());		if (!initialised)			initialise(g);				int maxLines = 1;		for (int i=0 ; i<theText.length ; i++)			if (theText[i] != null) {				StringLineTokenizer slt = new StringLineTokenizer(theText[i], g, textPixWidth);				int lines = 0;				while (slt.hasMoreLines()) {					lines++;					slt.nextLine();				}				if (lines > maxLines)					maxLines = lines;			}		return new Dimension(2 * kLeftRightBorder + textPixWidth,												2 * kTopBottomBorder + maxLines * (ascent + descent + leading)); 	}		public Dimension getPreferredSize() {		return getMinimumSize();	}		public void setText(int textIndex) {		if (textIndex >= 0 && textIndex < theText.length) {			this.textIndex = textIndex;			repaint();		}	}		public void corePaint(Graphics g) {		if (!initialised)			initialise(g);					g.setColor(getBackground());		g.fillRect(3, 3, getSize().width - 6, getSize().height - 6);		g.setColor(Color.black);		g.drawRect(2, 2, getSize().width - 5, getSize().height - 5);				g.setColor(Color.lightGray);		g.drawLine(0, 0, getSize().width - 1, 0);		g.drawLine(0, 0, 0, getSize().height - 1);		g.drawLine(1, 1, getSize().width - 2, 1);		g.drawLine(1, 1, 1, getSize().height - 2);				g.setColor(Color.white);		g.drawLine(1, getSize().height - 1, getSize().width - 1, getSize().height - 1);		g.drawLine(getSize().width - 1, 1, getSize().width - 1, getSize().height - 1);		g.drawLine(2, getSize().height - 2, getSize().width - 1, getSize().height - 2);		g.drawLine(getSize().width - 2, 2, getSize().width - 2, getSize().height - 1);				g.setColor(getForeground());		int vertPos = ascent + kTopBottomBorder;				StringLineTokenizer slt = new StringLineTokenizer(theText[textIndex], g, getSize().width - 2 * kLeftRightBorder);		while (slt.hasMoreLines()) {			g.drawString(slt.nextLine(), kLeftRightBorder, vertPos);			vertPos += (ascent + descent + leading);		}	}}