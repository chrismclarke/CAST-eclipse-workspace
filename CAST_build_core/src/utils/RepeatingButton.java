package utils;import java.awt.*;import java.awt.event.*;import dataView.*;public class RepeatingButton extends XButton implements Runnable, MouseListener {	static private final int kInitialWait = 300;	static private final int kStartChangesPerSecond = 3;	static private final int kEndChangesPerSecond = 10;	static private final int kStartRepeats = 5;//	static private final int kEndRepeats = 1000;		private Thread runner;		public RepeatingButton(String label, XApplet applet) {		super(label, applet);		swingButton.addMouseListener(this);	}		@SuppressWarnings("deprecation")	public void finalize() throws Throwable {		if (runner != null)			runner.stop();	}		private int currentClickCount = 0;	private boolean mouseIsPressed = false;		@SuppressWarnings("deprecation")	public void run() {		while(true)			try {				Thread.sleep(currentClickCount == 0 ? kInitialWait							: currentClickCount <= kStartRepeats ? 1000 / kStartChangesPerSecond							: 1000 / kEndChangesPerSecond);					if (isEnabled())						postEvent(new Event(this, Event.ACTION_EVENT, null));					currentClickCount ++;			} catch (InterruptedException e) {			}	}		public void mousePressed(MouseEvent e) {		if (!isEnabled())			return;		mouseIsPressed = true;				mouseEntered(e);	}		public void mouseReleased(MouseEvent e) {		mouseIsPressed = false;		mouseExited(e);	}		public void mouseEntered(MouseEvent e) {		if (!mouseIsPressed)			return;		currentClickCount = 0;		if (runner == null) {			runner = new Thread(this);			runner.start();		}	}		@SuppressWarnings("deprecation")	public void mouseExited(MouseEvent e) {		if (runner != null) {			runner.stop();			runner = null;		}	}		public void mouseClicked(MouseEvent e) {//		postEvent(new Event(this, Event.ACTION_EVENT, null));	}}