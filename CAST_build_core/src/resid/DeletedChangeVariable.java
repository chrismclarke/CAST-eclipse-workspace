package resid;import dataView.*;import models.*;public class DeletedChangeVariable extends NumFunctionVariable {	static final public int FIT = 0;	static final public int INTERCEPT = 1;	static final public int SLOPE = 2;		private DataSet data;	private String yKey, xKey, lsKey, deletedLSKey;	private int decimals;	private int paramType;		public DeletedChangeVariable(String theName, DataSet data, String yKey, String xKey,													String lsKey, String deletedLSKey, int paramType, int decimals) {		super(theName);		this.data = data;		this.yKey = yKey;		this.xKey = xKey;		this.lsKey = lsKey;		this.deletedLSKey = deletedLSKey;		this.paramType = paramType;		this.decimals = decimals;	}		public boolean noteVariableChange(String key) {		boolean changed = yKey.equals(key) || xKey.equals(key) || deletedLSKey.equals(key)																																		|| lsKey.equals(key);		if (changed)			clearSortedValues();		return changed;	}//--------------------------------------------------------		public int getMaxDecimals() {		return decimals;	}		public int noOfValues() {		return ((NumVariable)data.getVariable(yKey)).noOfValues();	}		public Value valueAt(int index) {		LinearModel ls = (LinearModel)data.getVariable(lsKey);		LinearModel deletedLS = (LinearModel)data.getVariable(deletedLSKey);		if (deletedLS.setDeletedIndex(index))			deletedLS.updateLSParams(yKey);				switch (paramType) {			case INTERCEPT:				return new NumValue(ls.getIntercept().toDouble() - deletedLS.getIntercept().toDouble(), decimals);			case SLOPE:				return new NumValue(ls.getSlope().toDouble() - deletedLS.getSlope().toDouble(), decimals);			case FIT:				double x = ((NumVariable)data.getVariable(xKey)).doubleValueAt(index);				return new NumValue(ls.evaluateMean(x) - deletedLS.evaluateMean(x), decimals);		}				return null;	}}