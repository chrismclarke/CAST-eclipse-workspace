package resid;import dataView.*;import models.*;public class LeverageValueVariable extends NumFunctionVariable {	static final public int LEVERAGE = 0;	static final public int ANTI_LEVERAGE = 1;		static private String[] makeArray(String s) {		String[] sArray = new String[1];		sArray[0] = s;		return sArray;	}			protected DataSet data;	private String lineKey;	protected String xKey[];	private int valueType;	protected int decimals;		private double scaleFactor = 1.0;		//	set to sigma2 to find var(fitted val) or var(resid)		protected NumValue tempX[];		public LeverageValueVariable(String theName, DataSet data, String[] xKey,																						String lineKey, int valueType, int decimals) {		super(theName);		this.data = data;		this.xKey = xKey;		this.lineKey = lineKey;		this.valueType = valueType;		this.decimals = decimals;				tempX = new NumValue[xKey.length];	}		public LeverageValueVariable(String theName, DataSet data, String oneXKey,																						String lineKey, int valueType, int decimals) {		this(theName, data, makeArray(oneXKey), lineKey, valueType, decimals);	}		public void setScaleFactor(double scaleFactor) {		this.scaleFactor = scaleFactor;	}		public boolean noteVariableChange(String key) {		boolean changed = lineKey.equals(key);		for (int i=0 ; i<xKey.length ; i++)			changed = changed | xKey[i].equals(key);				if (changed)			clearSortedValues();		return changed;	}//--------------------------------------------------------		public int getMaxDecimals() {		return decimals;	}		public int noOfValues() {		return ((NumVariable)data.getVariable(xKey[0])).noOfValues();	}		public Value valueAt(int index) {		CoreModelVariable theModel = (CoreModelVariable)data.getVariable(lineKey);		for (int i=0 ; i<xKey.length ; i++)			tempX[i] = (NumValue)((NumVariable)data.getVariable(xKey[i])).valueAt(index);				double leverage = theModel.getLeverage(tempX) * scaleFactor;		double antiLeverage = Math.sqrt(1.0 - leverage) * scaleFactor;				return new NumValue((valueType == LEVERAGE) ? leverage : antiLeverage, decimals);	}}