package varianceProg;import java.util.*;import dataView.*;import random.*;import distn.*;import inferenceProg.*;import variance.*;public class CIforStDevnApplet extends SampleIntervalApplet {	static final protected String SD_NAME_PARAM = "sdName";	static final protected String RANDOM_RECT_PARAM = "randomRect";	static final protected String RANDOM_GAMMA_PARAM = "randomGamma";		protected DataSet getData() {		String randomRectString = getParameter(RANDOM_RECT_PARAM);		String randomGammaString = getParameter(RANDOM_GAMMA_PARAM);		if (randomRectString == null && randomGammaString == null)			return super.getData();		else {			DataSet data = new DataSet();						RandomContinuous generator;			String paramString;			if (randomRectString != null) {				paramString = getParameter(RANDOM_RECT_PARAM);				generator = new RandomRectangular(paramString);			}			else {				paramString = getParameter(RANDOM_GAMMA_PARAM);				generator = new RandomGamma(paramString);			}			int decimals = Integer.parseInt(getParameter(DATA_DECIMALS_PARAM));			NumVariable y = new NumSampleVariable(getParameter(VAR_NAME_PARAM), generator, decimals);			data.addVariable("y", y);						ContinDistnVariable dataDistn;			if (randomRectString != null)				dataDistn = new RectangularDistnVariable("data model");			else				dataDistn = new GammaDistnVariable("data model");						StringTokenizer st = new StringTokenizer(paramString);			noOfValues = Integer.parseInt(st.nextToken());			NumValue modelParam1 = new NumValue(st.nextToken());			NumValue modelParam2 = new NumValue(st.nextToken());						dataDistn.setParams(modelParam1.toString() + " " + modelParam2.toString());			data.addVariable("model", dataDistn);						return data;		}	}		protected SummaryDataSet getSummaryData(DataSet sourceData) {		SummaryDataSet summaryData = new SummaryDataSet(sourceData, "y");				int decimals = Integer.parseInt(getParameter(SUMMARY_DECIMALS_PARAM));		CiForSDVariable ci = new CiForSDVariable(getParameter(SD_NAME_PARAM), "y", decimals);				summaryData.addVariable("ci", ci);				return summaryData;	}		protected boolean onlyShowSummaryScale() {		return true;	}}