package matrix;import java.awt.*;import dataView.*;public class MatrixBinary extends MatrixFormulaPanel {	static final public int PLUS = 0;	static final public int MINUS = 1;	static final public int TIMES = 2;	static final public int EQUALS = 3;		static final private int kPlusMinusWidth = 20;	static final private int kTimesWidth = 8;	static final private int kEqualsWidth = 40;		private int operator;	private MatrixFormulaPanel val1, val2;		public MatrixBinary(int operator, MatrixFormulaPanel val1, MatrixFormulaPanel val2, XApplet applet) {		this.operator = operator;		this.val1 = val1;		this.val2 = val2;		add(val1);		add(val2);	}		private int operatorWidth() {		return (operator == EQUALS) ? kEqualsWidth					: (operator == TIMES) ? kTimesWidth					: kPlusMinusWidth;	}		protected void doInitialisation(Graphics g) {		super.doInitialisation(g);				val1.initialise(val1.getGraphics());		val2.initialise(val2.getGraphics());				layoutWidth = val1.layoutWidth + operatorWidth() + val2.layoutWidth;				layoutHeadingHeight = Math.max(val1.layoutHeadingHeight, val2.layoutHeadingHeight);		layoutHeight = layoutHeadingHeight + Math.max(val1.layoutHeight - val1.layoutHeadingHeight,																								val2.layoutHeight - val2.layoutHeadingHeight);	}		public void layoutContainer(Container parent) {		initialise(getGraphics());		int horizStart = (parent.getSize().width - layoutWidth) / 2;				int val1Top = layoutHeadingHeight - val1.layoutHeadingHeight;		val1.setBounds(horizStart, val1Top, val1.layoutWidth,																Math.min(parent.getSize().height - val1Top, val1.layoutHeight));		horizStart += val1.layoutWidth + operatorWidth();				int val2Top = layoutHeadingHeight - val2.layoutHeadingHeight;		val2.setBounds(horizStart, val2Top, val2.layoutWidth,																Math.min(parent.getSize().height - val2Top, val2.layoutHeight));	}		protected void paintAroundItems(Graphics g) {		int horizStart = (getSize().width - layoutWidth) / 2 + val1.layoutWidth;		int center = horizStart + operatorWidth() / 2;				int vert = layoutHeadingHeight + Math.min(getSize().height / 2, Math.max(val1.layoutHeight - val1.layoutHeadingHeight,																						val2.layoutHeight - val2.layoutHeadingHeight) / 2);				switch (operator) {			case PLUS:				g.drawLine(center - 3, vert, center + 3, vert);				g.drawLine(center, vert - 3, center, vert + 3);				break;			case MINUS:				g.drawLine(center - 3, vert, center + 3, vert);				break;			case TIMES:				break;			case EQUALS:				g.drawLine(center - 3, vert - 2, center + 3, vert - 2);				g.drawLine(center - 3, vert + 1, center + 3, vert + 1);				break;		}	}}