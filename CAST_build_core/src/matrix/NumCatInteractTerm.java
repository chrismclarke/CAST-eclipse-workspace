package matrix;import java.awt.*;import dataView.*;public class NumCatInteractTerm extends VariateTerm {	static final private int kLevelGap = 12;	static final private int kGenericRowGap = 1;		private String kInteractionString;		static final private NumValue kZero = new NumValue(0.0, 0);		private String xCatKey;	private String genericVarName;		public NumCatInteractTerm(DataSet data, String yKey, String xCatKey,						boolean varNameHeading, String coeffBase, int startSubscript,						String genericVarName, Color termColor, XApplet applet) {		super(data, yKey, varNameHeading, coeffBase, startSubscript, null, termColor);		this.xCatKey = xCatKey;		this.genericVarName = genericVarName;		kInteractionString = applet.translate("interaction");	}		public int noOfParameters() {		CatVariable xVar = (CatVariable)data.getVariable(xCatKey);		return xVar.noOfCategories() - 1;	}	//----------------------------------		public Dimension matrixHeadingSize(Graphics g) {		Dimension dim = super.matrixHeadingSize(g);		if (dim != null)			dim.height += kCurlyBracketHeight;		return dim;	}		public void drawMatrixHeading(int center, int bottom, Graphics g) {		if (varNameHeading) {			drawCurlyBracket(center, matrixColumnWidth(g) + 8, bottom, g);						super.drawMatrixHeading(center, bottom - kCurlyBracketHeight, g);		}	}	//----------------------------------		public int matrixColumnWidth(Graphics g) {		int nColumns = noOfParameters();		return nColumns * maxValueWidth + (nColumns - 1) * kLevelGap;	}		public void drawMatrixValue(int row, int colRight, int baseline, Graphics g) {		CatVariable xVar = (CatVariable)data.getVariable(xCatKey);		NumVariable yVar = (NumVariable)data.getVariable(key);		int cat = xVar.getItemCategory(row);		int noOfCats = xVar.noOfCategories();				for (int i=noOfCats-1 ; i>0 ; i--) {			NumValue val = (i == cat) ? (NumValue)yVar.valueAt(row) : kZero;			val.drawRight(g, colRight - maxValueWidth, baseline);			colRight -= (maxValueWidth + kLevelGap);		}	}	//----------------------------------		private int singleTermWidth(Graphics g, boolean withPlus) {		int width = maxValueWidth + kValueCoeffGap + maxParamWidth(g);		if (withPlus)			width += plusWidth(g);		return width;	}		public int maxLinearPartWidth(Graphics g, boolean withPlus) {		return noOfParameters() * singleTermWidth(g, withPlus);	}		public void drawLinearPartString(int row, int horiz, int baseline,																									boolean withPlus, Graphics g) {		CatVariable xVar = (CatVariable)data.getVariable(xCatKey);		Variable yVar = (Variable)data.getVariable(key);				int cat = xVar.getItemCategory(row);		Value y = yVar.valueAt(row);				if (cat > 0) {			horiz += (cat - 1) * singleTermWidth(g, withPlus);						horiz = drawPlus(horiz, baseline, withPlus, g);			int valueRight = horiz + maxValueWidth;						y.drawLeft(g, valueRight, baseline);			horiz = valueRight + kValueCoeffGap;						drawParameter(cat - 1, horiz, baseline, g);		}	}		public void drawLinearPartString(Flags selection, int horiz, int baseline,																									boolean withPlus, Graphics g) {		CatVariable xVar = (CatVariable)data.getVariable(xCatKey);//		Variable yVar = (Variable)data.getVariable(key);		int row = selection.findSingleSetFlag();		if (row >= 0)			drawLinearPartString(row, horiz, baseline, withPlus, g);		else {			Value selectedX = xVar.valueAt(selection.findFirstSetFlag());						ValueEnumeration xe = xVar.values();			FlagEnumeration fe = selection.getEnumeration();			while (xe.hasMoreValues() && fe.hasMoreFlags()) {				Value x = xe.nextValue();				boolean isSelected = fe.nextFlag();				if (isSelected && x != selectedX) {					selectedX = null;					break;				}			}						if (selectedX == null)		//	several categories				g.drawString("+ ??", horiz, baseline);			else {				int cat = xVar.labelIndex(selectedX);								if (cat > 0) {					horiz += (cat - 1) * singleTermWidth(g, withPlus);										horiz = drawPlus(horiz, baseline, withPlus, g);										drawParameter(cat - 1, horiz, baseline, g);					horiz += maxParamWidth(g) + kValueCoeffGap;										g.drawString(genericVarName, horiz, baseline);				}			}		}	}	//----------------------------------		public int getGenericTermHeight(Graphics g) {		FontMetrics fm = g.getFontMetrics();		return super.getGenericTermHeight(g) + fm.getAscent() + fm.getDescent() + kGenericRowGap;	}		private int onlyGenericTermWidth(Graphics g, boolean withPlus) {		FontMetrics fm = g.getFontMetrics();		int effectStringWidth = fm.stringWidth(kInteractionString);		int varNameWidth = matrixHeadingSize(g).width;				int width = Math.max(effectStringWidth, varNameWidth);		if (withPlus)			width += plusWidth(g);		return width;	}		public int getGenericTermWidth(Graphics g, boolean withPlus) {		return Math.max(onlyGenericTermWidth(g, withPlus), maxLinearPartWidth(g, withPlus));	}		public void drawGenericTerm(int horiz, int baseline,																									boolean withPlus, Graphics g) {		int linWidth = maxLinearPartWidth(g, withPlus);		int genericWidth = onlyGenericTermWidth(g, withPlus);		int overallWidth = Math.max(linWidth, genericWidth);		horiz += (overallWidth - genericWidth) / 2;				g.setColor(getTermColor());		horiz = drawPlus(horiz, baseline, withPlus, g);				int varNameWidth = matrixHeadingSize(g).width;		FontMetrics fm = g.getFontMetrics();		int effectStringWidth = fm.stringWidth(kInteractionString);				int center = horiz + getGenericTermWidth(g, false) / 2;				int halfLineOffset = (fm.getAscent() + fm.getDescent() + kGenericRowGap) / 2;				g.drawString(getHeadingString(), center - varNameWidth / 2, baseline - halfLineOffset);		g.drawString(kInteractionString, center - effectStringWidth / 2, baseline + halfLineOffset);	}}