package matrix;import java.awt.*;import dataView.*;abstract public class ModelTerm {	static final public String ALPHA = "\u03B1";	static final public String BETA = "\u03B2";	static final public String GAMMA = "\u03B3";	static final public String DELTA = "\u03B4";	static final public String EPSILON = "\u03B5";	static final public String MU = "\u03BC";		static final private char ZERO_SUBSCRIPT = '\u2080';		static final public char HAT = '\u0302';	static final public char BAR = '\u0305';		static final protected int kCurlyBracketHeight = 5;	static final private String kPlusString = "+";	static final private int kPlusGap = 5;		static final private int kSuperscriptOffset = 5;	static final private int kSuperScale = 7;	static final private int kPowerGap = 2;		static protected void drawCurlyBracket(int center, int width, int bottom, Graphics g) {		int left = center - width / 2;		g.drawLine(left, bottom - 2, left, bottom - 3);		g.drawLine(left, bottom - 3, left + 1, bottom - 4);				g.drawLine(left + 1, bottom - 4, center - 2, bottom - 4);		g.drawLine(center - 2, bottom - 4, center, bottom - 6);		g.drawLine(center, bottom - 6, center + 2, bottom - 4);		g.drawLine(center + 2, bottom - 4, left + width - 1, bottom - 4);				g.drawLine(left + width - 1, bottom - 4, left + width, bottom - 3);		g.drawLine(left + width, bottom - 3, left + width, bottom - 2);	}		static protected String createIndexedString(String symbol, int index) {		if (index >= 0) {			if (index < 10) {				char sub = (char)(ZERO_SUBSCRIPT + index);				symbol += sub;			}			else {				char sub = (char)(ZERO_SUBSCRIPT + (index / 10));				symbol += sub;				sub = (char)(ZERO_SUBSCRIPT + (index % 10));				symbol += sub;			}		}		return symbol;	}		static private Font setSuperscriptFont(Graphics g) {		Font normalFont = g.getFont();		Font superscriptFont = new Font(normalFont.getName(), normalFont.getStyle(),																								normalFont.getSize() * kSuperScale / 10);		g.setFont(superscriptFont);		return normalFont;	}		private String coeffBase;	private int startSubscript;		//	-1 means no subscript	private Color termColor;		protected int power = 0;	protected int powerWidth;		private boolean initialised = false;		protected ModelTerm(String coeffBase, int startSubscript, Color termColor) {																							//		startSubscript = -1 means no subscript		this.coeffBase = coeffBase;		this.startSubscript = startSubscript;		this.termColor = termColor;	}		public void setPower(int power) {		this.power = power;	}		public void setStartSubscript(int startSubscript) {		this.startSubscript = startSubscript;	}		public Color getTermColor() {		return termColor;	}		protected void doInitialisation(Graphics g) {		if (power > 1) {			Font normalFont = setSuperscriptFont(g);			powerWidth = g.getFontMetrics().stringWidth("0") + kPowerGap;			g.setFont(normalFont);		}		else			powerWidth = 0;	}		final protected boolean initialise(Graphics g) {		if(initialised)			return false;		else {			doInitialisation(g);			initialised = true;			return true;		}	}		protected void drawPower(int horiz, int baseline, Graphics g) {		Font normalFont = setSuperscriptFont(g);		g.drawString(String.valueOf(power), horiz + kPowerGap, baseline - kSuperscriptOffset);		g.setFont(normalFont);	}		protected int powerAscent(Graphics g) {		Font normalFont = setSuperscriptFont(g);		int superAscent = kSuperscriptOffset + g.getFontMetrics().getAscent();		g.setFont(normalFont);		return superAscent;	}		public int noOfParameters() {		return 1;	}	//----------------------------------		abstract public Dimension matrixHeadingSize(Graphics g);		abstract public void drawMatrixHeading(int center, int bottom, Graphics g);	//----------------------------------		abstract public int matrixColumnWidth(Graphics g);		abstract public void drawMatrixValue(int row, int colRight, int baseline, Graphics g);	//----------------------------------		public int maxParamWidth(Graphics g) {		if (coeffBase == null)			return 0;		String param = createIndexedString(coeffBase, startSubscript + noOfParameters() - 1);		return g.getFontMetrics().stringWidth(param);	}		public void drawParameter(int paramIndex, int horiz, int baseline, Graphics g) {		if (coeffBase != null) {			String param = createIndexedString(coeffBase, startSubscript + paramIndex);			g.drawString(param, horiz, baseline);		}	}	//----------------------------------		public int maxLinearPartWidth(Graphics g, boolean withPlus) {		return withPlus ? plusWidth(g) : 0;	}		protected int plusWidth(Graphics g) {		return g.getFontMetrics().stringWidth(kPlusString) + 2 * kPlusGap;	}		protected int drawPlus(int horiz, int baseline, boolean withPlus, Graphics g) {		if (withPlus) {			Color c = g.getColor();			g.setColor(Color.black);			g.drawString(kPlusString, horiz + kPlusGap, baseline);			g.setColor(c);			horiz += plusWidth(g);		}		return horiz;	}		abstract public void drawLinearPartString(Flags selection, int horiz, int baseline,																									boolean withPlus, Graphics g);		abstract public void drawLinearPartString(int row, int horiz, int baseline,																									boolean withPlus, Graphics g);	//----------------------------------		public int getGenericTermHeight(Graphics g) {		FontMetrics fm = g.getFontMetrics();		return fm.getAscent() + fm.getDescent();	}		public int getGenericTermWidth(Graphics g, boolean withPlus) {		return maxLinearPartWidth(g, withPlus);	}		abstract public void drawGenericTerm(int horiz, int baseline,																									boolean withPlus, Graphics g);	}