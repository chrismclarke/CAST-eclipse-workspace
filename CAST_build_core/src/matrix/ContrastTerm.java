package matrix;import java.awt.*;import dataView.*;public class ContrastTerm extends VariateTerm {	static final private int kGenericRowGap = 1;		static final private String kEffectString = "effect";		private int[] contrastValue;	private String headingString;		private int maxContrastWidth;		public ContrastTerm(DataSet data, String key, int[] contrastValue,						String headingString, String coeffBase, int startSubscript, Color termColor) {		super(data, key, headingString != null, coeffBase, startSubscript, null, termColor);		this.contrastValue = contrastValue;		this.headingString = headingString;	}		protected void doInitialisation(Graphics g) {		super.doInitialisation(g);		maxContrastWidth = 0;		FontMetrics fm = g.getFontMetrics();		for (int i=0 ; i<contrastValue.length ; i++)			maxContrastWidth = Math.max(maxContrastWidth, fm.stringWidth(String.valueOf(contrastValue[i])));	}		public int noOfParameters() {		return 1;	}		public boolean isSingleIndicator() {		boolean indicator = true;		for (int i=0 ; i<contrastValue.length ; i++)			if (contrastValue[i] != 0 && contrastValue[i] != 1)				indicator = false;		return indicator;	}		public int[] getContrastValues() {		return contrastValue;	}	//----------------------------------	protected String getHeadingString() {		return headingString;	}		public int matrixColumnWidth(Graphics g) {		initialise(g);		return maxContrastWidth;	}		public void drawMatrixValue(int row, int colRight, int baseline, Graphics g) {		CatVariable yVar = (CatVariable)data.getVariable(key);		int cat = yVar.getItemCategory(row);		g.drawString(String.valueOf(contrastValue[cat]), colRight - maxContrastWidth, baseline);	}	//----------------------------------		public int maxLinearPartWidth(Graphics g, boolean withPlus) {		initialise(g);		int paramWidth = maxParamWidth(g);		int plusWid = withPlus ? plusWidth(g) : 0;				int countWidth = isSingleIndicator() ? 0 : maxContrastWidth;				return paramWidth + plusWid + countWidth;	}		public void drawLinearPartString(int row, int horiz, int baseline,																									boolean withPlus, Graphics g) {		initialise(g);				CatVariable yVar = (CatVariable)data.getVariable(key);		int cat = yVar.getItemCategory(row);				if (contrastValue[cat] != 0) {			if (withPlus)				horiz = drawPlus(horiz, baseline, true, g);						if (contrastValue[cat] != 1) {				String coeffString = String.valueOf(contrastValue[cat]);				g.drawString(coeffString, horiz, baseline);				horiz += g.getFontMetrics().stringWidth(coeffString);			}			drawParameter(0, horiz, baseline, g);		}	}		public void drawLinearPartString(Flags selection, int horiz, int baseline,																									boolean withPlus, Graphics g) {		initialise(g);				int row = selection.findSingleSetFlag();		if (row >= 0)			drawLinearPartString(row, horiz, baseline, withPlus, g);		else			drawGenericTerm(horiz, baseline, withPlus,  g);	}	//----------------------------------		public int getGenericTermHeight(Graphics g) {		FontMetrics fm = g.getFontMetrics();		return super.getGenericTermHeight(g) + fm.getAscent() + fm.getDescent() + kGenericRowGap;	}		public int getGenericTermWidth(Graphics g, boolean withPlus) {		FontMetrics fm = g.getFontMetrics();		int effectStringWidth = fm.stringWidth(kEffectString);		int contrastNameWidth = fm.stringWidth(headingString);				int width = Math.max(effectStringWidth, contrastNameWidth);		if (withPlus)			width += plusWidth(g);		return Math.max(width, maxLinearPartWidth(g, withPlus));	}		public void drawGenericTerm(int horiz, int baseline,																									boolean withPlus, Graphics g) {		g.setColor(Color.black);		horiz = drawPlus(horiz, baseline, withPlus, g);		g.setColor(getTermColor());				FontMetrics fm = g.getFontMetrics();		int effectStringWidth = fm.stringWidth(kEffectString);		int contrastNameWidth = fm.stringWidth(headingString);				int center = horiz + getGenericTermWidth(g, false) / 2;				int halfLineOffset = (fm.getAscent() + fm.getDescent() + kGenericRowGap) / 2;				g.drawString(headingString, center - contrastNameWidth / 2, baseline - halfLineOffset);		g.drawString(kEffectString, center - effectStringWidth / 2, baseline + halfLineOffset);	}}