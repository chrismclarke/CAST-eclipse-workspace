package matrix;import java.awt.*;import dataView.*;public class SymbolTerm extends ModelTerm {	static final private int kTopBottomHeadingBorder = 2;	static final private int kVarCoeffGap = 2;		private String symbol;	private int maxRow;	private String varNameHeading;		private int maxSymbolWidth, baseSymbolWidth;		public SymbolTerm(String symbol, int maxRow, String varNameHeading,																	String coeffBase, int startSubscript, Color termColor) {		super(coeffBase, startSubscript, termColor);		this.symbol = symbol;		this.maxRow = maxRow;		this.varNameHeading = varNameHeading;	}		protected void doInitialisation(Graphics g) {		super.doInitialisation(g);		String biggestSymbol = createIndexedString(symbol, maxRow);		maxSymbolWidth = g.getFontMetrics().stringWidth(biggestSymbol);		baseSymbolWidth = g.getFontMetrics().stringWidth(symbol);	}	//----------------------------------		public Dimension matrixHeadingSize(Graphics g) {		initialise(g);		if (varNameHeading != null) {			FontMetrics fm = g.getFontMetrics();			int width = fm.stringWidth(varNameHeading);			int height = fm.getAscent() + fm.getDescent();						if (power > 1) {				width += powerWidth + 1;								int ascent = g.getFontMetrics().getAscent();				int superAscent = powerAscent(g);				if (superAscent > ascent)					height += superAscent - ascent;			}			return new Dimension(width, height + 2 * kTopBottomHeadingBorder);		}		else			return null;	}		public void drawMatrixHeading(int center, int bottom, Graphics g) {		initialise(g);		if (varNameHeading != null) {			FontMetrics fm = g.getFontMetrics();			int headingWidth = fm.stringWidth(varNameHeading);			int baseline = bottom - kTopBottomHeadingBorder - fm.getDescent();			int left = center - matrixHeadingSize(g).width / 2;						g.drawString(varNameHeading, left, baseline);			if (power > 1) {				int horiz = left + headingWidth;				drawPower(horiz, baseline, g);			}		}	}	//----------------------------------		public int matrixColumnWidth(Graphics g) {		initialise(g);		return Math.max(maxSymbolWidth, baseSymbolWidth + powerWidth);	}		public void drawMatrixValue(int row, int colRight, int baseline, Graphics g) {		initialise(g);		String s = createIndexedString(symbol, (row + 1));		int left = colRight - matrixColumnWidth(g);		g.drawString(s, left, baseline);		if (power > 1)			drawPower(left + baseSymbolWidth, baseline, g);	}	//----------------------------------		public int maxLinearPartWidth(Graphics g, boolean withPlus) {		initialise(g);		int paramWidth = maxParamWidth(g);		if (paramWidth > 0)			paramWidth += kVarCoeffGap;		return super.maxLinearPartWidth(g, withPlus) + matrixColumnWidth(g) + paramWidth;	}		public void drawLinearPartString(int row, int horiz, int baseline,																									boolean withPlus, Graphics g) {		initialise(g);				horiz = drawPlus(horiz, baseline, withPlus, g);				int paramWidth = maxParamWidth(g);		if (paramWidth > 0) {			drawParameter(0, horiz, baseline, g);			horiz += paramWidth + kVarCoeffGap;		}					int valueRight = horiz + matrixColumnWidth(g);		drawMatrixValue(row, valueRight, baseline, g);	}		public void drawLinearPartString(Flags selection, int horiz, int baseline,																									boolean withPlus, Graphics g) {		initialise(g);		int row = selection.findSingleSetFlag();		if (row >= 0)			drawLinearPartString(row, horiz, baseline, withPlus, g);		else			drawGenericTerm(horiz, baseline, withPlus, g);	}	//----------------------------------		public void drawGenericTerm(int horiz, int baseline,																									boolean withPlus, Graphics g) {		initialise(g);		g.setColor(Color.black);		horiz = drawPlus(horiz, baseline, withPlus, g);		g.setColor(getTermColor());				int paramWidth = maxParamWidth(g);		if (paramWidth > 0) {			drawParameter(0, horiz, baseline, g);			horiz += paramWidth + kVarCoeffGap;		}		g.drawString(symbol, horiz, baseline);		horiz += g.getFontMetrics().stringWidth(symbol);		if (power > 1)			drawPower(horiz, baseline, g);	}}