package histo;import java.awt.*;import dataView.*;import axis.*;public class MultiHistoLayout implements LayoutManager {	static final private int kDensityAxisLeft = -100;		private PlotInfo plotInfo[] = null;	private HorizAxis mainAxis;//	private int vertGap;		public MultiHistoLayout(int vertGap) {//		this.vertGap = vertGap;	}		public void addLayoutComponent(String name, Component comp) {	}		public void removeLayoutComponent(Component comp) {	}		public void setPlotInfo(HorizAxis mainAxis, PlotInfo[] plotInfo) {		this.plotInfo = plotInfo;		this.mainAxis = mainAxis;	}		public Dimension preferredLayoutSize(Container parent) {		return new Dimension(300, 300);				//		this probably won't get called by Applet	}		public Dimension minimumLayoutSize(Container parent) {		return new Dimension(30, 30);				//		this probably won't get called by Applet	}		private void reshapeView(DataView view, int graphLeft, int graphRight, int graphTop, int graphBottom) {		if (view != null) {			Insets gb = view.getViewBorder();			graphLeft -= gb.left;			graphRight += gb.right;							//		Don't change top or bottom or it will overlap axes			view.setBounds(graphLeft, graphTop, graphRight - graphLeft, graphBottom - graphTop);		}	}		public void layoutContainer(Container parent) {		Insets insets = parent.getInsets();		int availableWidth = parent.getSize().width - (insets.left + insets.right);		int availableHeight = parent.getSize().height - (insets.top + insets.bottom);				mainAxis.findLengthInfo(availableWidth, 0, 0);		mainAxis.findAxisWidth();		int arrayItemSize = (availableHeight - mainAxis.axisWidth) / plotInfo.length;		int itemTop = insets.top;				int leftBorder = mainAxis.lowBorder;		int rightBorder = mainAxis.highBorder;		for (int i=0 ; i<plotInfo.length ; i++) {			HorizAxis hAxis = plotInfo[i].horizAxis;			hAxis.findLengthInfo(availableWidth, leftBorder, rightBorder);											//	we assume that they do not change the borders			hAxis.findAxisWidth();			int axisTop = itemTop + arrayItemSize - hAxis.axisWidth;			hAxis.setBounds(insets.left + hAxis.lowBorder - hAxis.lowBorderUsed, axisTop,						hAxis.axisLength + hAxis.lowBorderUsed + hAxis.highBorderUsed,						hAxis.axisWidth);						DensityAxis dAxis = plotInfo[i].densityAxis;			dAxis.findAxisWidth();			dAxis.findLengthInfo(arrayItemSize, hAxis.axisWidth, 0);			dAxis.setBounds(kDensityAxisLeft, axisTop - dAxis.axisLength - dAxis.highBorderUsed,						dAxis.axisWidth,						dAxis.axisLength + dAxis.lowBorderUsed + dAxis.highBorderUsed);						int histoOffset = plotInfo[i].showHisto ? 0 : PlotInfo.kHideShift;			reshapeView(plotInfo[i].theHisto, insets.left + leftBorder,							insets.left + availableWidth - rightBorder, itemTop - histoOffset,							axisTop - histoOffset);			int dotOffset = plotInfo[i].showHisto ? PlotInfo.kHideShift : 0;			reshapeView(plotInfo[i].theDotPlot, insets.left + leftBorder,							insets.left + availableWidth - rightBorder, itemTop - dotOffset,							axisTop - dotOffset);						itemTop += arrayItemSize;		}		mainAxis.setBounds(insets.left + mainAxis.lowBorder - mainAxis.lowBorderUsed, itemTop,						mainAxis.axisLength + mainAxis.lowBorderUsed + mainAxis.highBorderUsed,						mainAxis.axisWidth);	}		public String toString() {		return getClass().getName();	}}