package dataView;import java.awt.*;import java.awt.geom.*;public class Graphics2DActions {	static final public boolean ANTI_ALIASING_ON = true;	static final public boolean ANTI_ALIASING_OFF = false;		//	By keeping everything that refers to a Graphics2D in a separate class,	//	it should be possible to prevent the browser from trying to load the Graphics2D class	//	unless it is implemented by using Class.forName() before this class is used		static public void setAliasing(Graphics g, boolean onNotOff) {		try {			Graphics2D g2D = (Graphics2D)g;						Object drawAntialiasing = onNotOff ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF;			g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, drawAntialiasing);						Object textAntialiasing = onNotOff ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF;			g2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, textAntialiasing);      // to go for quality over speed      			if (onNotOff)				g2D.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);					} catch (Exception e) {		}	}		static public void setScalingTransform(Graphics g, Rectangle sourceRect, int left,																													int top, int width, int height) {		try {			AffineTransform baseTransform = ((Graphics2D)g).getTransform();			double baseScaling = baseTransform.getScaleX();		//		2 for retina display			AffineTransform t = AffineTransform.getTranslateInstance(left * baseScaling + baseTransform.getTranslateX(),																																		top * baseScaling + baseTransform.getTranslateY());			t.scale(width * baseScaling / (double)sourceRect.width, height * baseScaling / (double)sourceRect.height);			t.translate(-sourceRect.x, -sourceRect.y);						((Graphics2D)g).setTransform(t);		} catch (Exception e) {		}	}		static public void setIdentityTransform(Graphics g) {		try {			((Graphics2D)g).setTransform(new AffineTransform());		} catch (Exception e) {		}	}	}