package dataView;import java.util.*;import java.awt.Graphics;class RawValueEnumeration implements ValueEnumeration {	private Enumeration e;		public RawValueEnumeration(Vector v) {		e = v.elements();	}		public boolean hasMoreValues() {		return e.hasMoreElements();	}		public Value nextValue() {		return (Value)e.nextElement();	}		public RepeatValue nextGroup() {		return new RepeatValue((Value)e.nextElement(), 1);	}		public double nextDouble() {		return ((NumValue)e.nextElement()).toDouble();	}}class RepeatValueEnumeration implements ValueEnumeration {	private Enumeration e;	private RepeatValue lastRepeat = null;	private int countSoFar = 0;		RepeatValueEnumeration(Vector v) {		e = v.elements();	}		public boolean hasMoreValues() {		return e.hasMoreElements() || (lastRepeat != null && lastRepeat.count > countSoFar);	}		public Value nextValue() {		if (lastRepeat == null || countSoFar >= lastRepeat.count) {			lastRepeat = (RepeatValue)e.nextElement();			countSoFar = 0;		}		countSoFar ++;		return lastRepeat.val;	}		public RepeatValue nextGroup() {		if (lastRepeat == null || countSoFar >= lastRepeat.count) {			lastRepeat = (RepeatValue)e.nextElement();			countSoFar = lastRepeat.count;			return lastRepeat;		}		else {			int remainingCount = lastRepeat.count - countSoFar;			countSoFar = lastRepeat.count;			return new RepeatValue(lastRepeat.val, remainingCount);		}	}		public double nextDouble() {		return ((NumValue)nextValue()).toDouble();	}}//--------------------------------------------------------public class Variable extends CoreVariable {	static final public boolean NO_REPEATS = false;	static final public boolean USES_REPEATS = true;		protected Vector valueData = new Vector();	private boolean usesGroups = NO_REPEATS;		public Variable(String theName) {		super(theName);	}		public Variable(String theName, boolean usesGroups) {		super(theName);		this.usesGroups = usesGroups;	}		public boolean usesGroups() {		return usesGroups;	}		public int getMaxWidth(Graphics g) {		int maxWidth = 0;		ValueEnumeration e = values();		while (e.hasMoreValues()) {			Value v = usesGroups ? e.nextGroup().val : e.nextValue();			if (v != null) {				int valWidth = v.stringWidth(g);				if (valWidth > maxWidth)					maxWidth = valWidth;			}		}		return maxWidth;	}//--------------------------------------------------------		public void addValue(Value v) {		if (usesGroups)			valueData.addElement(new RepeatValue(v, 1));		else			valueData.addElement(v);	}		public void addGroup(RepeatValue rv) {		if (usesGroups)			valueData.addElement(rv);		else			for (int i=0 ; i<rv.count ; i++)				valueData.addElement(rv.val);	}		public Value valueAt(int index) {		if (usesGroups) {			int countSoFar = 0;			ValueEnumeration e = values();			while (e.hasMoreValues()) {				RepeatValue group = e.nextGroup();				countSoFar += group.count;				if (index < countSoFar)					return group.val;			}			return null;		}		else			return (Value)valueData.elementAt(index);	}		public int indexOf(Value v) {		if (usesGroups) {			int countSoFar = 0;			ValueEnumeration e = values();			while (e.hasMoreValues()) {				RepeatValue group = e.nextGroup();				if (v == group.val)					return countSoFar;				countSoFar += group.count;			}			return -1;		}		else			return valueData.indexOf(v);	}		public int noOfValues() {		if (usesGroups) {			int noOfValues = 0;			ValueEnumeration e = values();			while (e.hasMoreValues()) {				RepeatValue group = e.nextGroup();				noOfValues += group.count;			}			return noOfValues;		}		else			return valueData.size();	}		public ValueEnumeration values() {		if (usesGroups)			return new RepeatValueEnumeration(valueData);		else			return new RawValueEnumeration(valueData);	}		public void setNoOfGroups(int n) {		valueData.setSize(n);	}		public int getNoOfGroups() {		return valueData.size();	}		public void clearData() {		valueData.removeAllElements();	}		public void setValueAt(Object v, int index) {							//		if (usesGroups), this should be ValueGroup, else Value		valueData.setElementAt(v, index);	}		public Value removeValueAt(int index) {		if (usesGroups)				//		not implemented for grouped variable			return null;		Value result = (Value)valueData.elementAt(index);		valueData.removeElementAt(index);		return result;	}		public void insertValueAt(Value v, int index) {		if (usesGroups)				//		not implemented for grouped variable			return;		valueData.insertElementAt(v, index);	}		public void swapValues(int i, int j) {		if (usesGroups)				//		not implemented for grouped variable			return;		Value valueI = valueAt(i);		Value valueJ = valueAt(j);		valueData.setElementAt(valueI, j);		valueData.setElementAt(valueJ, i);	}		protected Value valFromString(String s) {		return new LabelValue(s);				//	should not be called since LabelVariable overrides														//	readValues() and NumVariable and CatVariable														//	override this	}		public void readValues(String valueString) {		clearData();		StringTokenizer theValues = new StringTokenizer(valueString);		while (theValues.hasMoreTokens())			try {				String nextItem = theValues.nextToken();				int repeatIndex = nextItem.indexOf('@');				if (repeatIndex > 0) {					int count = Integer.parseInt(nextItem.substring(0, repeatIndex));					Value val = valFromString(nextItem.substring(repeatIndex + 1));					addGroup(new RepeatValue(val, count));				}				else if (repeatIndex < 0) {					Value val = valFromString(nextItem);					addValue(val);				}			} catch (Exception e) {				System.err.println("Value ignored (format error)");//				throw new RuntimeException("");			}	}}