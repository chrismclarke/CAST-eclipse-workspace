package dataView;import java.util.*;public class CatDistnVariable extends CoreVariable implements CatVariableInterface {	private Vector catLabels = new Vector(8);	private double[] probs;		public CatDistnVariable(String theName) {		super(theName);	}		public void readLabels(String labelString) {		catLabels.removeAllElements();		LabelEnumeration theValues = new LabelEnumeration(labelString);		while (theValues.hasMoreElements()) {			String label = (String)theValues.nextElement();			catLabels.addElement(new LabelValue(label));		}	}		public int noOfCategories() {		return catLabels.size();	}		public Value getLabel(int index) {		return (Value)catLabels.elementAt(index);	}		public void setParams(String s) {		StringTokenizer theValues = new StringTokenizer(s);		int nCats = noOfCategories();		int nProbs = theValues.countTokens();		int nRepeats = nProbs / nCats;			//		can be more than 1 in ContinTableDataSet		probs = new double[nProbs];				for (int rep=0 ; rep<nRepeats ; rep++) {			double sum = 0.0;			for (int i=0 ; i<nCats ; i++) {				probs[rep * nCats + i] = Double.parseDouble(theValues.nextToken());				sum += probs[rep * nCats + i];			}			for (int i=0 ; i<nCats ; i++)				probs[rep * nCats + i] /= sum;		}	}		public void setProbs(double[] newProbs) {		if (probs == null || probs.length != newProbs.length)			probs = new double[newProbs.length];		for (int i=0 ; i<newProbs.length ; i++)			probs[i] = newProbs[i];	}		public double[] getProbs() {		return probs;	}}