package dataView;class CatTransValueEnumeration implements ValueEnumeration {	private int noOfVals;	private int nextIndex;	private CatFunctionVariable transformedVariable;		public CatTransValueEnumeration(CatFunctionVariable transformedVariable) {		this.transformedVariable = transformedVariable;		noOfVals = transformedVariable.noOfValues();		nextIndex = 0;	}		public boolean hasMoreValues() {		return nextIndex < noOfVals;	}		public Value nextValue() {		return transformedVariable.valueAt(nextIndex++);	}		public double nextDouble() {		return 0.0;	}		public RepeatValue nextGroup() {		return new RepeatValue(nextValue(), 1);	}}abstract public class CatFunctionVariable extends CatVariable implements FunctionInterface {	static private final String kInvalidAction = "Invalid operation on function variable";		public CatFunctionVariable(String theName) {		super(theName);	}		public void readValues(String valueString) {		throw new RuntimeException(kInvalidAction);	}		public void setValues(double values[]) {		throw new RuntimeException(kInvalidAction);	}//--------------------------------------------------------		public void noteValueChange(int theIndex) {		noteVariableChange(null);	}		public boolean noteVariableChange(String key) {		return false;	}//--------------------------------------------------------		public void addValue(Value v) {		throw new RuntimeException(kInvalidAction);	}		public int indexOf(Value v) {		throw new RuntimeException(kInvalidAction);	}		public Value removeValueAt(int index) {		throw new RuntimeException(kInvalidAction);	}		public void insertValueAt(Value v, int index) {		throw new RuntimeException(kInvalidAction);	}		public void swapValues(int i, int j) {		throw new RuntimeException(kInvalidAction);	}		public void setNoOfValues(int n) {		throw new RuntimeException(kInvalidAction);	}		public void setValueAt(Value v, int index) {		throw new RuntimeException(kInvalidAction);	}//--------------------------------------------------------		public ValueEnumeration values() {		return new CatTransValueEnumeration(this);	}//--------------------------------------------------------		abstract public int noOfValues();		abstract public Value valueAt(int index);}