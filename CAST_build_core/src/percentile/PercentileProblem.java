package percentile;import dataView.*;import random.*;public class PercentileProblem extends CorePercentileProblem {		private RandomUniform sampSizeGenerator, percentGenerator, returnPeriodGenerator;		private NumValue proportion = new NumValue(0.0, 4);	private NumValue proportionBelow = new NumValue(0.0, 4);		private String unitsString;		public PercentileProblem(DataSet data, String aboutDataText, String[] questionText,									String aboveBelowStrings, int longestQuestionIndex, int[] sampSizeMinMax,									int[] percentMinMax, int[] returnPeriodMinMax, int answerDecimals,									String unitsString) {		super(data, aboutDataText, questionText, aboveBelowStrings, longestQuestionIndex,																																						answerDecimals);		this.unitsString = unitsString;//		NumVariable yVar = (NumVariable)data.getVariable("y");//		exactAnswer = new NumValue(0.0, yVar.getMaxDecimals());		exactAnswer = new NumValue(0.0, answerDecimals);				createRandomGenerators(sampSizeMinMax, percentMinMax, returnPeriodMinMax);	}		private void createRandomGenerators(int[] sampSizeMinMax, int[] percentMinMax,																		int[] returnPeriodMinMax) {		sampSizeGenerator = new RandomUniform(1, sampSizeMinMax[0], sampSizeMinMax[1]);		percentGenerator = new RandomUniform(1, percentMinMax[0], percentMinMax[1]);		returnPeriodGenerator = new RandomUniform(1, returnPeriodMinMax[0], returnPeriodMinMax[1]);				randomValues = new Value[5];		longestValues = new Value[5];			randomValues[0] = belowLabel;		randomValues[1] = new NumValue(1, 0);			//	sampSize		randomValues[2] = new NumValue(1, 0);			//	percentage		randomValues[3] = new NumValue(1, 0);			//	return period		randomValues[4] = new NumValue(1, 0);			//	number (out of sampSize)				longestValues[0] = aboveLabel;		longestValues[1] = new NumValue(sampSizeMinMax[1], 0);		longestValues[2] = new NumValue(percentMinMax[1], 0);		longestValues[3] = new NumValue(returnPeriodMinMax[1], 0);		longestValues[4] = new NumValue(sampSizeMinMax[1], 0);	}		public void solveExercise() {		message.setText(2);		answer.setToCorrectAnswer(exactAnswer);		((PercentileWorkingPanel)working).setReferenceValue(proportionBelow.toDouble() * 100);	}		private double getLowApproxAnswer(NumValue sortedVal[], double eps) {		double step = eps / sortedVal.length;		double lowPropn = proportionBelow.toDouble() - step;		double low = exactAnswer.toDouble();		while (low == exactAnswer.toDouble() && lowPropn > 0.0) {			low = PercentileInfo.evaluatePercentile(sortedVal, lowPropn, PercentileInfo.STEP);			lowPropn -= step;		}				return low;	}		private double getHighApproxAnswer(NumValue sortedVal[], double eps) {		double step = eps / sortedVal.length;		double highPropn = proportionBelow.toDouble() + step;		double high = exactAnswer.toDouble();		while (high == exactAnswer.toDouble() && highPropn < 1.0) {			high = PercentileInfo.evaluatePercentile(sortedVal, highPropn, PercentileInfo.STEP);			highPropn += step;		}				return high;	}		public void changeQuestion() {		changeQuestionInfo();				int sampSizeInt = sampSizeGenerator.generateOne();		double r1 = sampSizeInt;		double r2 = percentGenerator.generateOne();		double r3 = returnPeriodGenerator.generateOne();		double r4 = (new RandomUniform(1, 1, sampSizeInt - 1)).generateOne();		((NumValue)randomValues[1]).setValue(r1);		((NumValue)randomValues[2]).setValue(r2);		((NumValue)randomValues[3]).setValue(r3);		((NumValue)randomValues[4]).setValue(r4);				proportion.setValue((questionIndex == 0) ? r2 / 100												: (questionIndex == 1) ? r4 / r1												: 1.0 / r3);		boolean lower = randomValues[0] == belowLabel;		proportionBelow.setValue(lower ? proportion.toDouble() : 1.0 - proportion.toDouble());				NumVariable yVar = (NumVariable)data.getVariable("y");		NumValue sortedVal[] = yVar.getSortedData();		exactAnswer.setValue(PercentileInfo.evaluatePercentile(sortedVal, proportionBelow.toDouble(),																																				PercentileInfo.STEP));		String answerString = exactAnswer.toString();		if (unitsString != null)			answerString += " " + unitsString;		messageArray[2] = "Correct! (The exact answer is " + answerString + ")";		messageArray[3] = "Close but you could do better! The exact answer is " + answerString;		String propnString = null;				if (questionIndex == 0) {		//	from percentage			messageArray[4] = "Wrong! Divide by 100 to get proportion. "													+ (lower ? "Then" : "Subtract from 1 then" + " use cumulative distribution function to look up value.");						propnString = lower ? (randomValues[2].toString() + " / 100")														: ("(1 - " + randomValues[2].toString() + " / 100)")														+ " = " + proportionBelow.toString();		}		else if (questionIndex == 1) {		//	from expected count			String xString = randomValues[4].toString();			String nString = randomValues[1].toString();			messageArray[4] = "Wrong. Divide " + xString + " by " + nString + " to get proportion then use cumulative distribution function to look up value.";						propnString = lower ? (randomValues[4].toString() + " / " + randomValues[1].toString())						: ("(1 - " + randomValues[4].toString() + " / " + randomValues[1].toString() + ")")							+ " = " + proportionBelow.toString();		}		else if (questionIndex == 2) {		//	from return period			messageArray[4] = "Wrong. The proportion is the inverse of the return period. Use the cumulative distn function to lookup the corresponding value.";						propnString = lower ? "1 / " + randomValues[3].toString()																	: ("(1 - 1 / " + randomValues[3].toString() + ")")																	+ " = " + proportionBelow.toString();		}				messageArray[5] = "The proportion of years that should be lower than this is " + propnString + ". Look up this from the cumulative distn function to get "																											+ answerString + ".";				lowExactAnswer = getLowApproxAnswer(sortedVal, 0.5);		highExactAnswer = getHighApproxAnswer(sortedVal, 0.5);		lowApproxAnswer = getLowApproxAnswer(sortedVal, 2.0);		highApproxAnswer = getHighApproxAnswer(sortedVal, 2.0);				if (message != null) {			message.changeText(messageArray);			message.setText(0);			answer.reset();		}	}	}