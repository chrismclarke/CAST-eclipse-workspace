package distn;public class DistnPoints {	public double z[];	public double d[];	public int elementsUsed;		DistnPoints(int initialSize) {		z = new double[initialSize];		d = new double[initialSize];		elementsUsed = 0;	}		DistnPoints(DistnPoints original, double zMode) {		//	for symmetric distn round zMode		d = original.d;		z = new double[original.elementsUsed];		for (int i=0 ; i<original.elementsUsed ; i++)			z[i] = 2.0 * zMode - original.z[i];		elementsUsed = original.elementsUsed;	}		void addPoint(double zVal, double dVal) {//		if (elementsUsed > 50)//			throw new RuntimeException("Too many points added to DistnPoints");		if (elementsUsed >= z.length)			increaseSize();		z[elementsUsed] = zVal;		d[elementsUsed ++] = dVal;	}		private void increaseSize() {		double[] oldData = z;		z = new double[elementsUsed + 100]; 		System.arraycopy(oldData, 0, z, 0, elementsUsed); 		 		oldData = d;		d = new double[elementsUsed + 100]; 		System.arraycopy(oldData, 0, d, 0, elementsUsed);	}		void compact() {		z = compactArray(z);		d = compactArray(d);	}		private double[] compactArray(double[] array) {		double[] oldData = array;		array = new double[elementsUsed]; 		System.arraycopy(oldData, 0, array, 0, elementsUsed); 		return array;	}}