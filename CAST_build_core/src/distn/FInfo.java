package distn;public class FInfo extends DistnInfo {	private double factor;	private int df1, df2;		public FInfo (int df1, int df2) {		super();		this.df1 = df1;		this.df2 = df2;		double logFactor = 0.5 * (df1 * Math.log(df1) + df2 * Math.log(df2));		logFactor += FTable.aLoGam((df1 + df2) * 0.5) - FTable.aLoGam(df1 * 0.5)																										- FTable.aLoGam(df2 * 0.5);		factor = Math.exp(logFactor);	}		public double zMin() {		return 0.0;	}		public double zMax() {		return FTable.quantile(0.999, df1, 999);	}		public double zMode() {		return (df1 <= 2) ? 0.0 : (df2 * (df1 - 2)) / (double)(df1 * (df2 + 2));	}		public boolean isSymmetric() {		return false;	}		public double getDensity(double z) {		if (df1 == 1 && z == 0.0)			return Double.POSITIVE_INFINITY;		else			return factor * Math.pow(z, df1 * 0.5 - 1.0)																/ Math.pow((df2 + df1 * z), (df1 + df2) * 0.5);	}		public boolean sameParams(ContinDistnVariable v) {		FDistnVariable fv = (FDistnVariable)v;		return (fv.getDF1() == df1) && (fv.getDF2() == df2);	}}