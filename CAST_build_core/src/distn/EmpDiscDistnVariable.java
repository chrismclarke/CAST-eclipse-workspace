package distn;import java.util.*;import dataView.*;public class EmpDiscDistnVariable extends DiscreteDistnVariable {	public EmpDiscDistnVariable(String theName) {		super(theName);	}	private double p[];	private int n, decimals;	private double maxP;		public void setParams(String s) {		try {			StringTokenizer st = new StringTokenizer(s);			n = Integer.parseInt(st.nextToken());			p = new double[n];			double totalProb = 0.0;			maxP = 0.0;			for (int i=0 ; i<n ; i++) {				double pi = Double.parseDouble(st.nextToken());				p[i] = pi;				totalProb += pi;				if (pi > maxP)					maxP = pi;			}			for (int i=0 ; i<n ; i++)				p[i] /= totalProb;						if (st.hasMoreTokens())				decimals = Integer.parseInt(st.nextToken());			else				decimals = 2;		} catch (Exception e) {			System.err.println("Wrong number of probabilities");		}		setMinSelection(0.5);		setMaxSelection(0.5);	}		public NumValue getMean() {		double ex = 0.0;				for (int i=0 ; i<n ; i++)			ex += p[i] * i;		return new NumValue(ex, decimals);	}		public NumValue getSD() {		double ex = 0.0;		double exx = 0.0;				for (int i=0 ; i<n ; i++) {			ex += p[i] * i;			exx += p[i] * i * i;		}		return new NumValue(Math.sqrt(exx - ex * ex), decimals);	}		public double getProbFactor() {		return 1.0;	}		public double getMaxScaledProb() {		return maxP;	}		public double getScaledProb(int x) {		return (x >= 0 && x < p.length) ? p[x] : 0.0;	}		public int getPercentile(int x) {		double cumProb = 0.0;		for (int i=0 ; i<x ; i++)			cumProb += p[i];		return (int)Math.round(cumProb * 100 + p[x] * 50);	}	}