package distn;public class TTable {		static public double cumulative(double x, double degrees) {																		//		prob of less than or equal to x		boolean neg = x < 0.0;		double z = neg ? -x : x;		if (z == 0.0)			return 0.5;				if (!Double.isInfinite(degrees)) {			double u = Math.sqrt(degrees * Math.log(z * z / degrees + 1.0));			double s = 0.184 * (8.0 * degrees + 3.0) / (u * Math.sqrt(degrees));			z = u * (1.0 - 2.0 * Math.sqrt(1 - Math.exp(-s * s)) / (8.0 * degrees + 3.0));		}				double result = NormalTable.alNorm(z, neg);		return result;	}		static final private double a0 = 0.03125, a2 = 0.1666666667, a4 = 0.0520833333;	static final private double b0 = -0.0390625, b2 = 0.0442708333, b4 = 0.0494791667,																								b6 = 0.0078125;	static final private double c0 = -0.010253906, c2 = -0.020833333, c4 = 0.016080729,																		c6 = 0.008420139, c8 = 0.000857205;		static public double quantile(double p, double degrees) {		double z = NormalTable.quantile(p);		if (!Double.isInfinite(degrees)) {			double z2 = z * z;			z = z * (1.0 + (z2 + 1.0) / (4.0 * degrees)							+ ((a4 * z2 + a2) * z2 + a0) / (degrees * degrees)							+ (((b6 * z2 + b4) * z2 + b2) * z2 + b0) / (degrees * degrees * degrees)							+ ((((c8 * z2 + c6) * z2 + c4) * z2 + c2) * z2 + c0)																	/ (degrees * degrees * degrees * degrees));		}		return z;	}}