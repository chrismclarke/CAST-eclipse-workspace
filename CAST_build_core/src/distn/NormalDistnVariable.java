package distn;import java.util.*;import dataView.*;public class NormalDistnVariable extends ContinDistnVariable {	static public double stdCumProb(double z) {		return NormalTable.cumulative(z);	}			static public double stdQuantile(double prob) {		return NormalTable.quantile(prob);	}	//---------------------------------------------------------------------------------	protected NumValue mean = new NumValue(0.0, 0);	protected NumValue sd = new NumValue(1.0, 0);		public NormalDistnVariable(String theName) {		super(theName);	}		public NormalDistnVariable(NormalDistnVariable oldDistn) {		this(oldDistn.name);		mean = new NumValue(oldDistn.mean);		sd = new NumValue(oldDistn.sd);	}		public void setParams(String s) {		if (s == null) {			mean = new NumValue(0.0, 0);			sd = new NumValue(1.0, 0);		}		else			try {				StringTokenizer params = new StringTokenizer(s);				String meanString = params.nextToken();				mean = new NumValue(meanString);							String sdString = params.nextToken();				sd = new NumValue(sdString);				if (sd.toDouble() <= 0.0)					throw new Exception();			} catch (Exception e) {				System.err.println("Bad parameters for normal distn: " + s);			}		double meanVal = getMean().toDouble();		setMinSelection(meanVal);		setMaxSelection(meanVal);	}		public NumValue getMean() {		return mean;	}		public NumValue getSD() {		return sd;	}		public void setMean(NumValue newMean) {		mean = newMean;		setMinSelection(newMean.toDouble());		setMaxSelection(newMean.toDouble());	}		public void setMean(double newMean) {		mean.setValue(newMean);		setMinSelection(newMean);		setMaxSelection(newMean);	}		public void setSD(NumValue newSD) {		sd = newSD;	}		public void setSD(double newSD) {		sd.setValue(newSD);	}		public void setDecimals(int decimals) {		mean.decimals = decimals;		sd.decimals = decimals;	}		public void setDecimals(int meanDecimals, int sdDecimals) {		mean.decimals = meanDecimals;		sd.decimals = sdDecimals;	}		public double getDensityFactor() {		return 1.0 / (Math.sqrt(2.0 * Math.PI) * getSD().toDouble());	}		public double getMaxScaledDensity() {		return 1.0;	}		public double getScaledDensity(double x) {		double devn = (x - getMean().toDouble()) / getSD().toDouble();		return Math.exp(-0.5 * devn * devn);	}		public double getCumulativeProb(double v) {		return stdCumProb((v - getMean().toDouble()) / getSD().toDouble());	}		public double getQuantile(double prob) {		return getMean().toDouble() + stdQuantile(prob) * getSD().toDouble();	}		public DistnInfo getDistnInfo() {		return new NormalInfo();	}		public double xToZ(double x) {		return (x - getMean().toDouble()) / getSD().toDouble();	}		public double zToX(double z) {		return z * getSD().toDouble() + getMean().toDouble();	}}