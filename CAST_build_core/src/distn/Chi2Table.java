package distn;public class Chi2Table {	static private double t(double y) {		if (y == 1.0)			return 0.0;		else {			double tempVal = (1 + y * (2.0 * Math.log(y) - y));			return tempVal / (1 - y) / (1 - y);		}	}		static public double cumulative(double x, int degrees) {																		//		prob of less than or equal to x		if (degrees == 1)			return 1.0 - 2.0 * NormalTable.alNorm(Math.sqrt(x), true);		else if (degrees == 2)			return 1.0 - Math.exp(-x / 2);		else if (x < 0.0001)			return 0.0;		else {			double d = x - degrees + 0.66666666667 - 0.08 / degrees;			double e = (1.0 + t((degrees - 1) / x)) / (2.0 * x);			double z = d * Math.sqrt(e);			return 1.0 - NormalTable.alNorm(z, true);		}	}		static public double chi2Quant(double prob, int degrees) {		double gValue = GammaDistnVariable.aLoGam(degrees * 0.5);		return 0.5 * GammaDistnVariable.ppChi2(prob, degrees, gValue);	}}