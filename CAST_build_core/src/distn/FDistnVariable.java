package distn;import dataView.*;public class FDistnVariable extends ContinDistnVariable {	static public double cumProb(double f, int df1, int df2) {		return FTable.cumulative(f, df1, df2);	}		public double quantile(double prob, int df1, int df2) {		return FTable.quantile(prob, df1, df2);	}	//---------------------------------------------------------------------------------	private int df1, df2;		public FDistnVariable(String theName, int df1, int df2) {		super(theName);		this.df1 = df1;		this.df2 = df2;		setMinSelection(0.0);		setMaxSelection(0.0);	}		public void setParams(String s) {	}		public NumValue getMean() {		if (df2 <= 2)			return new NumValue(Double.POSITIVE_INFINITY, 0);		else			return new NumValue(df2 / (df2 - 2.0), 3);	}		public NumValue getSD() {		return new NumValue(Math.sqrt(2.0 * df2 * df2 * (df1 + df2 - 2.0)															/ (df1 * (df2 - 2.0) * (df2 - 2.0) * (df2 - 4.0))), 3);	}		public int getDF1() {		return df1;	}		public int getDF2() {		return df2;	}		public void setDF(int df1, int df2) {		this.df1 = df1;		this.df2 = df2;	}		public double getDensityFactor() {		double logFactor = 0.5 * (df1 * Math.log(df1) + df2 * Math.log(df2));		logFactor += FTable.aLoGam((df1 + df2) * 0.5) - FTable.aLoGam(df1 * 0.5)																										- FTable.aLoGam(df2 * 0.5);		return Math.exp(logFactor);	}		public double getMaxScaledDensity() {		return 1.0;	}		public double getScaledDensity(double x) {		if (x < 0.0)			return 0.0;		else if (x == 0.0 && df1 == 1)			return Double.POSITIVE_INFINITY;		else			return Math.pow(x, df1 * 0.5 - 1.0)																/ Math.pow((df2 + df1 * x), (df1 + df2) * 0.5);	}		public double getCumulativeProb(double v) {		return cumProb(v, df1, df2);	}		public double getQuantile(double prob) {		return quantile(prob, df1, df2);	}		public DistnInfo getDistnInfo() {		return new FInfo(df1, df2);	}		public double xToZ(double x) {		return x;	}		public double zToX(double z) {		return z;	}}