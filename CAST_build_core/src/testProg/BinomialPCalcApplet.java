package testProg;import dataView.*;import test.*;import qnUtils.*;import distn.*;import randomStatProg.*;public class BinomialPCalcApplet extends BinomialCalcApplet {	protected boolean testNotProb() {		return true;	}		protected String[] getAnswerStrings() {		String nString = question.getValueString(QuestionLayout.N);		int n = Integer.parseInt(nString);				String piString = question.getValueString(QuestionLayout.PI);		double pi = Double.parseDouble(piString);				String xString = question.getValueString(QuestionLayout.X1_VALUE);		int x = Integer.parseInt(xString);				String solnString = "The p-value is " + answer.toString();				String adviceString;		switch (test.getTestTail()) {			case HypothesisTest.HA_LOW:				adviceString = "The p-value is the sum of probabilities below " + String.valueOf(x) + ".5.";				break;			case HypothesisTest.HA_HIGH:				adviceString = "The p-value is 1.0 minus the sum of probabilities below " + String.valueOf(x - 1) + ".5.";				break;			case HypothesisTest.HA_NOT_EQUAL:			default:				double lowProb = BinomialTable.cumulative(x, n, pi);				double highProb = 1.0 - BinomialTable.cumulative(x - 1, n, pi);				adviceString = (lowProb <= highProb) ? ("the sum of probabilities below " + String.valueOf(x) + ".5.")													: ("the sum of the probabilities above " + String.valueOf(x - 1) + ".5.");				adviceString = "The p-value is 2.0 times " + adviceString;				break;		}				String accuracyString = (new NumValue(approxSlop * 100, 0)).toString();				String answerString[] = new String[5];				answerString[LinkedAnswerEditPanel.NONE] = "Find the p-value to within " + accuracyString										+ "% of the correct value. Then select your conclusion.";		answerString[LinkedAnswerEditPanel.EXACT] = "P-value is correct!  " + solnString;		answerString[LinkedAnswerEditPanel.WRONG] = "P-value is wrong.  Set the sliders to n = " + nString + " and pi = " + piString + ". " + adviceString;		answerString[LinkedAnswerEditPanel.UNKNOWN] = "Error! You have not typed a valid number.";		answerString[LinkedAnswerEditPanel.CLOSE] = "P-value is close enough!  " + solnString;		return answerString;	}		protected HypothesisTest findTestInfo(String tailString, String[] paramString) {		int testTail;		if (tailString.equals("low"))			testTail = HypothesisTest.HA_LOW;		else if (tailString.equals("high"))			testTail = HypothesisTest.HA_HIGH;		else			testTail = HypothesisTest.HA_NOT_EQUAL;		return new UnivarHypothesisTest(null, null, new NumValue(paramString[7]), testTail, HypothesisTest.PROPN, this);	}		protected void setupAnswer() {		String nString = question.getValueString(QuestionLayout.N);		int n = Integer.parseInt(nString);				String piString = question.getValueString(QuestionLayout.PI);		double pi = Double.parseDouble(piString);				String xString = question.getValueString(QuestionLayout.X1_VALUE);		int x = Integer.parseInt(xString);				double pValue = 0.0;		if (tailString.equals("low"))			pValue = BinomialTable.cumulative(x, n, pi);		else if (tailString.equals("high"))			pValue = 1.0 - BinomialTable.cumulative(x - 1, n, pi);		else			pValue = 2.0 * Math.min(BinomialTable.cumulative(x, n, pi), 1.0 - BinomialTable.cumulative(x - 1, n, pi));				answer = new NumValue(pValue, 4);	}		protected double getAccuracy(double slopValue) {		return Math.max(0.001, slopValue * answer.toDouble());	}}