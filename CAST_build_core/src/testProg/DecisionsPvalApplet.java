package testProg;import java.awt.*;import java.util.*;import dataView.*;import utils.*;import distn.*;public class DecisionsPvalApplet extends DecisionsApplet {	private NumValue pValLow, pValHigh, pValStart;		private ParameterSlider criticalPvalSlider;		protected void readCriticalValues() {		StringTokenizer st = new StringTokenizer(getParameter(CRITICAL_SLIDER_PARAM));		pValLow = new NumValue(st.nextToken());		pValHigh = new NumValue(st.nextToken());		pValStart = new NumValue(st.nextToken());				double z = NormalTable.quantile(1.0 - pValStart.toDouble());				criticalStart = new NumValue(nullMean.toDouble() + z * meanSd.toDouble(), nullMean.decimals);	}		protected boolean showDistns() {		return false;	}		protected ParameterSlider createDecisionSlider() {		criticalPvalSlider = new ParameterSlider(pValLow, pValHigh, pValStart, "", this);		criticalPvalSlider.setAddEquals(false);		criticalPvalSlider.setTitle(translate("Reject H0 if p-value") + " < ", this);		criticalPvalSlider.setFont(getStandardBoldFont());		criticalPvalSlider.setForeground(kDecisionColor);		return criticalPvalSlider;	}		protected int getRightSliderGap() {		return 30;	}		protected double getCriticalMean() {		double pVal = criticalPvalSlider.getParameter().toDouble();		double z = NormalTable.quantile(1.0 - pVal);		return nullMean.toDouble() + z * meanSd.toDouble();	}		private boolean localAction(Object target) {		if (target == criticalPvalSlider) {			double newCritical = getCriticalMean();						setCriticalMeanValue(newCritical);						return true;		}		return false;	}		@SuppressWarnings("deprecation")	public boolean action(Event evt, Object what) {		if (super.action(evt, what))			return true;		else			return localAction(evt.target);	}}